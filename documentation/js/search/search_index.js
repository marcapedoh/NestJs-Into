var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/guards/AccessTokenGuard.html",[0,3.048,1,2.272]],["body/guards/AccessTokenGuard.html",[1,2.805,2,2.633,3,0.128,4,0.114,5,0.114,6,4.389,7,2.929,8,0.27,9,1.129,10,1.8,11,5.636,12,2.217,13,4.827,14,1.123,15,2.633,16,4.475,17,3.728,18,3.801,19,0.631,20,3.378,21,1.369,22,0.015,23,1.266,24,0.508,25,0.954,26,2.929,27,4.389,28,3.378,29,3.447,30,1.085,31,2.985,32,4.827,33,4.181,34,3.378,35,1.48,36,2.383,37,0.356,38,1.667,39,0.541,40,3.483,41,0.481,42,1.587,43,1.755,44,2.633,45,2.412,46,1.853,47,2.236,48,2.633,49,2.633,50,2.929,51,0.128,52,0.062,53,2.236,54,1.514,55,1.268,56,2.236,57,2.632,58,3.378,59,5.636,60,3.378,61,2.164,62,1.815,63,1.587,64,4.185,65,1.17,66,3.378,67,3.378,68,2.929,69,1.587,70,1.514,71,1.085,72,1.667,73,3.378,74,3.378,75,3.378,76,3.378,77,2.929,78,2.929,79,2.929,80,3.378,81,3.378,82,3.378,83,0.009,84,0.009]],["title/interfaces/ActiveUserData.html",[85,2.588,86,1.93]],["body/interfaces/ActiveUserData.html",[3,0.205,4,0.182,5,0.182,8,0.432,22,0.014,24,0.595,35,1.87,51,0.205,83,0.012,84,0.012,85,3.58,86,3.256,87,4.216,88,3.58,89,1.874,90,4.689,91,1.874,92,3.658,93,5.426,94,2.465,95,2.316,96,3.58]],["title/controllers/AppController.html",[97,1.41,98,2.792]],["body/controllers/AppController.html",[3,0.208,4,0.184,5,0.184,22,0.015,35,1.438,37,0.34,41,0.779,51,0.208,52,0.1,54,2.452,55,1.438,71,1.23,83,0.012,84,0.012,97,2.396,98,4.744,99,2.057,100,4.744,101,4.424,102,4.744,103,4.744,104,5.471]],["title/modules/AppModule.html",[105,1.41,106,2.792]],["body/modules/AppModule.html",[1,2.382,3,0.103,4,0.091,5,0.091,22,0.015,24,0.244,37,0.399,38,1.335,41,0.385,42,1.271,43,1.406,46,1.484,51,0.103,52,0.049,57,1.158,72,1.335,83,0.008,84,0.008,89,1.164,96,1.79,98,3.534,99,1.541,101,3.861,102,2.345,105,1.785,106,5.506,107,1.271,108,1.271,109,1.406,110,1.406,111,1.271,112,2.572,113,1.406,114,2.345,115,2.345,116,2.345,117,3.861,118,4.132,119,3.861,120,4.132,121,4.23,122,4.132,123,3.628,124,2.13,125,1.406,126,1.335,127,2.109,128,3.06,129,2.705,130,2.705,131,2.705,132,1.572,133,2.705,134,2.705,135,1.79,136,1.061,137,2.705,138,2.705,139,1.335,140,1.484,141,2.705,142,1.406,143,2.705,144,3.195,145,4.304,146,2.705,147,4.099,148,2.705,149,4.099,150,2.705,151,4.099,152,2.705,153,2.109,154,2.705,155,3.554,156,4.099,157,1.79,158,2.705,159,1.932,160,2.927,161,2.705,162,1.572,163,2.705,164,2.109,165,2.927,166,2.705,167,2.109,168,2.705,169,2.705,170,3.857,171,2.345,172,2.705,173,2.705,174,4.099,175,2.705,176,2.705,177,2.705,178,2.705,179,2.705,180,2.705,181,2.705,182,1.673,183,2.705,184,2.705,185,2.705,186,2.705,187,2.705,188,2.705,189,2.705,190,2.705,191,1.673,192,2.705,193,2.705,194,2.705,195,2.705,196,2.109,197,2.109,198,3.554,199,3.554]],["title/injectables/AppService.html",[39,0.438,101,2.418]],["body/injectables/AppService.html",[3,0.207,4,0.184,5,0.184,8,0.435,9,1.55,19,0.611,22,0.015,30,1.225,35,1.741,37,0.279,39,0.743,41,0.776,51,0.207,52,0.1,71,1.225,83,0.012,84,0.012,101,4.099,103,6.443,200,1.609,201,4.725,202,5.45,203,5.45,204,5.45,205,4.725]],["title/controllers/AuthController.html",[97,1.41,206,2.792]],["body/controllers/AuthController.html",[3,0.151,4,0.134,5,0.134,8,0.318,9,1.265,10,2.275,19,0.606,21,1.315,22,0.015,23,1.216,24,0.554,25,0.917,30,1.216,37,0.364,41,0.566,51,0.151,52,0.073,54,1.783,55,1.045,71,1.216,83,0.01,84,0.01,97,1.435,99,1.495,206,3.863,207,3.448,208,2.311,209,3.345,210,2.022,211,3.863,212,4.217,213,3.448,214,4.403,215,1.598,216,5.409,217,3.977,218,3.977,219,2.034,220,3.1,221,4.403,222,5.409,223,3.977,224,3.977,225,2.459,226,3.977,227,3.448,228,1.222,229,3.573,230,3.448,231,3.1,232,3.977,233,2.632,234,3.448,235,3.1,236,2.632,237,3.977,238,5.409,239,4.69,240,3.977,241,3.977,242,3.977,243,3.977,244,3.977]],["title/modules/AuthModule.html",[105,1.41,117,2.418]],["body/modules/AuthModule.html",[3,0.133,4,0.118,5,0.118,22,0.015,37,0.393,41,0.498,42,1.642,43,1.816,46,1.917,47,2.313,51,0.133,52,0.064,83,0.009,84,0.009,99,1.86,105,2.07,107,1.642,108,1.642,109,1.816,110,1.816,111,1.642,112,2.983,113,2.983,117,4.803,123,2.874,124,2.57,125,1.816,126,1.725,128,2.161,144,2.724,153,2.724,196,2.724,197,2.724,198,3.03,199,3.03,206,4.099,229,4.394,230,3.03,245,3.03,246,3.03,247,3.03,248,3.94,249,3.553,250,4.228,251,4.228,252,4.228,253,3.495,254,4.099,255,2.713,256,3.495,257,3.03,258,3.495,259,3.532,260,3.495,261,3.03,262,3.03,263,3.03,264,3.273,265,3.03,266,3.495,267,3.495,268,3.495,269,3.03]],["title/injectables/AuthService.html",[39,0.438,229,2.272]],["body/injectables/AuthService.html",[3,0.143,4,0.127,5,0.127,8,0.301,9,1.218,10,2.237,12,2.155,14,1.252,19,0.67,21,1.452,22,0.015,23,1.343,24,0.539,25,1.012,30,1.171,37,0.367,38,1.859,39,0.584,41,0.536,51,0.143,52,0.069,55,1.57,65,1.804,71,1.171,83,0.01,84,0.01,200,1.112,210,1.988,211,3.72,212,4.061,213,4.517,214,4.186,219,1.959,220,4.061,221,4.186,229,3.028,231,2.935,235,2.935,236,2.492,249,1.957,251,3.987,252,4.439,255,2.066,261,3.264,262,3.264,263,3.264,264,3.448,265,3.264,270,3.264,271,2.935,272,3.218,273,5.974,274,3.765,275,3.765,276,3.765,277,2.328,278,3.765,279,3.765,280,3.765]],["title/guards/AuthenticationGuard.html",[0,3.048,160,2.792]],["body/guards/AuthenticationGuard.html",[1,4.094,2,4.492,3,0.134,4,0.119,5,0.119,8,0.281,9,1.162,10,1.842,11,6.238,12,2.382,14,1.171,19,0.557,21,1.209,22,0.015,23,1.118,24,0.52,25,0.842,26,3.053,27,4.471,29,3.55,30,0.792,31,3.075,37,0.351,39,0.557,40,3.075,41,0.501,44,2.745,45,2.514,50,3.053,51,0.134,52,0.064,53,2.33,54,1.578,55,1.801,57,2.828,61,1.578,62,1.324,65,1.219,70,2.583,71,0.792,72,2.454,83,0.009,84,0.009,91,1,157,2.33,159,2.514,160,3.55,233,2.33,234,3.053,281,3.053,282,4.971,283,4.971,284,4.971,285,3.521,286,6.854,287,3.521,288,3.521,289,3.521,290,2.745,291,4.971,292,3.521,293,3.521,294,3.521,295,3.053,296,3.521,297,3.521,298,3.521,299,3.521,300,3.521,301,3.521,302,3.521,303,3.521,304,3.521,305,3.521,306,3.521]],["title/injectables/BcryptProvider.html",[39,0.438,259,2.792]],["body/injectables/BcryptProvider.html",[3,0.162,4,0.144,5,0.144,8,0.341,9,1.326,10,2.035,19,0.636,21,1.378,22,0.015,23,1.275,24,0.511,25,0.961,30,1.275,31,4.198,35,2.003,37,0.326,39,0.636,41,0.607,51,0.162,52,0.078,53,2.823,57,1.827,65,1.477,71,1.275,83,0.011,84,0.011,200,1.26,210,1.809,248,3.111,259,4.049,307,3.698,308,4.916,309,4.916,310,4.916,311,6.299,312,5.885,313,4.265,314,3.753,315,4.916,316,4.265,317,3.698,318,4.916,319,5.67,320,4.265,321,4.265,322,4.265]],["title/injectables/CreateGoogleUserProvider.html",[39,0.438,323,2.418]],["body/injectables/CreateGoogleUserProvider.html",[3,0.158,4,0.14,5,0.14,8,0.332,9,1.302,10,2.008,12,1.498,14,1.852,19,0.624,21,1.354,22,0.015,23,1.252,24,0.502,25,0.944,30,0.934,37,0.358,39,0.624,41,0.591,51,0.158,52,0.076,57,1.778,61,1.861,62,2.094,63,1.951,65,1.438,69,1.951,70,1.861,71,0.934,83,0.01,84,0.01,89,1.785,136,1.629,200,1.226,210,1.785,219,1.561,323,3.444,324,4.488,325,3.448,326,2.965,327,4.829,328,3.237,329,3.156,330,4.152,331,3.977,332,4.829,333,4.636,334,4.152,335,3.237,336,1.561,337,2.413,338,2.158,339,3.6,340,3.6,341,2.748,342,4.152,343,4.152,344,3.6,345,1.561,346,1.861]],["title/classes/CreateManyUsersDTO.html",[52,0.072,347,2.418]],["body/classes/CreateManyUsersDTO.html",[3,0.176,4,0.156,5,0.156,8,0.371,19,0.521,22,0.015,24,0.655,37,0.359,51,0.176,52,0.121,72,3.277,83,0.011,84,0.011,89,1.319,91,1.703,215,1.371,346,2.082,347,3.707,348,1.746,349,4.673,350,3.968,351,3.316,352,4.394,353,3.646,354,4.644,355,5.198,356,4.673,357,5.198,358,4.644,359,4.026,360,4.644,361,5.198,362,3.115,363,5.198,364,1.902,365,2.872,366,2.872,367,4.281,368,2.292,369,4.026]],["title/classes/CreatePostDto.html",[52,0.072,370,2.272]],["body/classes/CreatePostDto.html",[3,0.077,4,0.069,5,0.069,8,0.163,19,0.72,22,0.015,24,0.649,25,1.134,29,2.342,35,1.726,36,1.004,37,0.284,51,0.077,52,0.075,70,1.47,72,2.034,83,0.006,84,0.006,91,1.17,94,1.427,139,1.619,215,1.898,228,2.09,345,2.558,348,0.765,355,2.844,356,3.212,357,2.844,359,1.764,361,2.844,362,2.88,363,2.844,364,0.834,366,1.258,367,3.957,368,1.004,369,2.844,370,1.906,371,5.697,372,1.764,373,5.053,374,2.943,375,2.943,376,4.727,377,3.573,378,2.943,379,3.431,380,2.728,381,3.206,382,5.053,383,2.035,384,4.799,385,2.035,386,2.035,387,3.28,388,3.28,389,4.727,390,3.28,391,2.035,392,2.747,393,2.844,394,2.035,395,5.184,396,1.906,397,2.035,398,2.035,399,2.035,400,4.098,401,4.727,402,3.28,403,2.035,404,2.923,405,2.035,406,4.098,407,3.28,408,3.28,409,3.28,410,2.035,411,2.035,412,3.28,413,4.098,414,3.28,415,3.28,416,2.035,417,2.035,418,2.035,419,1.764,420,3.573,421,1.764,422,4.098,423,4.098,424,2.557,425,2.844,426,2.844,427,2.844,428,2.844,429,2.844,430,1.764,431,2.035,432,4.041,433,2.035,434,2.844,435,3.28,436,2.035,437,2.035,438,2.035,439,2.557,440,2.035,441,2.035,442,2.035,443,2.035,444,2.035,445,3.212,446,3.28,447,2.557,448,3.524,449,2.747,450,2.844,451,1.586,452,1.586,453,1.586,454,1.764,455,1.764,456,1.453,457,1.453,458,4.543,459,2.035,460,2.035,461,2.035,462,2.844,463,1.764,464,1.764,465,2.035,466,2.035,467,2.035,468,2.035,469,1.764,470,2.171,471,1.764,472,2.557,473,2.035,474,2.035,475,2.035]],["title/classes/CreatePostMetaOptionsDto.html",[52,0.072,392,2.272]],["body/classes/CreatePostMetaOptionsDto.html",[3,0.201,4,0.178,5,0.178,8,0.422,19,0.593,22,0.015,24,0.477,35,1.709,37,0.271,51,0.201,52,0.119,83,0.012,84,0.012,91,1.848,139,3.211,215,1.561,228,1.998,348,1.988,362,3.381,364,2.166,392,3.781,447,5.071,449,3.073,456,4.646,472,5.493,476,3.381,477,4.584,478,5.287,479,5.287]],["title/injectables/CreatePostProvider.html",[39,0.438,162,2.272]],["body/injectables/CreatePostProvider.html",[3,0.122,4,0.108,5,0.108,8,0.256,9,1.086,10,1.747,12,1.972,14,1.545,19,0.521,21,1.129,22,0.015,23,1.044,24,0.419,25,0.787,30,0.72,36,2.293,37,0.359,39,0.521,41,0.456,51,0.122,52,0.059,55,1.436,61,2.45,62,2.055,63,2.183,65,2.076,69,2.183,70,2.082,71,0.72,83,0.009,84,0.009,86,2.96,88,2.119,89,1.703,136,1.256,142,3.56,162,2.699,200,0.946,210,1.552,219,1.204,228,1.679,272,3.07,277,1.98,329,2.818,335,2.496,336,1.204,338,1.664,344,4.027,345,1.204,370,3.859,375,4.281,379,2.119,381,3.708,393,2.776,439,2.496,480,4.739,481,2.776,482,3.62,483,3.202,484,3.202,485,4.027,486,4.027,487,3.202,488,2.286,489,1.505,490,2.286,491,2.496,492,2.776,493,1.98,494,2.776,495,3.202,496,3.202,497,3.968,498,3.202,499,3.202,500,3.202,501,2.776,502,3.202,503,3.202,504,1.757,505,3.202,506,3.202,507,2.776,508,2.776,509,2.496,510,2.286,511,3.202,512,3.202]],["title/classes/CreateTagDto.html",[52,0.072,513,2.588]],["body/classes/CreateTagDto.html",[3,0.137,4,0.121,5,0.121,8,0.288,19,0.747,22,0.015,23,1.312,24,0.601,25,1.17,35,1.958,37,0.259,51,0.137,52,0.092,83,0.009,84,0.009,91,1.435,215,1.967,228,1.106,345,2.378,348,1.354,362,3.032,364,1.475,367,4.166,368,1.778,374,4.166,378,4.166,379,4.408,384,4.57,389,3.938,419,3.123,420,5.059,421,3.123,422,5.484,423,5.484,424,3.938,425,4.38,426,4.38,427,4.38,428,4.38,429,4.38,430,3.123,447,3.938,448,3.676,449,3.676,450,4.38,451,2.808,452,2.808,453,2.808,458,4.93,463,3.123,464,4.38,469,3.123,513,3.344,514,5.986,515,3.123,516,3.602,517,3.602,518,3.602,519,3.602,520,3.602,521,3.602,522,3.602,523,3.602,524,3.602,525,3.123]],["title/classes/CreateUserDto.html",[52,0.072,353,2.032]],["body/classes/CreateUserDto.html",[3,0.147,4,0.131,5,0.131,8,0.31,19,0.732,22,0.015,24,0.589,25,0.901,35,1.936,37,0.199,51,0.147,52,0.097,83,0.01,84,0.01,91,1.51,92,2.996,94,1.841,191,4.23,215,1.928,348,1.458,349,5.332,351,2.77,353,2.764,362,3.393,364,1.589,424,4.145,448,3.091,449,3.976,451,3.023,452,3.023,453,3.023,525,4.611,526,4.017,527,4.333,528,3.879,529,3.879,530,3.879,531,3.879,532,3.879,533,3.879,534,3.879,535,6.529,536,5.318,537,5.318,538,4.611,539,5.318,540,5.318,541,5.318,542,4.557,543,5.318,544,6.529,545,5.318,546,5.318,547,5.318,548,3.879,549,4.611,550,6.068,551,3.879,552,3.879]],["title/injectables/CreateUserProvider.html",[39,0.438,553,2.418]],["body/injectables/CreateUserProvider.html",[3,0.124,4,0.11,5,0.11,8,0.26,9,1.1,10,1.765,12,1.698,14,1.565,19,0.528,21,1.144,22,0.015,23,1.058,24,0.424,25,0.797,30,0.733,33,2.911,36,2.323,37,0.342,38,1.61,39,0.528,41,0.464,51,0.124,52,0.06,55,1.237,61,2.711,62,2.274,63,2.842,65,1.912,69,2.212,70,2.476,71,0.733,83,0.009,84,0.009,89,1.337,92,2.323,96,3.115,136,1.279,191,2.017,200,0.963,210,1.568,219,1.226,248,3.868,255,1.789,324,3.944,326,2.329,328,2.542,329,2.842,331,3.361,336,1.226,337,1.895,338,1.695,341,2.158,345,1.77,353,3.472,365,2.017,488,2.329,489,1.532,553,3.415,554,4.081,555,3.261,556,4.081,557,3.261,558,2.017,559,3.261,560,2.158,561,5.522,562,3.261,563,3.261,564,3.669,565,3.669,566,4.081,567,3.944,568,3.669,569,2.827,570,2.542,571,2.827,572,3.261,573,2.542,574,4.305,575,3.261,576,3.261,577,3.261,578,2.542,579,3.261,580,2.827,581,2.542,582,3.261,583,3.261,584,3.261,585,3.261,586,2.827,587,2.329,588,3.261,589,3.261]],["title/injectables/DataResponseInterceptor.html",[39,0.438,165,2.792]],["body/injectables/DataResponseInterceptor.html",[3,0.167,4,0.149,5,0.149,8,0.352,9,1.356,14,1.467,19,0.65,21,1.41,22,0.015,23,1.304,24,0.523,25,0.982,27,4.912,29,3.15,30,0.992,37,0.331,39,0.65,41,0.628,42,2.073,44,5.048,45,3.15,51,0.167,52,0.081,53,2.92,54,1.978,55,1.159,71,0.992,83,0.011,84,0.011,145,5.717,165,4.14,167,5.048,200,1.303,314,3.838,590,5.615,591,3.825,592,5.798,593,4.411,594,4.411,595,5.798,596,5.048,597,6.879,598,4.411,599,5.798,600,4.411,601,4.411,602,4.411,603,4.411,604,4.411]],["title/injectables/FindOneByGoogleIdProvider.html",[39,0.438,605,2.418]],["body/injectables/FindOneByGoogleIdProvider.html",[3,0.168,4,0.149,5,0.149,8,0.353,9,1.358,10,2.073,12,1.596,14,1.932,19,0.651,21,1.412,22,0.015,23,1.306,24,0.524,25,0.984,30,0.995,35,1.704,37,0.353,39,0.651,41,0.63,51,0.168,52,0.081,55,1.163,71,0.995,83,0.011,84,0.011,89,1.257,136,1.736,200,1.307,210,1.842,219,1.664,325,3.559,328,3.45,329,3.237,331,4.149,336,1.664,337,2.572,338,2.3,341,2.929,542,4.011,605,3.593,606,5.056,607,3.837,608,5.037,609,4.425,610,5.037,611,4.425,612,4.293,613,3.837]],["title/injectables/FindOneUserByEmailProvider.html",[39,0.438,614,2.418]],["body/injectables/FindOneUserByEmailProvider.html",[3,0.152,4,0.135,5,0.135,8,0.319,9,1.27,10,1.97,12,1.443,14,1.806,19,0.609,21,1.32,22,0.015,23,1.221,24,0.49,25,0.92,30,0.899,35,1.62,36,2.681,37,0.338,39,0.609,40,2.473,41,0.569,51,0.152,52,0.073,55,1.051,61,2.434,62,2.042,63,1.88,65,1.385,69,1.88,70,1.793,71,0.899,83,0.01,84,0.01,89,2.161,92,3.043,136,1.569,200,1.181,210,1.751,219,1.504,329,3.108,336,1.504,337,2.324,338,2.078,341,2.647,345,1.504,542,3.813,558,2.473,606,4.806,614,3.358,615,3.468,616,4.708,617,3.999,618,3.999,619,5.43,620,4.708,621,3.999,622,3.999,623,3.468,624,3.999,625,3.999,626,3.118]],["title/injectables/GenerateTokensProvider.html",[39,0.438,249,2.032]],["body/injectables/GenerateTokensProvider.html",[3,0.132,4,0.117,5,0.117,8,0.277,9,1.15,10,2.18,12,1.775,14,1.636,16,4.643,17,3.256,18,3.847,19,0.641,21,1.512,22,0.015,23,1.285,24,0.561,25,0.969,30,1.106,37,0.349,38,1.712,39,0.551,41,0.494,42,1.63,43,1.803,46,1.903,47,2.296,51,0.132,52,0.063,55,1.293,56,2.296,57,1.486,64,5.393,65,1.703,71,1.106,83,0.009,84,0.009,86,1.712,89,1.937,92,1.712,93,2.477,94,2.362,200,1.024,210,1.937,211,3.513,219,1.85,249,2.557,493,2.145,627,4.848,628,2.704,629,4.919,630,4.919,631,3.469,632,3.469,633,4.919,634,3.469,635,4.919,636,6.22,637,4.848,638,3.469,639,3.835,640,3.469,641,3.008,642,2.704,643,3.469,644,3.008,645,3.008,646,3.008,647,3.008,648,3.008,649,3.008,650,4.919,651,3.469,652,3.469,653,3.469,654,3.469,655,3.469,656,3.469]],["title/classes/GetPostBaseDto.html",[52,0.072,657,2.792]],["body/classes/GetPostBaseDto.html",[3,0.18,4,0.16,5,0.16,8,0.38,19,0.682,22,0.015,24,0.549,25,1.199,37,0.344,51,0.18,52,0.123,83,0.011,84,0.011,91,1.728,215,1.797,348,1.787,364,1.947,368,2.346,404,4.377,448,3.901,657,4.345,658,5.232,659,3.705,660,5.82,661,5.82,662,6.085,663,4.753,664,4.753,665,4.121,666,5.82,667,3.763,668,3.394,669,3.705,670,2.939,671,3.394,672,4.121]],["title/classes/GetPostDto.html",[52,0.072,670,2.418]],["body/classes/GetPostDto.html",[3,0.198,4,0.175,5,0.175,22,0.015,37,0.358,51,0.198,52,0.128,83,0.012,84,0.012,348,1.959,364,2.134,368,2.571,404,3.986,448,4.069,657,3.72,658,4.06,659,4.06,660,4.516,661,4.516,665,4.516,666,6.07,667,4.329,668,3.72,669,4.06,670,3.986,671,4.603,672,5.589]],["title/classes/GetUsersParamDto.html",[52,0.072,673,2.588]],["body/classes/GetUsersParamDto.html",[3,0.183,4,0.162,5,0.162,8,0.385,19,0.54,22,0.015,24,0.609,25,1.04,37,0.346,51,0.183,52,0.124,83,0.011,84,0.011,89,1.743,91,1.743,94,2.339,95,3.146,215,1.423,345,1.812,348,1.812,352,4.063,364,1.974,366,2.979,368,2.378,384,4.063,445,4.785,448,3.567,458,4.785,673,4.063,674,5.322,675,4.177,676,4.818,677,6.138,678,6.138,679,4.818,680,4.818,681,4.818]],["title/controllers/GoogleAuthenticationController.html",[97,1.41,254,2.792]],["body/controllers/GoogleAuthenticationController.html",[3,0.18,4,0.16,5,0.16,8,0.378,9,1.42,19,0.531,21,1.152,22,0.015,23,1.065,24,0.427,25,0.803,30,1.065,37,0.343,41,0.674,51,0.18,52,0.087,54,2.124,55,1.245,71,1.065,83,0.011,84,0.011,97,1.709,99,1.781,208,2.753,210,1.903,215,1.399,225,2.93,228,2.058,236,3.135,250,4.144,254,4.336,269,4.107,325,2.599,682,5.265,683,4.107,684,6.072,685,5.265,686,4.107,687,4.949,688,4.737,689,4.737,690,4.107,691,4.737,692,4.737,693,4.737]],["title/injectables/GoogleAuthenticationService.html",[39,0.438,250,2.418]],["body/injectables/GoogleAuthenticationService.html",[3,0.117,4,0.104,5,0.104,8,0.246,9,1.056,10,1.709,12,2.363,14,1.025,15,2.403,16,4.337,17,3.54,18,3.642,19,0.66,21,1.098,22,0.015,23,1.016,24,0.482,25,0.766,30,1.016,37,0.355,38,1.522,39,0.506,40,1.907,41,0.439,42,1.449,43,1.602,46,1.691,51,0.117,52,0.056,53,2.041,54,1.382,55,1.547,56,2.041,57,2.806,61,1.382,62,1.699,63,1.449,65,1.852,69,1.449,70,1.382,71,1.016,83,0.008,84,0.008,89,1.283,91,1.283,92,2.64,93,2.202,200,0.91,209,1.907,210,1.519,219,1.159,236,2.041,249,3.518,250,2.794,255,1.691,264,2.041,272,3.112,277,1.907,325,1.691,526,3.54,527,3.819,560,2.041,574,2.403,587,2.202,612,3.54,627,2.403,685,3.918,686,3.918,687,4.15,690,2.673,694,5.436,695,2.673,696,5.348,697,6.552,698,4.518,699,3.083,700,3.083,701,5.348,702,2.673,703,2.673,704,3.083,705,3.083,706,4.518,707,3.083,708,3.083,709,3.083,710,3.083,711,3.083,712,3.083,713,3.083,714,3.083,715,3.083,716,3.083,717,3.083,718,2.673,719,3.083,720,3.083,721,2.673]],["title/classes/GoogleTokenDto.html",[52,0.072,687,2.588]],["body/classes/GoogleTokenDto.html",[3,0.206,4,0.183,5,0.183,8,0.434,19,0.609,22,0.015,24,0.49,35,1.737,37,0.278,51,0.206,52,0.121,59,6.182,83,0.012,84,0.012,91,1.878,215,1.603,348,2.041,362,3.436,364,2.224,449,3.843,687,4.377,722,5.733,723,4.232,724,4.707,725,4.707]],["title/classes/GoogleUser.html",[52,0.072,333,2.588]],["body/classes/GoogleUser.html",[3,0.193,4,0.171,5,0.171,8,0.406,19,0.813,22,0.015,24,0.654,35,2.051,51,0.193,52,0.093,83,0.012,84,0.012,91,1.802,92,3.416,333,4.2,348,1.909,526,4.581,527,4.942,612,4.581,726,6.47,727,4.403,728,5.078,729,5.078,730,5.078,731,5.078]],["title/injectables/HashingProvider.html",[39,0.438,248,2.145]],["body/injectables/HashingProvider.html",[3,0.175,4,0.155,5,0.155,8,0.368,9,1.396,19,0.669,21,1.451,22,0.015,23,1.342,24,0.538,25,1.011,30,1.342,31,4.328,35,2.033,37,0.236,39,0.669,41,0.657,51,0.175,52,0.084,83,0.011,84,0.011,200,1.362,248,3.275,308,5.176,309,5.176,310,5.176,311,6.437,312,5.738,314,3.951,315,5.176,732,4,733,7.556,734,4.613,735,4.613]],["title/entities/MetaOption.html",[736,2.032,737,2.145]],["body/entities/MetaOption.html",[3,0.151,4,0.134,5,0.134,8,0.318,19,0.774,22,0.015,24,0.642,35,1.424,37,0.277,51,0.151,52,0.073,83,0.01,84,0.01,91,1.539,94,1.877,95,2.636,140,3.909,182,2.466,215,2.04,228,2.31,336,1.5,396,3.15,404,4.085,413,4.699,472,4.799,476,3.703,507,4.699,736,2.817,737,2.973,738,3.458,739,5.338,740,5.338,741,5.338,742,3.988,743,4.396,744,3.988,745,2.848,746,3.87,747,3.988,748,3.458,749,4.699,750,3.988,751,3.988,752,5.338,753,3.988,754,3.109,755,3.87,756,4.699,757,4.699,758,3.109]],["title/controllers/MetaOptionsController.html",[97,1.41,759,2.792]],["body/controllers/MetaOptionsController.html",[3,0.177,4,0.157,5,0.157,8,0.373,9,1.408,19,0.524,21,1.136,22,0.015,23,1.051,24,0.421,25,0.792,30,1.051,37,0.341,41,0.666,51,0.177,52,0.086,54,2.095,55,1.228,71,1.051,83,0.011,84,0.011,97,1.686,99,1.758,139,2.972,140,3.303,208,2.717,210,1.891,215,1.38,225,2.891,228,2.16,346,2.699,392,4.087,457,3.338,476,3.129,489,2.197,759,4.299,760,4.053,761,6.02,762,4.674,763,4.674,764,6.02,765,3.723,766,4.053,767,4.053,768,4.674,769,4.674,770,4.053,771,4.674]],["title/modules/MetaOptionsModule.html",[105,1.41,118,2.588]],["body/modules/MetaOptionsModule.html",[3,0.18,4,0.16,5,0.16,22,0.015,37,0.374,41,0.677,51,0.18,52,0.087,83,0.011,84,0.011,99,2.288,105,2.421,107,2.234,108,2.234,109,2.47,110,2.47,111,2.234,112,3.488,113,2.47,118,4.953,124,3.162,125,2.47,126,2.346,128,2.939,135,3.146,136,1.865,139,3.004,140,2.608,476,2.47,737,2.608,759,4.793,765,4.628,766,4.121,767,4.121,772,4.121,773,4.121,774,4.753,775,4.753,776,3.146,777,4.753]],["title/injectables/MetaOptionsService.html",[39,0.438,765,2.418]],["body/injectables/MetaOptionsService.html",[3,0.165,4,0.147,5,0.147,8,0.348,9,1.345,10,2.057,12,1.572,14,1.449,19,0.645,21,1.398,22,0.015,23,1.293,24,0.519,25,0.974,30,0.98,37,0.364,39,0.645,41,0.62,51,0.165,52,0.08,55,1.145,65,1.509,71,0.98,83,0.011,84,0.011,136,1.709,139,2.839,200,1.287,210,1.828,219,1.638,228,1.338,329,3.217,336,1.638,338,2.264,346,2.578,392,4.136,457,3.111,476,3.345,489,2.048,737,3.155,765,3.556,776,2.884,778,5.581,779,3.778,780,4.357,781,4.357,782,4.986,783,5.751,784,4.357,785,4.357,786,4.357,787,4.357]],["title/interfaces/Paginated.html",[85,2.588,788,2.588]],["body/interfaces/Paginated.html",[3,0.186,4,0.165,5,0.165,8,0.391,22,0.015,24,0.691,35,1.94,51,0.186,83,0.012,84,0.012,85,3.244,87,3.821,91,1.762,94,2.478,139,3.533,314,4.738,596,3.821,637,5.308,788,4.107,789,4.25,790,6.206,791,7.157,792,4.25,793,4.25,794,4.25,795,4.25,796,4.25,797,4.25,798,4.25,799,4.25]],["title/modules/PaginationModule.html",[105,1.41,119,2.418]],["body/modules/PaginationModule.html",[3,0.19,4,0.169,5,0.169,22,0.015,37,0.322,41,0.713,51,0.19,52,0.092,83,0.012,84,0.012,105,2.48,107,2.353,108,2.353,109,2.601,110,2.601,111,2.353,112,3.573,113,3.573,119,4.76,124,3.268,125,2.601,126,2.471,800,4.34,801,4.34,802,4.34,803,4.945,804,5.006,805,5.006]],["title/injectables/PaginationProvider.html",[39,0.438,803,2.418]],["body/injectables/PaginationProvider.html",[3,0.126,4,0.112,5,0.112,8,0.265,9,1.113,10,1.781,12,1.196,14,1.584,19,0.534,21,1.355,22,0.015,23,1.071,24,0.503,25,0.807,30,0.745,31,2.945,33,4.28,37,0.344,38,1.636,39,0.534,41,0.472,48,2.584,51,0.126,52,0.061,55,0.871,57,2.964,62,1.246,65,1.649,71,0.745,83,0.011,84,0.009,139,1.636,157,2.194,200,0.979,210,1.583,314,2.194,329,3.253,336,1.246,470,4.033,596,2.584,637,2.584,667,3.768,669,2.584,788,3.152,790,2.874,792,2.874,793,4.832,794,2.874,795,5.283,796,2.874,797,2.874,798,2.874,799,2.874,803,2.945,806,2.874,807,4.762,808,3.314,809,3.314,810,4.762,811,3.314,812,3.314,813,3.314,814,3.314,815,3.314,816,3.314,817,3.314,818,2.874,819,7.082,820,6.092,821,2.584,822,4.762,823,3.314,824,3.314,825,3.314,826,3.314,827,3.314,828,3.314,829,3.314,830,3.314,831,3.314,832,4.762,833,3.314,834,3.314,835,3.314,836,3.314,837,3.314]],["title/classes/PaginationQueryDto.html",[52,0.072,667,2.418]],["body/classes/PaginationQueryDto.html",[3,0.172,4,0.153,5,0.153,8,0.363,19,0.662,22,0.015,24,0.65,25,1.178,37,0.302,51,0.172,52,0.12,83,0.011,84,0.011,91,1.678,94,2.56,215,1.745,348,1.707,364,1.859,366,2.807,448,3.816,470,3.91,571,3.936,667,3.653,668,4.689,838,3.936,839,4.689,840,4.346,841,4.605,842,4.605,843,5.122,844,5.907,845,4.539,846,4.539,847,6.566,848,3.936,849,4.539,850,4.539,851,4.539,852,4.539,853,4.539,854,4.539]],["title/classes/PatchPostDto.html",[52,0.072,855,2.588]],["body/classes/PatchPostDto.html",[3,0.185,4,0.165,5,0.165,8,0.39,19,0.548,22,0.015,24,0.44,37,0.348,51,0.185,52,0.113,83,0.012,84,0.012,91,1.759,94,2.144,95,3.159,215,1.443,228,2.196,345,1.837,346,2.19,348,1.837,362,3.218,364,2.001,367,4.422,368,2.411,370,2.839,445,4.827,490,3.488,671,4.422,855,4.098,856,5.369,857,4.235,858,6.192,859,4.884,860,6.192,861,4.884,862,4.884,863,4.235,864,4.235]],["title/classes/PatchUserDto.html",[52,0.072,865,2.792]],["body/classes/PatchUserDto.html",[3,0.213,4,0.189,5,0.189,22,0.015,37,0.346,51,0.213,52,0.103,83,0.013,84,0.013,346,2.521,348,2.115,351,4.016,353,2.922,365,3.478,671,4.823,863,4.876,865,4.823,866,4.876,867,6.754,868,4.876,869,4.876]],["title/entities/Post.html",[228,1.201,736,2.032]],["body/entities/Post.html",[3,0.09,4,0.08,5,0.08,8,0.19,19,0.781,22,0.015,24,0.676,25,1.181,35,1.769,36,1.832,37,0.317,51,0.09,52,0.043,72,3.566,83,0.007,84,0.007,89,1.684,91,1.054,94,1.285,95,1.955,139,1.832,140,1.304,182,1.47,215,2.058,228,1.402,336,0.894,373,3.958,374,3.26,375,3.995,376,4.995,377,3.958,378,3.26,379,3.021,380,3.021,381,2.823,382,3.958,392,1.382,396,3.724,404,2.295,432,4.361,454,2.061,455,2.061,456,1.698,457,1.698,462,5.555,476,1.235,497,3.021,504,3.253,510,2.65,641,2.061,736,1.929,737,2.83,743,3.26,745,4.576,746,5.105,748,2.061,755,4.702,756,3.218,757,3.218,758,2.893,776,1.574,841,4.021,870,2.061,871,2.377,872,3.711,873,5.929,874,2.377,875,4.472,876,2.377,877,4.621,878,4.621,879,3.218,880,2.377,881,2.377,882,3.711,883,2.377,884,2.377,885,3.711,886,2.377,887,2.377,888,3.218,889,2.377,890,2.377,891,2.061,892,3.711,893,2.377,894,2.377,895,3.711,896,2.377,897,3.711,898,3.218,899,3.711,900,2.377,901,2.377,902,2.377]],["title/controllers/PostController.html",[97,1.41,903,2.792]],["body/controllers/PostController.html",[3,0.109,4,0.096,5,0.096,8,0.229,9,1,19,0.637,21,1.381,22,0.015,23,1.278,24,0.512,25,0.963,30,1.278,35,1.346,37,0.348,41,0.408,51,0.109,52,0.052,54,1.284,55,0.753,62,1.609,71,1.278,83,0.008,84,0.008,86,2.805,88,1.896,89,1.614,94,1.774,95,1.832,97,1.033,99,1.077,132,2.977,208,1.665,210,2.065,215,1.678,225,2.646,228,2.173,345,2.137,368,1.414,370,3.842,380,2.832,389,4.429,482,3.335,489,1.346,490,2.045,493,1.771,639,3.993,670,3.514,855,4.223,864,3.71,903,3.056,904,2.483,905,4.279,906,4.279,907,4.279,908,2.864,909,4.279,910,4.279,911,4.279,912,5.682,913,5.682,914,4.279,915,2.864,916,2.864,917,2.864,918,3.658,919,2.864,920,2.864,921,4.441,922,4.279,923,2.864,924,2.864,925,3.71,926,4.279,927,4.927,928,2.864,929,2.864,930,2.483,931,3.335,932,3.71,933,3.335,934,2.864,935,2.483,936,4.441,937,4.441,938,2.483,939,2.233,940,2.483,941,2.045,942,2.483,943,2.233,944,2.233,945,2.864,946,2.864,947,2.864,948,2.864,949,2.864,950,3.71,951,3.71,952,2.864,953,2.864,954,2.864,955,2.864,956,2.864,957,2.864]],["title/modules/PostModule.html",[105,1.41,120,2.588]],["body/modules/PostModule.html",[3,0.15,4,0.133,5,0.133,22,0.015,37,0.389,41,0.563,51,0.15,52,0.072,83,0.01,84,0.01,99,2.026,105,2.211,107,1.859,108,1.859,109,2.055,110,2.055,111,1.859,112,3.186,113,2.055,119,4.395,120,5.176,121,4.395,123,4.131,124,2.8,125,2.055,126,1.952,128,3.333,132,4.131,135,2.618,136,1.551,140,2.17,162,4.131,164,3.083,228,1.215,257,3.429,476,2.055,491,3.083,737,2.956,776,2.618,903,4.377,935,3.429,958,3.429,959,3.955,960,3.429,961,3.955,962,3.955,963,3.955,964,3.955,965,3.955,966,3.955]],["title/injectables/PostService.html",[39,0.438,132,2.272]],["body/injectables/PostService.html",[3,0.077,4,0.068,5,0.068,8,0.162,9,0.765,10,2.138,12,1.996,14,1.088,19,0.58,21,1.258,22,0.015,23,1.164,24,0.467,25,0.877,30,1.061,31,2.024,33,2.544,35,1.081,36,1.615,37,0.353,39,0.367,41,0.289,51,0.077,52,0.037,55,1.454,57,0.869,61,2.32,62,1.946,63,2.601,65,2.273,69,1.933,71,1.061,72,2.555,83,0.006,84,0.006,86,2.329,88,1.343,89,1.572,94,1.424,95,2.493,132,1.902,136,0.796,140,1.113,142,3.025,162,3.383,164,1.582,200,0.599,210,1.9,219,1.547,228,1.921,271,1.582,272,2.481,277,1.255,329,2.433,336,0.763,338,1.054,346,0.91,370,3.008,375,1.449,381,3.201,439,1.582,470,1.343,476,1.054,482,2.551,485,3.566,486,2.838,488,1.449,489,0.954,490,1.449,491,1.582,492,1.759,493,1.255,494,1.759,497,1.343,501,1.759,504,1.113,508,1.759,509,1.582,558,1.255,564,3.206,565,3.206,567,2.937,568,3.206,570,1.582,573,1.582,578,2.551,626,1.582,639,3.206,670,2.918,737,1.113,776,1.343,782,1.759,788,1.343,803,3.6,818,1.759,821,1.582,839,1.449,840,1.343,855,3.426,918,2.337,921,1.759,939,1.582,940,1.759,941,1.449,942,1.759,967,1.759,968,2.838,969,3.273,970,2.029,971,2.029,972,2.551,973,2.029,974,3.273,975,2.029,976,3.273,977,2.029,978,2.029,979,2.029,980,2.029,981,2.029,982,3.206,983,2.029,984,3.273,985,3.273,986,4.113,987,2.029,988,2.029,989,2.029,990,3.273,991,2.029,992,2.029,993,2.029,994,2.029,995,2.029,996,1.759,997,2.029,998,2.029,999,2.029,1000,2.029,1001,2.029,1002,2.029,1003,3.273,1004,2.029,1005,3.273,1006,2.029,1007,3.273,1008,2.029,1009,3.273,1010,2.029,1011,3.273,1012,2.029,1013,3.273,1014,2.029,1015,3.273,1016,2.029,1017,1.759]],["title/classes/RefreshTokenDto.html",[52,0.072,214,2.418]],["body/classes/RefreshTokenDto.html",[3,0.206,4,0.183,5,0.183,8,0.434,19,0.609,22,0.015,24,0.49,35,1.737,37,0.278,51,0.206,52,0.121,83,0.012,84,0.012,91,1.878,211,5.092,214,4.089,215,1.603,348,2.041,362,3.436,364,2.224,449,3.843,723,4.232,724,4.707,725,4.707,1018,5.733]],["title/injectables/RefreshTokensProvider.html",[39,0.438,251,2.418]],["body/injectables/RefreshTokensProvider.html",[3,0.136,4,0.121,5,0.121,8,0.287,9,1.179,10,1.862,12,2.279,14,1.677,15,2.8,16,4.566,17,3.856,18,3.907,19,0.565,21,1.226,22,0.015,23,1.134,24,0.455,25,0.854,30,0.808,37,0.37,38,1.773,39,0.565,40,2.222,41,0.512,42,1.688,43,1.867,46,1.971,47,2.378,51,0.136,52,0.066,55,1.66,56,2.378,57,2.159,61,1.61,62,1.351,63,1.688,65,2.017,69,1.688,70,1.61,71,0.808,83,0.009,84,0.009,86,1.773,89,1.432,93,2.565,200,1.061,210,1.655,214,4.115,219,1.351,235,2.8,236,2.378,249,3.283,251,3.118,255,1.971,264,2.378,272,3.242,277,2.222,493,2.222,560,2.378,628,2.8,642,2.8,644,3.115,645,3.115,646,3.115,647,3.115,648,3.115,649,3.115,721,3.115,1019,5.052,1020,5.042,1021,5.826,1022,3.592,1023,5.042,1024,3.592,1025,3.115,1026,3.592,1027,3.592,1028,3.592]],["title/classes/SignInDto.html",[52,0.072,221,2.418]],["body/classes/SignInDto.html",[3,0.196,4,0.174,5,0.174,8,0.413,19,0.719,22,0.015,24,0.579,35,1.917,37,0.265,51,0.196,52,0.117,83,0.012,84,0.012,91,1.822,92,3.444,191,4.315,215,1.895,221,3.968,348,1.944,362,3.626,364,2.118,449,3.729,549,5.564,1029,4.483,1030,5.17,1031,5.17,1032,5.17,1033,5.17]],["title/injectables/SignInProvider.html",[39,0.438,252,2.418]],["body/injectables/SignInProvider.html",[3,0.13,4,0.116,5,0.116,8,0.274,9,1.142,10,1.817,12,2.36,14,1.625,16,4.63,17,3.763,18,3.83,19,0.548,21,1.188,22,0.015,23,1.098,24,0.441,25,0.828,30,0.772,37,0.372,38,1.696,39,0.548,40,2.124,41,0.489,42,1.614,43,1.785,46,1.885,47,2.274,51,0.13,52,0.063,55,1.719,56,2.274,61,2.19,62,1.837,63,1.614,65,1.969,69,1.614,70,1.54,71,0.772,83,0.009,84,0.009,86,1.696,89,1.388,191,3.021,200,1.015,210,1.615,212,3.808,219,1.292,220,3.808,221,4.046,231,2.678,248,3.837,249,3.635,252,3.021,255,1.885,264,2.274,271,2.678,272,3.136,277,2.124,317,2.979,345,1.292,396,1.997,493,2.124,558,2.124,560,2.274,623,2.979,642,2.678,718,2.979,1025,2.979,1034,4.93,1035,2.979,1036,3.435,1037,3.435,1038,3.435,1039,5.685,1040,3.435,1041,3.435,1042,3.435,1043,3.435,1044,3.435]],["title/entities/Tag.html",[504,2.145,736,2.032]],["body/entities/Tag.html",[3,0.116,4,0.103,5,0.103,8,0.244,19,0.805,22,0.015,23,1.197,24,0.682,25,0.994,35,1.888,37,0.23,51,0.116,52,0.056,72,3.547,83,0.008,84,0.008,91,1.275,94,1.555,95,2.279,182,1.89,215,2.122,228,2.006,336,1.149,345,2.001,374,3.8,378,3.8,379,3.522,396,3.409,404,4.039,504,2.463,510,4.188,736,2.333,739,4.614,740,4.614,741,4.614,743,3.8,745,4.462,746,5.131,749,3.893,752,4.614,754,2.382,755,4.664,758,3.5,875,5.085,877,5.092,878,5.092,879,3.893,888,5.085,891,2.65,898,3.893,982,4.148,1017,3.893,1045,2.65,1046,5.321,1047,3.056,1048,5.321,1049,3.056,1050,3.056,1051,3.056,1052,3.056,1053,3.056,1054,3.056,1055,3.056,1056,3.056,1057,3.056]],["title/controllers/TagsController.html",[97,1.41,1058,2.792]],["body/controllers/TagsController.html",[3,0.15,4,0.133,5,0.133,8,0.315,9,1.258,19,0.686,21,1.488,22,0.015,23,1.376,24,0.552,25,1.037,30,1.376,37,0.313,41,0.561,51,0.15,52,0.072,54,1.768,55,1.036,71,1.376,83,0.01,84,0.01,94,2.459,95,2.816,97,1.423,99,1.483,142,3.181,208,2.292,210,2.13,215,1.808,225,2.439,228,1.88,346,2.411,381,2.439,489,1.853,513,4.7,770,3.419,918,5.19,931,4.771,933,3.074,972,3.074,1058,3.841,1059,3.419,1060,5.378,1061,3.943,1062,3.943,1063,3.943,1064,3.943,1065,3.943,1066,3.943,1067,3.419,1068,3.419,1069,3.943,1070,3.943,1071,3.943,1072,3.943,1073,3.943,1074,3.943,1075,3.943]],["title/modules/TagsModule.html",[105,1.41,121,2.418]],["body/modules/TagsModule.html",[3,0.177,4,0.157,5,0.157,22,0.015,37,0.372,41,0.663,51,0.177,52,0.085,83,0.011,84,0.011,99,2.259,105,2.398,107,2.19,108,2.19,109,2.421,110,2.421,111,2.19,112,3.455,113,3.455,121,4.684,124,3.122,125,2.421,126,2.3,128,2.881,135,3.084,136,1.828,142,4.114,504,2.556,1058,4.748,1068,4.04,1076,4.04,1077,4.04,1078,4.04,1079,4.659,1080,4.659,1081,4.04,1082,4.659]],["title/injectables/TagsService.html",[39,0.438,142,2.032]],["body/injectables/TagsService.html",[3,0.128,4,0.113,5,0.113,8,0.268,9,1.125,10,2.399,12,1.213,14,1.118,19,0.727,21,1.577,22,0.015,23,1.459,24,0.585,25,1.099,30,1.379,37,0.332,39,0.539,41,0.479,51,0.128,52,0.062,55,0.883,65,2.123,71,1.379,72,2.375,83,0.009,84,0.009,94,2.506,95,2.779,136,1.319,142,2.5,200,0.993,210,2.132,219,2.306,329,2.882,336,1.264,338,1.747,381,2.079,489,1.58,504,2.639,513,4.295,918,3.435,972,3.75,996,4.171,1067,2.915,1081,2.915,1083,2.915,1084,4.811,1085,4.811,1086,4.811,1087,3.362,1088,3.362,1089,4.811,1090,4.811,1091,3.362,1092,3.362,1093,4.811,1094,3.362,1095,4.811,1096,3.362,1097,3.362,1098,3.362,1099,3.362,1100,4.171,1101,3.362,1102,3.362,1103,3.362,1104,3.362]],["title/controllers/UploadsController.html",[97,1.41,1105,2.792]],["body/controllers/UploadsController.html",[3,0.222,4,0.197,5,0.197,22,0.014,37,0.3,41,0.834,51,0.222,52,0.107,83,0.013,84,0.013,97,2.113,99,2.202,208,3.404,1105,4.942,1106,5.078,1107,5.856,1108,5.856]],["title/modules/UploadsModule.html",[105,1.41,122,2.588]],["body/modules/UploadsModule.html",[3,0.192,4,0.17,5,0.17,22,0.015,37,0.354,41,0.72,51,0.192,52,0.093,83,0.012,84,0.012,99,2.381,105,2.492,107,2.378,108,2.378,109,2.629,110,2.629,111,2.378,112,3.591,113,2.629,122,5.033,124,3.29,125,2.629,126,2.498,1105,4.934,1109,4.387,1110,4.387,1111,5.033,1112,5.059,1113,5.059,1114,5.059]],["title/injectables/UploadsService.html",[39,0.438,1111,2.588]],["body/injectables/UploadsService.html",[3,0.224,4,0.199,5,0.199,22,0.015,37,0.302,39,0.779,41,0.841,51,0.224,52,0.108,83,0.013,84,0.013,200,1.744,1111,4.603,1115,5.12]],["title/entities/User.html",[89,1.11,736,2.032]],["body/entities/User.html",[3,0.125,4,0.111,5,0.111,8,0.263,19,0.775,22,0.015,24,0.674,25,1.03,35,1.921,37,0.285,51,0.125,52,0.087,72,3.311,83,0.009,84,0.009,89,1.348,91,1.348,92,2.744,94,1.643,95,2.381,182,2.04,191,3.438,215,2.041,228,2.06,336,1.24,366,2.04,396,3.533,510,3.389,526,3.679,527,3.97,612,3.679,736,2.466,743,3.97,745,4.6,746,5.222,754,2.571,755,4.79,877,5.7,878,5.7,982,4.333,1116,2.86,1117,7.312,1118,3.299,1119,3.299,1120,4.746,1121,3.299,1122,3.299,1123,3.299,1124,3.299,1125,3.299,1126,4.746,1127,3.299,1128,5.559,1129,4.746]],["title/injectables/UserCreateManyProvider.html",[39,0.438,1130,2.418]],["body/injectables/UserCreateManyProvider.html",[3,0.135,4,0.119,5,0.119,8,0.283,9,1.169,10,1.849,14,1.18,19,0.56,21,1.215,22,0.015,23,1.124,24,0.451,25,0.847,30,0.798,37,0.339,39,0.56,41,0.505,51,0.135,52,0.065,54,1.59,55,0.932,57,1.519,61,2.594,62,2.176,63,2.719,65,2.379,69,2.719,70,2.594,71,0.798,83,0.009,84,0.009,89,1.784,96,2.348,200,1.048,210,1.643,219,1.334,335,2.765,336,1.334,337,2.062,345,1.879,346,2.594,347,4.096,350,2.348,353,1.844,365,3.091,489,2.349,558,2.194,574,2.765,1100,3.076,1130,3.091,1131,5.017,1132,3.076,1133,4.333,1134,3.547,1135,5.957,1136,3.547,1137,4.333,1138,3.547,1139,4.998,1140,3.547,1141,3.547,1142,3.547,1143,3.547,1144,4.998,1145,3.076,1146,3.547,1147,3.547,1148,3.547,1149,3.547,1150,3.547,1151,3.547,1152,3.547,1153,3.547,1154,3.547,1155,4.998,1156,3.547,1157,3.547,1158,3.547,1159,3.547]],["title/injectables/UserService.html",[39,0.438,272,1.753]],["body/injectables/UserService.html",[3,0.069,4,0.062,5,0.062,8,0.146,9,0.703,10,2.249,12,2.174,14,0.999,18,2.742,19,0.652,21,1.414,22,0.015,23,1.308,24,0.524,25,0.986,30,1.252,33,1.13,35,1.384,36,0.902,37,0.353,38,0.902,39,0.337,41,0.26,42,0.859,51,0.069,52,0.07,55,1.528,57,1.287,61,1.715,62,1.439,63,1.412,65,1.697,69,0.859,70,1.347,71,1.252,83,0.006,84,0.006,89,1.806,92,1.889,94,2.087,95,2.491,96,2.533,136,0.717,145,4.341,200,0.54,210,2.048,219,1.981,227,1.584,229,3.236,255,1.002,272,1.347,323,3.444,325,1.648,327,2.605,329,2.084,331,2.733,332,2.605,333,3.243,336,0.687,337,1.062,338,0.949,339,1.584,340,1.584,341,1.209,345,1.439,346,1.715,347,3.03,350,1.209,352,3.243,353,2.546,365,1.858,380,1.209,488,1.305,489,1.412,526,1.989,542,1.858,553,2.742,554,2.605,556,2.605,558,1.13,560,1.209,564,1.424,565,1.424,566,1.584,567,1.305,568,1.424,569,1.584,570,1.424,578,1.424,587,1.305,605,2.742,608,2.605,610,2.605,612,1.209,613,2.605,614,3.444,616,2.605,620,2.605,626,2.342,673,2.935,839,2.733,840,2.533,941,1.305,968,2.605,1130,2.742,1133,2.605,1135,1.584,1137,2.605,1145,2.605,1160,1.584,1161,2.605,1162,3.005,1163,3.005,1164,3.005,1165,3.005,1166,1.827,1167,3.827,1168,3.827,1169,3.827,1170,3.827,1171,1.827,1172,1.827,1173,1.827,1174,1.827,1175,3.005,1176,1.827,1177,3.005,1178,1.827,1179,1.827,1180,1.827,1181,3.005,1182,1.827,1183,4.434,1184,3.005,1185,2.605,1186,3.005,1187,1.584,1188,1.827,1189,1.584,1190,1.584,1191,1.584,1192,2.605,1193,1.584,1194,1.584,1195,1.827,1196,1.827,1197,1.827,1198,1.827,1199,1.827,1200,1.827,1201,1.827,1202,1.827,1203,1.827,1204,1.827,1205,1.827,1206,1.827,1207,1.827,1208,3.005,1209,2.605,1210,3.005,1211,1.827,1212,1.827,1213,1.827,1214,1.827,1215,1.827,1216,1.827,1217,1.827,1218,1.827,1219,1.827,1220,1.827,1221,1.827,1222,1.827]],["title/controllers/UsersController.html",[97,1.41,1223,2.792]],["body/controllers/UsersController.html",[1,1.43,3,0.093,4,0.083,5,0.083,6,1.757,8,0.196,9,0.891,19,0.589,21,1.277,22,0.015,23,1.352,24,0.6,25,0.89,30,1.181,36,1.214,37,0.348,41,0.35,51,0.093,52,0.045,54,1.103,55,0.646,62,1.433,71,1.352,78,2.133,83,0.007,84,0.007,94,2.518,95,1.054,97,0.887,99,0.925,159,1.757,208,1.43,209,1.521,210,1.996,215,1.552,225,1.521,228,1.171,233,1.628,239,2.133,272,2.091,345,2.261,347,3.718,350,2.523,352,3.98,353,3.125,356,4.096,365,2.885,368,1.214,380,1.628,384,3.478,396,3.054,470,2.523,489,1.791,673,3.98,839,4.294,840,4.29,843,2.133,865,4.628,927,3.305,930,3.305,931,4.096,932,4.045,933,4.096,936,3.305,937,3.305,938,2.133,939,1.918,941,1.757,950,2.133,951,3.305,1187,2.133,1209,3.305,1223,2.722,1224,2.133,1225,3.811,1226,3.811,1227,3.811,1228,3.811,1229,2.46,1230,3.811,1231,2.46,1232,2.46,1233,2.46,1234,2.46,1235,2.46,1236,2.46,1237,2.46,1238,3.811,1239,3.811,1240,3.811,1241,2.46,1242,3.811,1243,3.305,1244,2.46,1245,3.811,1246,3.811,1247,3.811,1248,2.46,1249,3.811,1250,3.811,1251,2.46,1252,2.46,1253,2.46,1254,2.46,1255,2.46,1256,2.46,1257,2.46,1258,2.46,1259,2.46,1260,2.46,1261,2.46,1262,2.133,1263,4.665,1264,2.46,1265,2.133,1266,2.46,1267,2.46,1268,3.811,1269,2.46,1270,2.133,1271,2.46,1272,2.46,1273,2.46,1274,2.46,1275,2.46,1276,2.46,1277,2.46,1278,2.133,1279,2.46,1280,2.46,1281,2.46,1282,2.46,1283,2.46,1284,2.46,1285,2.46,1286,2.46]],["title/modules/UsersModule.html",[105,1.41,123,2.272]],["body/modules/UsersModule.html",[1,1.949,3,0.127,4,0.113,5,0.113,6,2.395,22,0.015,37,0.397,41,0.478,42,1.576,43,1.743,46,1.84,51,0.127,52,0.061,83,0.009,84,0.009,89,1.364,99,1.806,105,2.024,107,1.576,108,1.576,109,1.743,110,1.743,111,1.576,112,2.916,113,2.916,117,2.97,123,4.51,124,2.496,125,1.743,126,1.656,128,2.074,135,2.22,136,1.316,144,2.614,153,2.614,155,2.908,157,2.22,159,2.395,196,2.614,197,2.614,255,2.635,272,3.364,323,4.171,325,2.635,337,1.949,346,1.503,542,2.97,553,4.171,605,4.171,614,4.171,703,2.908,1130,4.171,1189,2.908,1190,2.908,1191,2.908,1192,4.164,1193,2.908,1194,2.908,1223,4.006,1262,2.908,1287,2.908,1288,2.908,1289,2.908,1290,3.354,1291,3.354,1292,3.354,1293,3.354,1294,4.802,1295,4.802,1296,3.354,1297,3.354]],["title/coverage.html",[1298,4.168]],["body/coverage.html",[0,2.742,1,1.29,5,0.075,6,1.586,7,1.925,22,0.015,24,0.2,39,0.836,49,1.731,52,0.13,62,0.835,83,0.007,84,0.007,85,2.328,86,1.096,88,1.47,89,1.24,90,1.925,97,2.257,98,1.586,100,1.925,101,1.373,111,1.043,127,1.731,132,1.29,139,1.096,140,1.93,142,1.154,160,1.586,162,1.29,165,1.586,167,1.731,170,1.731,201,1.925,206,1.586,207,1.925,209,1.373,214,1.373,221,1.373,228,1.341,229,1.29,248,1.218,249,1.154,250,1.373,251,1.373,252,1.373,254,1.586,259,1.586,270,1.925,272,0.995,281,1.925,290,1.731,307,1.925,323,1.373,324,3.119,325,1.93,326,3.119,333,1.47,346,0.995,347,1.373,349,2.742,350,1.47,351,3.119,352,1.47,353,1.154,370,1.29,371,1.925,372,1.925,392,1.29,456,1.586,476,2.582,477,1.925,480,1.925,481,1.925,504,1.218,513,1.47,514,1.925,515,1.925,542,2.175,553,1.373,580,3.049,581,1.731,586,6.992,590,1.925,591,1.925,605,1.373,606,2.742,607,1.925,614,1.373,615,1.925,627,1.731,628,2.742,657,1.586,658,2.742,659,2.742,667,1.373,668,1.586,670,1.373,673,1.47,674,1.925,675,1.925,682,1.925,683,1.925,687,1.47,694,1.925,695,1.925,722,1.925,723,2.742,726,1.925,727,1.925,732,1.925,736,2.582,737,1.218,738,1.925,759,1.586,760,1.925,765,1.373,778,1.925,779,1.925,788,1.47,789,1.925,803,1.373,806,1.925,838,1.925,855,1.47,856,1.925,857,1.925,865,1.586,866,1.925,870,1.925,903,1.586,904,1.925,943,1.731,944,1.731,967,1.925,1018,1.925,1019,1.925,1029,1.925,1034,1.925,1035,1.925,1045,1.925,1058,1.586,1059,1.925,1083,1.925,1105,1.586,1106,1.925,1111,1.47,1115,1.925,1116,1.925,1130,1.373,1131,1.925,1132,1.925,1160,1.925,1161,1.925,1223,1.586,1224,1.925,1298,1.731,1299,1.925,1300,2.22,1301,2.22,1302,7.192,1303,5.414,1304,6.444,1305,7.314,1306,3.049,1307,1.925,1308,1.925,1309,5.414,1310,5.759,1311,1.925,1312,2.22,1313,4.367,1314,2.22,1315,2.22,1316,2.22]],["title/dependencies.html",[108,2.211,1317,2.826]],["body/dependencies.html",[22,0.015,41,0.695,42,2.296,43,2.538,45,3.488,48,3.807,52,0.113,83,0.012,84,0.012,108,2.296,136,1.916,157,3.233,209,3.021,318,4.235,325,2.68,336,1.837,364,2.001,366,3.021,368,2.411,702,4.235,868,4.235,869,4.235,1318,4.884,1319,4.884,1320,6.798,1321,4.884,1322,4.884,1323,4.884,1324,4.884,1325,4.884,1326,4.884,1327,4.235,1328,4.884,1329,4.884,1330,4.884,1331,4.884,1332,4.884,1333,4.884,1334,4.884,1335,4.884,1336,4.884,1337,4.884,1338,4.884,1339,4.884,1340,4.884,1341,4.884,1342,4.884]],["title/miscellaneous/enumerations.html",[1343,2.016,1344,4.08]],["body/miscellaneous/enumerations.html",[8,0.411,22,0.015,79,4.467,83,0.012,84,0.012,228,1.967,233,4.238,376,4.991,406,5.551,432,4.991,434,5.551,840,4.238,842,6.102,1265,4.467,1278,4.467,1343,3.186,1344,4.467,1345,5.152,1346,6.402,1347,5.152,1348,5.152,1349,5.152,1350,6.402,1351,6.402,1352,5.152,1353,6.402,1354,6.402]],["title/miscellaneous/functions.html",[1343,2.016,1355,4.08]],["body/miscellaneous/functions.html",[8,0.468,22,0.014,30,1.317,83,0.013,84,0.013,111,3.462,324,4.182,326,4.942,581,5.742,587,4.182,1311,5.078,1343,3.622,1355,5.078,1356,5.856,1357,5.856]],["title/index.html",[8,0.26,1358,3.26,1359,3.26]],["body/index.html",[4,0.103,22,0.014,77,2.644,83,0.008,84,0.008,126,3.222,205,6.001,329,1.433,345,1.147,384,3.878,400,2.644,497,2.019,509,2.377,567,3.201,573,5.088,821,2.377,848,2.644,925,2.644,1185,2.644,1243,2.644,1270,5.659,1298,2.377,1299,3.887,1327,3.887,1360,3.05,1361,3.05,1362,5.315,1363,4.482,1364,3.05,1365,3.05,1366,3.05,1367,3.05,1368,4.482,1369,5.315,1370,3.05,1371,3.05,1372,5.859,1373,3.05,1374,6.921,1375,3.05,1376,6.746,1377,3.05,1378,3.05,1379,3.05,1380,4.482,1381,3.05,1382,4.482,1383,3.05,1384,5.315,1385,3.05,1386,4.482,1387,3.05,1388,3.05,1389,3.05,1390,3.05,1391,3.05,1392,5.859,1393,3.05,1394,4.482,1395,3.05,1396,3.05,1397,4.482,1398,5.859,1399,3.05,1400,4.482,1401,3.05,1402,4.482,1403,6.527,1404,5.859,1405,3.05,1406,3.05,1407,3.05,1408,3.05,1409,3.05,1410,5.859,1411,3.05,1412,3.05,1413,3.05,1414,3.05,1415,4.482,1416,3.05,1417,3.05,1418,3.05,1419,3.05,1420,3.05,1421,4.482,1422,3.05,1423,3.05,1424,3.05,1425,4.482,1426,3.05,1427,3.05,1428,5.08,1429,3.05,1430,3.05,1431,3.05,1432,3.05,1433,3.05,1434,3.05,1435,3.05,1436,3.05,1437,4.482,1438,3.05,1439,3.05,1440,3.05,1441,3.05,1442,5.315,1443,3.05,1444,3.05,1445,3.05,1446,4.482,1447,3.05,1448,3.05,1449,3.05,1450,3.05,1451,4.482,1452,3.05,1453,3.05,1454,3.05,1455,4.482,1456,4.482,1457,3.05,1458,3.05,1459,3.05,1460,3.05,1461,3.05,1462,3.05,1463,3.05,1464,3.05,1465,3.05,1466,3.05,1467,3.05,1468,3.05,1469,3.05,1470,3.05,1471,3.05,1472,3.05,1473,3.05,1474,2.644]],["title/modules.html",[107,2.513]],["body/modules.html",[22,0.012,83,0.012,84,0.012,106,3.818,107,2.513,117,3.307,118,3.539,119,3.307,120,3.539,121,3.307,122,3.539,123,3.107,1428,6.834,1475,7.882,1476,7.882,1477,7.882]],["title/overview.html",[1478,4.636]],["body/overview.html",[2,2.352,22,0.015,83,0.008,84,0.008,87,2.352,99,1.135,101,3.266,105,1.088,106,5.539,107,1.418,108,1.418,109,1.568,110,1.568,111,1.418,112,1.568,113,1.568,114,2.616,115,2.616,116,2.616,117,4.668,118,4.113,119,4.158,120,4.915,121,4.267,122,4.113,123,4.443,124,2.311,125,1.568,126,1.489,132,3.07,142,3.494,162,3.07,182,1.866,200,0.891,229,3.908,245,2.616,246,2.616,247,2.616,248,3.198,249,2.745,250,3.266,251,3.266,252,3.266,272,3.014,323,3.266,348,1.135,471,3.856,538,3.856,553,3.266,605,3.266,614,3.266,765,3.266,772,2.616,773,2.616,800,2.616,801,2.616,802,2.616,803,4.158,958,2.616,960,2.616,1076,2.616,1077,2.616,1078,2.616,1109,2.616,1110,2.616,1111,3.496,1130,3.266,1287,2.616,1288,2.616,1289,2.616,1478,2.616,1479,3.017,1480,3.017,1481,3.017]],["title/properties.html",[91,1.336,1317,2.826]],["body/properties.html",[22,0.015,83,0.013,84,0.013,91,1.713,345,2.268,497,3.992,1474,5.23,1482,6.031,1483,6.031,1484,6.031]],["title/miscellaneous/variables.html",[1343,2.016,1485,4.08]],["body/miscellaneous/variables.html",[8,0.372,22,0.015,24,0.542,27,3.327,33,2.881,35,1.579,36,2.3,49,4.683,57,2.573,68,4.04,71,1.048,83,0.011,84,0.011,86,2.966,89,1.888,127,3.632,170,4.683,171,4.04,209,3.715,233,3.976,290,4.683,295,5.209,841,5.667,842,5.667,943,4.683,944,3.632,1306,4.04,1307,5.209,1308,4.04,1343,2.881,1485,4.04,1486,4.659,1487,4.659,1488,6.007,1489,4.659,1490,4.659,1491,6.007,1492,4.659,1493,4.659,1494,4.659,1495,4.659,1496,4.659]]],"invertedIndex":[["",{"_index":22,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":586,"title":{},"body":{"injectables/CreateUserProvider.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1483,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1332,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1340,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":1342,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1331,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1302,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1312,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1304,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1305,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1309,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1310,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1313,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":408,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":470,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"injectables/PostService.html":{},"controllers/UsersController.html":{}}}],["1.1.23",{"_index":1319,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":843,"title":{},"body":{"classes/PaginationQueryDto.html":{},"controllers/UsersController.html":{}}}],["10.0.0",{"_index":1320,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":1326,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":1322,"title":{},"body":{"dependencies.html":{}}}],["1024",{"_index":879,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["10})@apiquery({name",{"_index":1248,"title":{},"body":{"controllers/UsersController.html":{}}}],["1234",{"_index":681,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["1234})@isoptional()@isint()@type(undefined",{"_index":679,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["14",{"_index":1214,"title":{},"body":{"injectables/UserService.html":{}}}],["15",{"_index":1481,"title":{},"body":{"overview.html":{}}}],["16t07:46:32+0000",{"_index":409,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["17.12.2",{"_index":1335,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":471,"title":{},"body":{"classes/CreatePostDto.html":{},"overview.html":{}}}],["2.0.5",{"_index":1323,"title":{},"body":{"dependencies.html":{}}}],["2.1643.0",{"_index":1329,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":927,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":912,"title":{},"body":{"controllers/PostController.html":{}}}],["2024",{"_index":407,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["21",{"_index":1480,"title":{},"body":{"overview.html":{}}}],["256",{"_index":888,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["3.2.2",{"_index":1321,"title":{},"body":{"dependencies.html":{}}}],["3/9",{"_index":1315,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":1314,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":1479,"title":{},"body":{"overview.html":{}}}],["5.1.1",{"_index":1330,"title":{},"body":{"dependencies.html":{}}}],["512",{"_index":895,"title":{},"body":{"entities/Post.html":{}}}],["7.3.0",{"_index":1325,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1341,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":538,"title":{},"body":{"classes/CreateUserDto.html":{},"overview.html":{}}}],["8.11.5",{"_index":1337,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":423,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["9.11.0",{"_index":1333,"title":{},"body":{"dependencies.html":{}}}],["96",{"_index":1117,"title":{},"body":{"entities/User.html":{}}}],["_",{"_index":73,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["abstract",{"_index":733,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["access",{"_index":289,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["accesstoken",{"_index":650,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["accesstokenguard",{"_index":1,"title":{"guards/AccessTokenGuard.html":{}},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["activeuser",{"_index":943,"title":{},"body":{"controllers/PostController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["activeuserdata",{"_index":86,"title":{"interfaces/ActiveUserData.html":{}},"body":{"interfaces/ActiveUserData.html":{},"injectables/CreatePostProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["alice",{"_index":1206,"title":{},"body":{"injectables/UserService.html":{}}}],["alice@doe.com",{"_index":1207,"title":{},"body":{"injectables/UserService.html":{}}}],["allowing",{"_index":1416,"title":{},"body":{"index.html":{}}}],["already",{"_index":571,"title":{},"body":{"injectables/CreateUserProvider.html":{},"classes/PaginationQueryDto.html":{}}}],["amazing",{"_index":1461,"title":{},"body":{"index.html":{}}}],["anymore",{"_index":849,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["api",{"_index":1209,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["apioperation",{"_index":936,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":909,"title":{},"body":{"controllers/PostController.html":{}}}],["apiproperty",{"_index":367,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty()@isstring()@minlength(3)@isnotempty()@maxlength(256",{"_index":520,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apiproperty({description",{"_index":859,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["apiproperty({example",{"_index":441,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({type",{"_index":354,"title":{},"body":{"classes/CreateManyUsersDTO.html":{}}}],["apipropertyoptional",{"_index":458,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional()@isoptional()@isjson",{"_index":522,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional()@isoptional()@isstring",{"_index":516,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional()@isoptional()@isurl()@maxlength(1024",{"_index":518,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional({description",{"_index":676,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["apiquery",{"_index":1263,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":937,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":938,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["apitags('posts",{"_index":947,"title":{},"body":{"controllers/PostController.html":{}}}],["apitags('users",{"_index":1267,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiversion",{"_index":603,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["app.controller",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":102,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":155,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["app_interceptor",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["appconfig",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":98,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":1270,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["application'})@apiresponse({status",{"_index":1241,"title":{},"body":{"controllers/UsersController.html":{}}}],["applications",{"_index":1368,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":106,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":101,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":355,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{}}}],["async",{"_index":10,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["audience",{"_index":644,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["auth",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/UsersController.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["auth(authtype.none",{"_index":239,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["auth.controller",{"_index":256,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/config/jwt.config",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guards/access",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guards/authentication.guard",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["auth_type_key",{"_index":290,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authcontroller",{"_index":206,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":685,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["authenticate(@body",{"_index":692,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authenticate(googletokendto",{"_index":686,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["authentication",{"_index":684,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authentication.controller",{"_index":267,"title":{},"body":{"modules/AuthModule.html":{}}}],["authentication.controller.ts",{"_index":683,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"coverage.html":{}}}],["authentication.controller.ts:12",{"_index":688,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authentication.service",{"_index":269,"title":{},"body":{"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["authentication.service.ts",{"_index":695,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["authentication.service.ts:13",{"_index":698,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:21",{"_index":700,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:27",{"_index":699,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authenticationguard",{"_index":160,"title":{"guards/AuthenticationGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["authenticationguard.defaultauthtype",{"_index":299,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authmodule",{"_index":117,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":497,"title":{},"body":{"injectables/CreatePostProvider.html":{},"entities/Post.html":{},"injectables/PostService.html":{},"index.html":{},"properties.html":{}}}],["authorid",{"_index":475,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["authservice",{"_index":229,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["authtype",{"_index":233,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["authtype.bearer",{"_index":291,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtype.none",{"_index":294,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtypeguardmap",{"_index":282,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtypes",{"_index":295,"title":{},"body":{"guards/AuthenticationGuard.html":{},"miscellaneous/variables.html":{}}}],["authtypes.map((type",{"_index":300,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["autoloadentities",{"_index":183,"title":{},"body":{"modules/AppModule.html":{}}}],["await",{"_index":65,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["aws",{"_index":1327,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["backers",{"_index":1462,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":488,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["badrequestexception(\"please",{"_index":502,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["badrequestexception('please",{"_index":999,"title":{},"body":{"injectables/PostService.html":{}}}],["badrequestexception('the",{"_index":570,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["based",{"_index":1243,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["baseurl",{"_index":822,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["bcrypt",{"_index":318,"title":{},"body":{"injectables/BcryptProvider.html":{},"dependencies.html":{}}}],["bcrypt.compare(data",{"_index":322,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.gensalt",{"_index":320,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.hash(data",{"_index":321,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcryptprovider",{"_index":259,"title":{"injectables/BcryptProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["bearer",{"_index":79,"title":{},"body":{"guards/AccessTokenGuard.html":{},"miscellaneous/enumerations.html":{}}}],["between",{"_index":82,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["blog",{"_index":389,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"controllers/PostController.html":{}}}],["board",{"_index":1454,"title":{},"body":{"index.html":{}}}],["body",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":1040,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["bootstrap",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1477,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1475,"title":{},"body":{"modules.html":{}}}],["buffer",{"_index":311,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["building",{"_index":1363,"title":{},"body":{"index.html":{}}}],["business",{"_index":1163,"title":{},"body":{"injectables/UserService.html":{}}}],["callhandler",{"_index":597,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["canactivate",{"_index":11,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["canactivate(context",{"_index":26,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["cascade",{"_index":758,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["cascade'})@joincolumn",{"_index":750,"title":{},"body":{"entities/MetaOption.html":{}}}],["catch",{"_index":69,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["catch((error",{"_index":305,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["cause",{"_index":850,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["channel",{"_index":1430,"title":{},"body":{"index.html":{}}}],["character",{"_index":547,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":539,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["check",{"_index":573,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostService.html":{},"index.html":{}}}],["checks",{"_index":503,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["class",{"_index":52,"title":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{}},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":348,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"overview.html":{}}}],["classserializerinterceptor",{"_index":1254,"title":{},"body":{"controllers/UsersController.html":{}}}],["clicks",{"_index":1415,"title":{},"body":{"index.html":{}}}],["clientid",{"_index":704,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["clientsecret",{"_index":706,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["cloud",{"_index":1401,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":245,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":246,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":247,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule",{"_index":772,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_providers",{"_index":773,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_paginationmodule",{"_index":800,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_exports",{"_index":801,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_providers",{"_index":802,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_postmodule",{"_index":958,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_postmodule_imports",{"_index":959,"title":{},"body":{"modules/PostModule.html":{}}}],["cluster_postmodule_providers",{"_index":960,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_tagsmodule",{"_index":1076,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_exports",{"_index":1077,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_providers",{"_index":1078,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_uploadsmodule",{"_index":1109,"title":{},"body":{"modules/UploadsModule.html":{},"overview.html":{}}}],["cluster_uploadsmodule_providers",{"_index":1110,"title":{},"body":{"modules/UploadsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1287,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1289,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":1288,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":755,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["column({type",{"_index":745,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["come",{"_index":1422,"title":{},"body":{"index.html":{}}}],["common/interceptors/data",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["common/pagination/pagination.module",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["compare",{"_index":1043,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["comparepassword",{"_index":308,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["comparepassword(data",{"_index":310,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["complete",{"_index":1153,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["compodoc/compodoc",{"_index":1318,"title":{},"body":{"dependencies.html":{}}}],["config/app.config",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database.config",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["config/environment.validation",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["config/jwt.config",{"_index":47,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["config/profile.config",{"_index":1190,"title":{},"body":{"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["configmodule",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["configmodule.forfeature(jwtconfig",{"_index":196,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["configmodule.forfeature(profileconfig",{"_index":1297,"title":{},"body":{"modules/UsersModule.html":{}}}],["configmodule.forroot",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":145,"title":{},"body":{"modules/AppModule.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/UserService.html":{}}}],["configservice.get('database.autoloadentities",{"_index":184,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.host",{"_index":194,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.name",{"_index":195,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.password",{"_index":192,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.port",{"_index":188,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.synchronize",{"_index":186,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.user",{"_index":190,"title":{},"body":{"modules/AppModule.html":{}}}],["configtype",{"_index":18,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{}}}],["conflictexception",{"_index":335,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/UserCreateManyProvider.html":{}}}],["conflictexception('could",{"_index":1152,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["conflictexception(error",{"_index":344,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{}}}],["connect",{"_index":1145,"title":{},"body":{"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["connecting",{"_index":579,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["connection",{"_index":1159,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["connectiong",{"_index":569,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UserService.html":{}}}],["console.log(environment",{"_index":1201,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(isauth",{"_index":1198,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(newurl",{"_index":827,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["console.log(this.profilconfiguration",{"_index":1202,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(this.profilconfiguration.apikey",{"_index":1203,"title":{},"body":{"injectables/UserService.html":{}}}],["const",{"_index":57,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["constants/auth.constants",{"_index":50,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["constructor",{"_index":14,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["constructor(@inject(forwardref",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(@injectrepository(metaoption",{"_index":785,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["constructor(@injectrepository(tag",{"_index":1097,"title":{},"body":{"injectables/TagsService.html":{}}}],["constructor(authservice",{"_index":1166,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(configservice",{"_index":593,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["constructor(datasource",{"_index":1134,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["constructor(jwtconfiguration",{"_index":631,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["constructor(jwtservice",{"_index":15,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["constructor(metaoptionrepository",{"_index":780,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["constructor(postrepository",{"_index":483,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["constructor(private",{"_index":54,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"controllers/TagsController.html":{},"injectables/UserCreateManyProvider.html":{},"controllers/UsersController.html":{}}}],["constructor(reflector",{"_index":285,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["constructor(request",{"_index":808,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["constructor(tagsrepository",{"_index":1087,"title":{},"body":{"injectables/TagsService.html":{}}}],["constructor(userreposiory",{"_index":617,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["constructor(userrepository",{"_index":328,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{}}}],["constructor(userservice",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{},"injectables/SignInProvider.html":{}}}],["contain",{"_index":541,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["content",{"_index":373,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["context",{"_index":29,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"classes/CreatePostDto.html":{},"injectables/DataResponseInterceptor.html":{}}}],["context.getclass",{"_index":298,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["context.gethandler",{"_index":297,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":58,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["controller",{"_index":97,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"controllers/TagsController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"controllers/TagsController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":237,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('google",{"_index":691,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["controller('meta",{"_index":768,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["controller('post",{"_index":946,"title":{},"body":{"controllers/PostController.html":{}}}],["controller('tags",{"_index":1069,"title":{},"body":{"controllers/TagsController.html":{}}}],["controller('uploads",{"_index":1108,"title":{},"body":{"controllers/UploadsController.html":{}}}],["controller('users",{"_index":1266,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":99,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["conversion",{"_index":853,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["correct",{"_index":1000,"title":{},"body":{"injectables/PostService.html":{}}}],["courses",{"_index":1436,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":1298,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":346,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDTO.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"injectables/PostService.html":{},"controllers/TagsController.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["create(@body",{"_index":770,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/TagsController.html":{}}}],["create(createpostmetaoptiondto",{"_index":762,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["create(createpostmetaoptionsdto",{"_index":783,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["create(createtagdto",{"_index":1061,"title":{},"body":{"controllers/TagsController.html":{}}}],["created",{"_index":914,"title":{},"body":{"controllers/PostController.html":{}}}],["createdate",{"_index":739,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createdatecolumn",{"_index":741,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["creategoogleuser",{"_index":327,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/UserService.html":{}}}],["creategoogleuser(googleuser",{"_index":332,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/UserService.html":{}}}],["creategoogleuserprovider",{"_index":323,"title":{"injectables/CreateGoogleUserProvider.html":{}},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["createmany",{"_index":1133,"title":{},"body":{"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["createmany(createmanyusersdto",{"_index":1137,"title":{},"body":{"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["createmanyusers",{"_index":1225,"title":{},"body":{"controllers/UsersController.html":{}}}],["createmanyusers(@body",{"_index":1284,"title":{},"body":{"controllers/UsersController.html":{}}}],["createmanyusers(createmanyusersdto",{"_index":1229,"title":{},"body":{"controllers/UsersController.html":{}}}],["createmanyusersdto",{"_index":347,"title":{"classes/CreateManyUsersDTO.html":{}},"body":{"classes/CreateManyUsersDTO.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["createmanyusersdto.users",{"_index":1146,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["createparamdecorator",{"_index":1490,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createpost",{"_index":482,"title":{},"body":{"injectables/CreatePostProvider.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["createpost(@activeuser",{"_index":952,"title":{},"body":{"controllers/PostController.html":{}}}],["createpost(createpostdto",{"_index":486,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostService.html":{}}}],["createpost(user",{"_index":908,"title":{},"body":{"controllers/PostController.html":{}}}],["createpostdto",{"_index":370,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["createpostdto.metaoptions",{"_index":495,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["createpostdto.tags.length",{"_index":500,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["createpostmetaoptiondto",{"_index":764,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createpostmetaoptionsdto",{"_index":392,"title":{"classes/CreatePostMetaOptionsDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"coverage.html":{}}}],["createpostprovider",{"_index":162,"title":{"injectables/CreatePostProvider.html":{}},"body":{"modules/AppModule.html":{},"injectables/CreatePostProvider.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"coverage.html":{},"overview.html":{}}}],["creates",{"_index":910,"title":{},"body":{"controllers/PostController.html":{}}}],["createtagdto",{"_index":513,"title":{"classes/CreateTagDto.html":{}},"body":{"classes/CreateTagDto.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["createtags",{"_index":1084,"title":{},"body":{"injectables/TagsService.html":{}}}],["createtags(createtagdto",{"_index":1090,"title":{},"body":{"injectables/TagsService.html":{}}}],["createuser",{"_index":554,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UserService.html":{}}}],["createuser(createuserdto",{"_index":556,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UserService.html":{}}}],["createuserdto",{"_index":353,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"classes/PatchUserDto.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":563,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["createuserprovider",{"_index":553,"title":{"injectables/CreateUserProvider.html":{}},"body":{"injectables/CreateUserProvider.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["createusers",{"_index":1226,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(@body",{"_index":1282,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(createuserdto",{"_index":1233,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusersprovider",{"_index":1169,"title":{},"body":{"injectables/UserService.html":{}}}],["ctx",{"_index":1493,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1494,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current",{"_index":798,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["currentpage",{"_index":794,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["custom",{"_index":1279,"title":{},"body":{"controllers/UsersController.html":{}}}],["data",{"_index":314,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/HashingProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["data.interface",{"_index":493,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["data.interface.ts",{"_index":90,"title":{},"body":{"interfaces/ActiveUserData.html":{},"coverage.html":{}}}],["database",{"_index":96,"title":{},"body":{"interfaces/ActiveUserData.html":{},"modules/AppModule.html":{},"injectables/CreateUserProvider.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["databaseconfig",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["dataresponseinterceptor",{"_index":165,"title":{"injectables/DataResponseInterceptor.html":{}},"body":{"modules/AppModule.html":{},"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["datasource",{"_index":1135,"title":{},"body":{"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["date",{"_index":404,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["declarations",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorator",{"_index":1280,"title":{},"body":{"controllers/UsersController.html":{}}}],["decorators",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"classes/GoogleTokenDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["decorators/auth.decorator",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{}}}],["deeper",{"_index":1432,"title":{},"body":{"index.html":{}}}],["default",{"_index":841,"title":{},"body":{"classes/PaginationQueryDto.html":{},"entities/Post.html":{},"miscellaneous/variables.html":{}}}],["defaultauthtype",{"_index":284,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["defaultvaluepipe",{"_index":1255,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":1275,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":1273,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":19,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["delete",{"_index":918,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["delete(\"soft",{"_index":1073,"title":{},"body":{"controllers/TagsController.html":{}}}],["delete('soft",{"_index":1065,"title":{},"body":{"controllers/TagsController.html":{}}}],["delete(@query('id",{"_index":1071,"title":{},"body":{"controllers/TagsController.html":{}}}],["delete(id",{"_index":972,"title":{},"body":{"injectables/PostService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["deleteat",{"_index":1046,"title":{},"body":{"entities/Tag.html":{}}}],["deleted",{"_index":996,"title":{},"body":{"injectables/PostService.html":{},"injectables/TagsService.html":{}}}],["deletedatecolumn",{"_index":1048,"title":{},"body":{"entities/Tag.html":{}}}],["deletepost",{"_index":905,"title":{},"body":{"controllers/PostController.html":{}}}],["deletepost(@query(\"id",{"_index":956,"title":{},"body":{"controllers/PostController.html":{}}}],["deletepost(id",{"_index":917,"title":{},"body":{"controllers/PostController.html":{}}}],["dependencies",{"_index":108,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":1392,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":1405,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":1397,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":1414,"title":{},"body":{"index.html":{}}}],["description",{"_index":345,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":1377,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":1443,"title":{},"body":{"index.html":{}}}],["discord",{"_index":1429,"title":{},"body":{"index.html":{}}}],["dive",{"_index":1431,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":1299,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["draft",{"_index":434,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["dto",{"_index":940,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["dto.ts",{"_index":857,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["dto.ts:12",{"_index":862,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["dtos/create",{"_index":489,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["dtos/get",{"_index":941,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["dtos/google",{"_index":690,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["dtos/pagination",{"_index":813,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["dtos/patch",{"_index":939,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/UsersController.html":{}}}],["dtos/refresh",{"_index":235,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["dtos/signin.dto",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["duplicate",{"_index":512,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["e",{"_index":1002,"title":{},"body":{"injectables/PostService.html":{}}}],["e2e",{"_index":1387,"title":{},"body":{"index.html":{}}}],["each",{"_index":369,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{}}}],["eager",{"_index":873,"title":{},"body":{"entities/Post.html":{}}}],["efficient",{"_index":1364,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":1396,"title":{},"body":{"index.html":{}}}],["email",{"_index":92,"title":{},"body":{"interfaces/ActiveUserData.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleUser.html":{},"classes/SignInDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["email.provider",{"_index":1193,"title":{},"body":{"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["email.provider.ts",{"_index":615,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"coverage.html":{}}}],["email.provider.ts:13",{"_index":621,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["email.provider.ts:7",{"_index":618,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["enabled",{"_index":851,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["encrypted",{"_index":312,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["enddate",{"_index":660,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{}}}],["endpoint",{"_index":1210,"title":{},"body":{"injectables/UserService.html":{}}}],["ensure",{"_index":509,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostService.html":{},"index.html":{}}}],["enterprise",{"_index":1445,"title":{},"body":{"index.html":{}}}],["entities",{"_index":182,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":736,"title":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"coverage.html":{}}}],["entries",{"_index":1245,"title":{},"body":{"controllers/UsersController.html":{}}}],["enum",{"_index":462,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enumerations",{"_index":1344,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/auth",{"_index":234,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{}}}],["enums/posttype.enum",{"_index":454,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enums/status.enum",{"_index":455,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["env",{"_index":170,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["env.${env",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["env.development",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":174,"title":{},"body":{"modules/AppModule.html":{}}}],["environment",{"_index":1199,"title":{},"body":{"injectables/UserService.html":{}}}],["environmentvalidation",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["eror",{"_index":306,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["err",{"_index":578,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["error",{"_index":70,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["error('function",{"_index":588,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["example",{"_index":384,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["exclude",{"_index":1128,"title":{},"body":{"entities/User.html":{}}}],["executioncontext",{"_index":27,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":626,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["existing",{"_index":926,"title":{},"body":{"controllers/PostController.html":{}}}],["existinguser",{"_index":561,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["exists",{"_index":572,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["experience",{"_index":1434,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":636,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["export",{"_index":51,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["exports",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":48,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/PaginationProvider.html":{},"dependencies.html":{}}}],["extends",{"_index":671,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["extractrequestfromheader",{"_index":13,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["extractrequestfromheader(request",{"_index":32,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["false",{"_index":396,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["family_name",{"_index":715,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["fast",{"_index":1408,"title":{},"body":{"index.html":{}}}],["featured",{"_index":387,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["featuredimageurl",{"_index":374,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["features",{"_index":1418,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":624,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["fetched",{"_index":1242,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetches",{"_index":1238,"title":{},"body":{"controllers/UsersController.html":{}}}],["few",{"_index":1410,"title":{},"body":{"index.html":{}}}],["field",{"_index":1491,"title":{},"body":{"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["filename",{"_index":1211,"title":{},"body":{"injectables/UserService.html":{}}}],["finally",{"_index":1156,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["finalresponse",{"_index":832,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["find",{"_index":1183,"title":{},"body":{"injectables/UserService.html":{}}}],["findall",{"_index":968,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["findall(getuserparamdto",{"_index":1175,"title":{},"body":{"injectables/UserService.html":{}}}],["findall(postquery",{"_index":974,"title":{},"body":{"injectables/PostService.html":{}}}],["findmultpletags",{"_index":1085,"title":{},"body":{"injectables/TagsService.html":{}}}],["findmultpletags(tags",{"_index":1093,"title":{},"body":{"injectables/TagsService.html":{}}}],["findonebyemail",{"_index":616,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"injectables/UserService.html":{}}}],["findonebyemail(email",{"_index":620,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"injectables/UserService.html":{}}}],["findonebygoogleid",{"_index":608,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"injectables/UserService.html":{}}}],["findonebygoogleid(googleid",{"_index":610,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"injectables/UserService.html":{}}}],["findonebygoogleidprovider",{"_index":605,"title":{"injectables/FindOneByGoogleIdProvider.html":{}},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["findonebygoogleidprvider",{"_index":1170,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid",{"_index":1165,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid(id",{"_index":1181,"title":{},"body":{"injectables/UserService.html":{}}}],["findoneuserbyemailprovider",{"_index":614,"title":{"injectables/FindOneUserByEmailProvider.html":{}},"body":{"injectables/FindOneUserByEmailProvider.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["first",{"_index":796,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["firstname",{"_index":526,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleUser.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["focus",{"_index":1417,"title":{},"body":{"index.html":{}}}],["follow",{"_index":1448,"title":{},"body":{"index.html":{}}}],["forwardref",{"_index":255,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["framework",{"_index":1362,"title":{},"body":{"index.html":{}}}],["full",{"_index":1444,"title":{},"body":{"index.html":{}}}],["function",{"_index":580,"title":{},"body":{"injectables/CreateUserProvider.html":{},"coverage.html":{}}}],["functions",{"_index":1355,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":1413,"title":{},"body":{"index.html":{}}}],["generate",{"_index":1025,"title":{},"body":{"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["generatetoken",{"_index":629,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["generatetoken(user",{"_index":633,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["generatetokenprovider",{"_index":1021,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["generatetokensprovider",{"_index":249,"title":{"injectables/GenerateTokensProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["ger",{"_index":677,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["get('/:id/:optional",{"_index":1269,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id/:optional?')@apioperation({summary",{"_index":1237,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:userid",{"_index":922,"title":{},"body":{"controllers/PostController.html":{}}}],["gethello",{"_index":103,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getpost",{"_index":906,"title":{},"body":{"controllers/PostController.html":{}}}],["getpost(@param('userid",{"_index":948,"title":{},"body":{"controllers/PostController.html":{}}}],["getpost(userid",{"_index":920,"title":{},"body":{"controllers/PostController.html":{}}}],["getpostbasedto",{"_index":657,"title":{"classes/GetPostBaseDto.html":{}},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"coverage.html":{}}}],["getpostdto",{"_index":670,"title":{"classes/GetPostDto.html":{}},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["getting",{"_index":1358,"title":{"index.html":{}},"body":{}}],["getuserparamdto",{"_index":1178,"title":{},"body":{"injectables/UserService.html":{}}}],["getusers",{"_index":1227,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(/*@param('id",{"_index":1271,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getusersparamdto",{"_index":1236,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersparamdto",{"_index":673,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["given_name",{"_index":714,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["google",{"_index":325,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{}}}],["googleauthenticationcontroller",{"_index":254,"title":{"controllers/GoogleAuthenticationController.html":{}},"body":{"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{},"coverage.html":{}}}],["googleauthenticationservice",{"_index":250,"title":{"injectables/GoogleAuthenticationService.html":{}},"body":{"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"coverage.html":{},"overview.html":{}}}],["googleid",{"_index":612,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleUser.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["googletokendto",{"_index":687,"title":{"classes/GoogleTokenDto.html":{}},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"coverage.html":{}}}],["googletokendto.token",{"_index":713,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["googleuser",{"_index":333,"title":{"classes/GoogleUser.html":{}},"body":{"injectables/CreateGoogleUserProvider.html":{},"classes/GoogleUser.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["graph",{"_index":1439,"title":{},"body":{"index.html":{}}}],["grow",{"_index":1458,"title":{},"body":{"index.html":{}}}],["guard",{"_index":0,"title":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}},"body":{"coverage.html":{}}}],["guards",{"_index":2,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"overview.html":{}}}],["hands",{"_index":1433,"title":{},"body":{"index.html":{}}}],["handy",{"_index":1423,"title":{},"body":{"index.html":{}}}],["hashing.provider",{"_index":317,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/SignInProvider.html":{}}}],["hashingprovider",{"_index":248,"title":{"injectables/HashingProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["hashpassword",{"_index":309,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["hashpassword(data",{"_index":315,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["header",{"_index":78,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/UsersController.html":{}}}],["headers",{"_index":1256,"title":{},"body":{"controllers/UsersController.html":{}}}],["hello",{"_index":203,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":1437,"title":{},"body":{"index.html":{}}}],["here",{"_index":1466,"title":{},"body":{"index.html":{}}}],["host",{"_index":193,"title":{},"body":{"modules/AppModule.html":{}}}],["http://localhost.com/images/image1.jpg",{"_index":390,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["httpcode",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":238,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpexception",{"_index":1186,"title":{},"body":{"injectables/UserService.html":{}}}],["https://nestjs.com",{"_index":1471,"title":{},"body":{"index.html":{}}}],["https://schema.org",{"_index":416,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https:\\/\\/schema.org\\\",\\r\\n",{"_index":467,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["httpstatus",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["httpstatus.moved_permanently",{"_index":1208,"title":{},"body":{"injectables/UserService.html":{}}}],["id",{"_index":95,"title":{},"body":{"interfaces/ActiveUserData.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["id.provider",{"_index":1194,"title":{},"body":{"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["id.provider.ts",{"_index":607,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"coverage.html":{}}}],["id.provider.ts:12",{"_index":611,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{}}}],["id.provider.ts:7",{"_index":609,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{}}}],["identifier",{"_index":1300,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":439,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"injectables/PostService.html":{}}}],["idtoken",{"_index":712,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["image",{"_index":388,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["implemented",{"_index":589,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["implements",{"_index":53,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["implicit",{"_index":852,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["import",{"_index":37,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["imports",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["in')@httpcode(httpstatus.ok)@auth(authtype.none",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{}}}],["in(tags",{"_index":1102,"title":{},"body":{"injectables/TagsService.html":{}}}],["in.provider",{"_index":262,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["in.provider.ts",{"_index":1035,"title":{},"body":{"injectables/SignInProvider.html":{},"coverage.html":{}}}],["in.provider.ts:12",{"_index":1036,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["in.provider.ts:24",{"_index":1037,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["inejectrepository",{"_index":581,"title":{},"body":{"injectables/CreateUserProvider.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["information",{"_index":1399,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":1420,"title":{},"body":{"index.html":{}}}],["inject",{"_index":38,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{}}}],["inject(forwardref",{"_index":560,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{}}}],["inject(jwtconfig.key",{"_index":56,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["inject(profileconfig.key",{"_index":1195,"title":{},"body":{"injectables/UserService.html":{}}}],["inject(request",{"_index":816,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["injectable",{"_index":39,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":200,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":338,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["injectrepository(metaoption",{"_index":980,"title":{},"body":{"injectables/PostService.html":{}}}],["injectrepository(post",{"_index":494,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostService.html":{}}}],["injectrepository(user",{"_index":341,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/UserService.html":{}}}],["inside",{"_index":511,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["install",{"_index":1412,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":1375,"title":{},"body":{"index.html":{}}}],["instance",{"_index":302,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["instance.canactivate(context",{"_index":304,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["integer",{"_index":474,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["interact",{"_index":1440,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":592,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["intercept(context",{"_index":595,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["interface",{"_index":85,"title":{"interfaces/ActiveUserData.html":{},"interfaces/Paginated.html":{}},"body":{"interfaces/ActiveUserData.html":{},"interfaces/Paginated.html":{},"coverage.html":{}}}],["interfaces",{"_index":87,"title":{},"body":{"interfaces/ActiveUserData.html":{},"interfaces/Paginated.html":{},"overview.html":{}}}],["interfaces/active",{"_index":642,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["interfaces/google",{"_index":339,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/UserService.html":{}}}],["interfaces/paginated.interface",{"_index":815,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["intersectiontype",{"_index":665,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{}}}],["intersectiontype(getpostbasedto",{"_index":672,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{}}}],["inversepost",{"_index":993,"title":{},"body":{"injectables/PostService.html":{}}}],["ip",{"_index":1257,"title":{},"body":{"controllers/UsersController.html":{}}}],["isarray",{"_index":361,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{}}}],["isauth",{"_index":1196,"title":{},"body":{"injectables/UserService.html":{}}}],["isdate",{"_index":666,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{}}}],["isdate()@isoptional",{"_index":662,"title":{},"body":{"classes/GetPostBaseDto.html":{}}}],["isemail",{"_index":549,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["isemail()@isnotempty",{"_index":1030,"title":{},"body":{"classes/SignInDto.html":{}}}],["isenum",{"_index":444,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":465,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus)@isnotempty()@apiproperty({enum",{"_index":433,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":461,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype)@isnotempty()@apiproperty({enum",{"_index":399,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isequal",{"_index":1039,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["isglobal",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":445,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["isiso8601",{"_index":446,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isiso8601()@isoptional()@apipropertyoptional({description",{"_index":405,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":447,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{}}}],["isnotempty",{"_index":362,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GoogleTokenDto.html":{},"classes/PatchPostDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{}}}],["isnotempty()@isjson",{"_index":478,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["isnotempty()@isstring",{"_index":724,"title":{},"body":{"classes/GoogleTokenDto.html":{},"classes/RefreshTokenDto.html":{}}}],["isoptional",{"_index":448,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{}}}],["isoptional()@apipropertyoptional({type",{"_index":394,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional()@isarray()@isint({each",{"_index":437,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional()@isjson()@apipropertyoptional({description",{"_index":411,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional()@ispositive",{"_index":844,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["isoptional()@isurl()@maxlength(1024)@apipropertyoptional({description",{"_index":386,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["ispositive",{"_index":847,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["isstring",{"_index":449,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GoogleTokenDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{}}}],["isstring()@isnotempty",{"_index":1032,"title":{},"body":{"classes/SignInDto.html":{}}}],["isstring()@isnotempty()@apiproperty({description",{"_index":419,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["isstring()@isnotempty()@isemail()@maxlength(96",{"_index":528,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":530,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(8)@matches(/^(?=.*[a",{"_index":534,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@apipropertyoptional({description",{"_index":383,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":532,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["issuer",{"_index":646,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["isurl",{"_index":450,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["items",{"_index":357,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{}}}],["itemsperpage",{"_index":792,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["job",{"_index":1451,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":1453,"title":{},"body":{"index.html":{}}}],["john",{"_index":1204,"title":{},"body":{"injectables/UserService.html":{}}}],["john@doe.com",{"_index":1205,"title":{},"body":{"injectables/UserService.html":{}}}],["joi",{"_index":1334,"title":{},"body":{"dependencies.html":{}}}],["join",{"_index":1464,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":756,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["jointable",{"_index":897,"title":{},"body":{"entities/Post.html":{}}}],["json",{"_index":413,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{}}}],["jwtconfig",{"_index":46,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"modules/UsersModule.html":{}}}],["jwtconfiguration",{"_index":17,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["jwtmodule",{"_index":153,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["jwtmodule.registerasync(jwtconfig.asprovider",{"_index":197,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["jwtservice",{"_index":16,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["kamil",{"_index":1468,"title":{},"body":{"index.html":{}}}],["key",{"_index":1393,"title":{},"body":{"index.html":{}}}],["keyof",{"_index":1492,"title":{},"body":{"miscellaneous/variables.html":{}}}],["last",{"_index":797,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["lastname",{"_index":527,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleUser.html":{},"entities/User.html":{}}}],["later",{"_index":568,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["learn",{"_index":1426,"title":{},"body":{"index.html":{}}}],["legend",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":878,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["letter",{"_index":544,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letters",{"_index":426,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["library",{"_index":702,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"dependencies.html":{}}}],["license",{"_index":1474,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1456,"title":{},"body":{"index.html":{}}}],["limit",{"_index":839,"title":{},"body":{"classes/PaginationQueryDto.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["line",{"_index":75,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["linenumber",{"_index":1213,"title":{},"body":{"injectables/UserService.html":{}}}],["linkedin",{"_index":1450,"title":{},"body":{"index.html":{}}}],["links",{"_index":790,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["list",{"_index":1239,"title":{},"body":{"controllers/UsersController.html":{}}}],["literal",{"_index":791,"title":{},"body":{"interfaces/Paginated.html":{}}}],["load",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["loginticket",{"_index":710,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["loginticket.getpayload",{"_index":716,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["long",{"_index":540,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["looking",{"_index":1400,"title":{},"body":{"index.html":{}}}],["loop",{"_index":1447,"title":{},"body":{"index.html":{}}}],["lowercase",{"_index":545,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["main.ts",{"_index":854,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["makes",{"_index":1406,"title":{},"body":{"index.html":{}}}],["managing",{"_index":1419,"title":{},"body":{"index.html":{}}}],["many",{"_index":350,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["many')@useguards(accesstokenguard",{"_index":1231,"title":{},"body":{"controllers/UsersController.html":{}}}],["many.provider",{"_index":1191,"title":{},"body":{"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["many.provider.ts",{"_index":1132,"title":{},"body":{"injectables/UserCreateManyProvider.html":{},"coverage.html":{}}}],["many.provider.ts:11",{"_index":1138,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["many.provider.ts:8",{"_index":1136,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["manytomany",{"_index":898,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytomany(undefined",{"_index":891,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytoone",{"_index":899,"title":{},"body":{"entities/Post.html":{}}}],["manytoone(undefined",{"_index":871,"title":{},"body":{"entities/Post.html":{}}}],["map",{"_index":600,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["matches",{"_index":451,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":552,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":463,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["matching",{"_index":84,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(totalitems",{"_index":829,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["mau",{"_index":1403,"title":{},"body":{"index.html":{}}}],["maxlength",{"_index":452,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(1024",{"_index":469,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(256",{"_index":464,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(512",{"_index":460,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["maxlength(96",{"_index":550,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":424,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["meta",{"_index":139,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"entities/Post.html":{},"coverage.html":{}}}],["metadata",{"_index":1339,"title":{},"body":{"dependencies.html":{}}}],["metaoption",{"_index":737,"title":{"entities/MetaOption.html":{}},"body":{"entities/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["metaoptionrepository",{"_index":782,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostService.html":{}}}],["metaoptions",{"_index":375,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"entities/Post.html":{},"injectables/PostService.html":{}}}],["metaoptions.post",{"_index":882,"title":{},"body":{"entities/Post.html":{}}}],["metaoptionscontroller",{"_index":759,"title":{"controllers/MetaOptionsController.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"coverage.html":{}}}],["metaoptionservice",{"_index":769,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["metaoptionsmodule",{"_index":118,"title":{"modules/MetaOptionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules.html":{},"overview.html":{}}}],["metaoptionsservice",{"_index":765,"title":{"injectables/MetaOptionsService.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{},"overview.html":{}}}],["metavalue",{"_index":472,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{}}}],["method",{"_index":1177,"title":{},"body":{"injectables/UserService.html":{}}}],["methods",{"_index":9,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["minlength",{"_index":453,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":525,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":459,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":551,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":1343,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1455,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1380,"title":{},"body":{"index.html":{}}}],["module",{"_index":105,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":107,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":566,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UserService.html":{}}}],["more",{"_index":1398,"title":{},"body":{"index.html":{}}}],["moved",{"_index":1217,"title":{},"body":{"injectables/UserService.html":{}}}],["myśliwiec",{"_index":1469,"title":{},"body":{"index.html":{}}}],["name",{"_index":23,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["need",{"_index":848,"title":{},"body":{"classes/PaginationQueryDto.html":{},"index.html":{}}}],["needs",{"_index":860,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["nest",{"_index":1369,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1473,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":599,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["nestjs",{"_index":205,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["nestjs/common",{"_index":41,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":42,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":157,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/PaginationProvider.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":43,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":868,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1324,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":368,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":136,"title":{},"body":{"modules/AppModule.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["new",{"_index":62,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["newurl",{"_index":825,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&pages=${nextpage",{"_index":836,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&pages=${paginationquery.page",{"_index":835,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&pages=${previouspage",{"_index":837,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&pages=${totalpages",{"_index":834,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&pages=1",{"_index":833,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newuser",{"_index":574,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/UserCreateManyProvider.html":{}}}],["newusers",{"_index":1139,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["newusers.push(result",{"_index":1149,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["next",{"_index":596,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["next.handle().pipe(map((data",{"_index":602,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["nextpage",{"_index":830,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["node.js",{"_index":1361,"title":{},"body":{"index.html":{}}}],["none",{"_index":1278,"title":{},"body":{"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["npm",{"_index":1374,"title":{},"body":{"index.html":{}}}],["null",{"_index":393,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{}}}],["nullable",{"_index":746,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["number",{"_index":94,"title":{},"body":{"interfaces/ActiveUserData.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["oauth2client",{"_index":701,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["oauth2client(clientid",{"_index":709,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["oauthclient",{"_index":696,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["object",{"_index":395,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["objectliteral",{"_index":814,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["observable",{"_index":44,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{}}}],["occured",{"_index":1215,"title":{},"body":{"injectables/UserService.html":{}}}],["offer",{"_index":1452,"title":{},"body":{"index.html":{}}}],["official",{"_index":1404,"title":{},"body":{"index.html":{}}}],["ondelete",{"_index":749,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["one",{"_index":542,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["onetomany",{"_index":1129,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":1125,"title":{},"body":{"entities/User.html":{}}}],["onetoone",{"_index":757,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["onetoone(undefined",{"_index":748,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["onmoduleinit",{"_index":697,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["open",{"_index":1457,"title":{},"body":{"index.html":{}}}],["operations",{"_index":1164,"title":{},"body":{"injectables/UserService.html":{}}}],["option.dtos",{"_index":457,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{}}}],["option.dtos.ts",{"_index":477,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["option.dtos.ts:6",{"_index":479,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["option.entity",{"_index":776,"title":{},"body":{"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{}}}],["option.entity.ts",{"_index":738,"title":{},"body":{"entities/MetaOption.html":{},"coverage.html":{}}}],["option.entity.ts:13",{"_index":747,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:16",{"_index":742,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:19",{"_index":753,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:26",{"_index":751,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:7",{"_index":744,"title":{},"body":{"entities/MetaOption.html":{}}}],["optional",{"_index":25,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["options",{"_index":761,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options.controller",{"_index":775,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.controller.ts",{"_index":760,"title":{},"body":{"controllers/MetaOptionsController.html":{},"coverage.html":{}}}],["options.controller.ts:11",{"_index":763,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options.module",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["options.module.ts",{"_index":774,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.service",{"_index":767,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["options.service.ts",{"_index":779,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["options.service.ts:12",{"_index":784,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options.service.ts:8",{"_index":781,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options/dtos/create",{"_index":456,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/Post.html":{},"coverage.html":{}}}],["options/meta",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"entities/Post.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["options/providers/meta",{"_index":778,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["out",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":1478,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1317,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":840,"title":{},"body":{"classes/PaginationQueryDto.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["page','story','series",{"_index":402,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["paginated",{"_index":788,"title":{"interfaces/Paginated.html":{}},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["paginatequery",{"_index":807,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginatequery(paginationquery",{"_index":810,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationmodule",{"_index":119,"title":{"modules/PaginationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules.html":{},"overview.html":{}}}],["paginationprovider",{"_index":803,"title":{"injectables/PaginationProvider.html":{}},"body":{"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"coverage.html":{},"overview.html":{}}}],["paginationquery",{"_index":812,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquery.limit",{"_index":820,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquery.page",{"_index":819,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquerydto",{"_index":667,"title":{"classes/PaginationQueryDto.html":{}},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["param",{"_index":930,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["param.dto",{"_index":1187,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["param.dto.ts",{"_index":675,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:13",{"_index":680,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parameterindex",{"_index":585,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["parameters",{"_index":21,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["parseintpipe",{"_index":931,"title":{},"body":{"controllers/PostController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["part",{"_index":77,"title":{},"body":{"guards/AccessTokenGuard.html":{},"index.html":{}}}],["partialtype",{"_index":863,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":858,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":867,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["password",{"_index":191,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{}}}],["patch",{"_index":932,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["patchpostdto",{"_index":855,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["patchpostdto.content",{"_index":1006,"title":{},"body":{"injectables/PostService.html":{}}}],["patchpostdto.featuredimageurl",{"_index":1014,"title":{},"body":{"injectables/PostService.html":{}}}],["patchpostdto.id",{"_index":1001,"title":{},"body":{"injectables/PostService.html":{}}}],["patchpostdto.posttype",{"_index":1012,"title":{},"body":{"injectables/PostService.html":{}}}],["patchpostdto.publishon",{"_index":1016,"title":{},"body":{"injectables/PostService.html":{}}}],["patchpostdto.slug",{"_index":1010,"title":{},"body":{"injectables/PostService.html":{}}}],["patchpostdto.status",{"_index":1008,"title":{},"body":{"injectables/PostService.html":{}}}],["patchpostdto.tags.length",{"_index":998,"title":{},"body":{"injectables/PostService.html":{}}}],["patchpostdto.title",{"_index":1004,"title":{},"body":{"injectables/PostService.html":{}}}],["patchuser",{"_index":1228,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":1286,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(patchuserdto",{"_index":1252,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":865,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["payload",{"_index":64,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{}}}],["per",{"_index":1247,"title":{},"body":{"controllers/UsersController.html":{}}}],["perform",{"_index":1162,"title":{},"body":{"injectables/UserService.html":{}}}],["permanently",{"_index":1216,"title":{},"body":{"injectables/UserService.html":{}}}],["person",{"_index":417,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["person\\\"\\r\\n",{"_index":468,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["pg",{"_index":1336,"title":{},"body":{"dependencies.html":{}}}],["platform",{"_index":1402,"title":{},"body":{"index.html":{}}}],["please",{"_index":567,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["port",{"_index":187,"title":{},"body":{"modules/AppModule.html":{}}}],["position",{"_index":1249,"title":{},"body":{"controllers/UsersController.html":{}}}],["possible",{"_index":400,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["post",{"_index":228,"title":{"entities/Post.html":{}},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"controllers/GoogleAuthenticationController.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":911,"title":{},"body":{"controllers/PostController.html":{}}}],["post'})@isstring()@minlength(4)@maxlength(512)@isnotempty",{"_index":442,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@matches(/^[a",{"_index":421,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["post('create",{"_index":1230,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('refresh",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('sign",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@auth(authtype.none)@useinterceptors(classserializerinterceptor",{"_index":1234,"title":{},"body":{"controllers/UsersController.html":{}}}],["post.author",{"_index":1126,"title":{},"body":{"entities/User.html":{}}}],["post.content",{"_index":1005,"title":{},"body":{"injectables/PostService.html":{}}}],["post.controller",{"_index":962,"title":{},"body":{"modules/PostModule.html":{}}}],["post.dtos",{"_index":490,"title":{},"body":{"injectables/CreatePostProvider.html":{},"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["post.dtos.ts",{"_index":372,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["post.dtos.ts:115",{"_index":398,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:17",{"_index":443,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:25",{"_index":403,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:32",{"_index":385,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:44",{"_index":431,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:53",{"_index":436,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:61",{"_index":418,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:71",{"_index":391,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:80",{"_index":410,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:92",{"_index":440,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.entity",{"_index":491,"title":{},"body":{"injectables/CreatePostProvider.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{}}}],["post.featuredimageurl",{"_index":1013,"title":{},"body":{"injectables/PostService.html":{}}}],["post.metaoptions",{"_index":507,"title":{},"body":{"injectables/CreatePostProvider.html":{},"entities/MetaOption.html":{}}}],["post.metaoptions.id",{"_index":995,"title":{},"body":{"injectables/PostService.html":{}}}],["post.posttype",{"_index":1011,"title":{},"body":{"injectables/PostService.html":{}}}],["post.provider",{"_index":164,"title":{},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{}}}],["post.provider.ts",{"_index":481,"title":{},"body":{"injectables/CreatePostProvider.html":{},"coverage.html":{}}}],["post.provider.ts:11",{"_index":484,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["post.provider.ts:20",{"_index":487,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["post.publishon",{"_index":1015,"title":{},"body":{"injectables/PostService.html":{}}}],["post.slug",{"_index":1009,"title":{},"body":{"injectables/PostService.html":{}}}],["post.status",{"_index":1007,"title":{},"body":{"injectables/PostService.html":{}}}],["post.tags",{"_index":1017,"title":{},"body":{"injectables/PostService.html":{},"entities/Tag.html":{}}}],["post.title",{"_index":1003,"title":{},"body":{"injectables/PostService.html":{}}}],["post/post.module",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["post/services/create",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["post/services/post.service",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["postcontroller",{"_index":903,"title":{"controllers/PostController.html":{}},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{},"coverage.html":{}}}],["postgres",{"_index":181,"title":{},"body":{"modules/AppModule.html":{}}}],["postmodule",{"_index":120,"title":{"modules/PostModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"modules.html":{},"overview.html":{}}}],["postquery",{"_index":921,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["postquery.limit",{"_index":986,"title":{},"body":{"injectables/PostService.html":{}}}],["postquery.page",{"_index":985,"title":{},"body":{"injectables/PostService.html":{}}}],["postrepository",{"_index":485,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostService.html":{}}}],["posts",{"_index":982,"title":{},"body":{"injectables/PostService.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["posts.dto",{"_index":942,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["posts.dto.ts",{"_index":659,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"coverage.html":{}}}],["posts.dto.ts:12",{"_index":663,"title":{},"body":{"classes/GetPostBaseDto.html":{}}}],["posts.dto.ts:8",{"_index":664,"title":{},"body":{"classes/GetPostBaseDto.html":{}}}],["postservice",{"_index":132,"title":{"injectables/PostService.html":{}},"body":{"modules/AppModule.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":432,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["poststatus.draft",{"_index":902,"title":{},"body":{"entities/Post.html":{}}}],["posttype",{"_index":376,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["posttype.post",{"_index":901,"title":{},"body":{"entities/Post.html":{}}}],["prefix",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"controllers/TagsController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{}}}],["previous",{"_index":799,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["previouspage",{"_index":831,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["primarygeneratedcolumn",{"_index":743,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["private",{"_index":12,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["process",{"_index":565,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["process.env.node_env",{"_index":171,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["production",{"_index":1382,"title":{},"body":{"index.html":{}}}],["profilconfiguration",{"_index":1167,"title":{},"body":{"injectables/UserService.html":{}}}],["profileconfig",{"_index":1189,"title":{},"body":{"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["progressive",{"_index":1360,"title":{},"body":{"index.html":{}}}],["project",{"_index":1372,"title":{},"body":{"index.html":{}}}],["promise",{"_index":31,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{}}}],["promise.all",{"_index":651,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["promise.resolve",{"_index":303,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["properties",{"_index":91,"title":{"properties.html":{}},"body":{"interfaces/ActiveUserData.html":{},"guards/AuthenticationGuard.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"entities/User.html":{},"properties.html":{}}}],["propertykey",{"_index":584,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["provide",{"_index":198,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["providers",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/bcrypt.provider",{"_index":260,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/create",{"_index":1294,"title":{},"body":{"modules/UsersModule.html":{}}}],["providers/find",{"_index":1295,"title":{},"body":{"modules/UsersModule.html":{}}}],["providers/generate",{"_index":263,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["providers/google",{"_index":689,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["providers/hashing.provider",{"_index":258,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/meta",{"_index":766,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["providers/pagination.provider",{"_index":805,"title":{},"body":{"modules/PaginationModule.html":{}}}],["providers/refresh",{"_index":265,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["providers/sign",{"_index":261,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["providers/tags.service",{"_index":1068,"title":{},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{}}}],["providers/uploads.service",{"_index":1114,"title":{},"body":{"modules/UploadsModule.html":{}}}],["providers/user",{"_index":1293,"title":{},"body":{"modules/UsersModule.html":{}}}],["providers/user.service",{"_index":1262,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["published",{"_index":406,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["publishon",{"_index":377,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["query",{"_index":933,"title":{},"body":{"controllers/PostController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["query'})@apiquery({name",{"_index":1244,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit",{"_index":1272,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":1274,"title":{},"body":{"controllers/UsersController.html":{}}}],["query.dto",{"_index":669,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"injectables/PaginationProvider.html":{}}}],["query.dto.ts",{"_index":838,"title":{},"body":{"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["query.dto.ts:12",{"_index":846,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["query.dto.ts:8",{"_index":845,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["queryrunner",{"_index":1140,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["queryrunner.committransaction",{"_index":1150,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["queryrunner.connect",{"_index":1142,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["queryrunner.manager.create(user",{"_index":1147,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["queryrunner.manager.save(newuser",{"_index":1148,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["queryrunner.release",{"_index":1157,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["queryrunner.rollbacktransaction",{"_index":1151,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["queryrunner.starttransaction",{"_index":1143,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["questions",{"_index":1427,"title":{},"body":{"index.html":{}}}],["r\\n",{"_index":466,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["read",{"_index":1465,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":55,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["ready",{"_index":1391,"title":{},"body":{"index.html":{}}}],["real",{"_index":1441,"title":{},"body":{"index.html":{}}}],["record",{"_index":292,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["reflect",{"_index":1338,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":286,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["refreshtoken",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokensProvider.html":{},"classes/RefreshTokenDto.html":{}}}],["refreshtoken(@body",{"_index":243,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtoken(refreshtokendto",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["refreshtokendto",{"_index":214,"title":{"classes/RefreshTokenDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"coverage.html":{}}}],["refreshtokenprovider",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokens",{"_index":1020,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["refreshtokens(refreshtokendto",{"_index":1023,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["refreshtokensprovider",{"_index":251,"title":{"injectables/RefreshTokensProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokensProvider.html":{},"coverage.html":{},"overview.html":{}}}],["registered",{"_index":1240,"title":{},"body":{"controllers/UsersController.html":{}}}],["relations",{"_index":984,"title":{},"body":{"injectables/PostService.html":{}}}],["release",{"_index":1158,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["repository",{"_index":329,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["repository.count",{"_index":828,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["repository.find",{"_index":817,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["req",{"_index":934,"title":{},"body":{"controllers/PostController.html":{}}}],["request",{"_index":33,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["request.headers.authorization?.split",{"_index":74,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["request[request_user_key",{"_index":68,"title":{},"body":{"guards/AccessTokenGuard.html":{},"miscellaneous/variables.html":{}}}],["request_user_key",{"_index":49,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["requesttimeoutexception",{"_index":558,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/PostService.html":{},"injectables/SignInProvider.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["requesttimeoutexception('could",{"_index":1144,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["requesttimeoutexception('unable",{"_index":564,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["requesttimeoutexception(error",{"_index":623,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"injectables/SignInProvider.html":{}}}],["required",{"_index":356,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["requiring",{"_index":1409,"title":{},"body":{"index.html":{}}}],["reset",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":1421,"title":{},"body":{"index.html":{}}}],["response",{"_index":913,"title":{},"body":{"controllers/PostController.html":{}}}],["response.interceptor",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["response.interceptor.ts",{"_index":591,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["response.interceptor.ts:6",{"_index":594,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["response.interceptor.ts:9",{"_index":598,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["response/data",{"_index":167,"title":{},"body":{"modules/AppModule.html":{},"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["result",{"_index":1100,"title":{},"body":{"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{}}}],["results",{"_index":83,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":71,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":1246,"title":{},"body":{"controllers/UsersController.html":{}}}],["returns",{"_index":30,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["review",{"_index":1351,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["run",{"_index":1376,"title":{},"body":{"index.html":{}}}],["runs",{"_index":1395,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":45,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{},"dependencies.html":{}}}],["salt",{"_index":319,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["scalable",{"_index":1365,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":1350,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["scheduled','review",{"_index":435,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["schema",{"_index":378,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["sdk",{"_index":1328,"title":{},"body":{"dependencies.html":{}}}],["secret",{"_index":648,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["serialize",{"_index":412,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":1354,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["server",{"_index":1366,"title":{},"body":{"index.html":{}}}],["service/auth.service",{"_index":230,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["services/create",{"_index":965,"title":{},"body":{"modules/PostModule.html":{}}}],["services/post.service",{"_index":935,"title":{},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{}}}],["setmetadata",{"_index":1258,"title":{},"body":{"controllers/UsersController.html":{}}}],["setmetadata('authtype",{"_index":1277,"title":{},"body":{"controllers/UsersController.html":{}}}],["setmetadata(auth_type_key",{"_index":1496,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":1373,"title":{},"body":{"index.html":{}}}],["side",{"_index":1367,"title":{},"body":{"index.html":{}}}],["sidebarenabled\":true",{"_index":473,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["signin",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["signin(@body",{"_index":240,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(signindto",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["signindto",{"_index":221,"title":{"classes/SignInDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"coverage.html":{}}}],["signinprovider",{"_index":252,"title":{"injectables/SignInProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["signtoken",{"_index":630,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["signtoken(userid",{"_index":635,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["simple",{"_index":1411,"title":{},"body":{"index.html":{}}}],["single",{"_index":1184,"title":{},"body":{"injectables/UserService.html":{}}}],["skip",{"_index":818,"title":{},"body":{"injectables/PaginationProvider.html":{},"injectables/PostService.html":{}}}],["slug",{"_index":379,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["small",{"_index":425,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["social/google",{"_index":266,"title":{},"body":{"modules/AuthModule.html":{}}}],["social/providers/google",{"_index":268,"title":{},"body":{"modules/AuthModule.html":{}}}],["softdelete",{"_index":1060,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdelete(@query('id",{"_index":1074,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdelete(id",{"_index":1064,"title":{},"body":{"controllers/TagsController.html":{}}}],["softremove",{"_index":1086,"title":{},"body":{"injectables/TagsService.html":{}}}],["softremove(id",{"_index":1095,"title":{},"body":{"injectables/TagsService.html":{}}}],["source",{"_index":4,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["space",{"_index":81,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["spaces",{"_index":429,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["special",{"_index":546,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":678,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["split",{"_index":80,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["sponsors",{"_index":1460,"title":{},"body":{"index.html":{}}}],["src/.../active",{"_index":1486,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../app.module.ts",{"_index":1489,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth",{"_index":1345,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../auth.constants.ts",{"_index":1488,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.decorator.ts",{"_index":1487,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../create",{"_index":1357,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":1356,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../posttype.enum.ts",{"_index":1348,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../status.enum.ts",{"_index":1347,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":100,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":201,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":202,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:16",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:23",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":1292,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":253,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/config/jwt.config",{"_index":703,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"modules/UsersModule.html":{}}}],["src/auth/constants/auth.constants.ts",{"_index":1306,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/active",{"_index":944,"title":{},"body":{"controllers/PostController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/auth.decorator",{"_index":1264,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/auth/decorators/auth.decorator.ts",{"_index":1308,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dtos/refresh",{"_index":1018,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["src/auth/dtos/signin.dto.ts",{"_index":1029,"title":{},"body":{"classes/SignInDto.html":{},"coverage.html":{}}}],["src/auth/dtos/signin.dto.ts:10",{"_index":1033,"title":{},"body":{"classes/SignInDto.html":{}}}],["src/auth/dtos/signin.dto.ts:6",{"_index":1031,"title":{},"body":{"classes/SignInDto.html":{}}}],["src/auth/enums/auth",{"_index":1265,"title":{},"body":{"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["src/auth/guards/access",{"_index":6,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["src/auth/guards/authentication.guard.ts",{"_index":281,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["src/auth/guards/authentication.guard.ts:16",{"_index":287,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/auth/guards/authentication.guard.ts:20",{"_index":288,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/auth/interfaces/active",{"_index":88,"title":{},"body":{"interfaces/ActiveUserData.html":{},"injectables/CreatePostProvider.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["src/auth/providers/bcrypt.provider.ts",{"_index":307,"title":{},"body":{"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["src/auth/providers/bcrypt.provider.ts:11",{"_index":313,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/bcrypt.provider.ts:6",{"_index":316,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/generate",{"_index":627,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["src/auth/providers/hashing.provider",{"_index":559,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["src/auth/providers/hashing.provider.ts",{"_index":732,"title":{},"body":{"injectables/HashingProvider.html":{},"coverage.html":{}}}],["src/auth/providers/hashing.provider.ts:6",{"_index":735,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/hashing.provider.ts:8",{"_index":734,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/refresh",{"_index":1019,"title":{},"body":{"injectables/RefreshTokensProvider.html":{},"coverage.html":{}}}],["src/auth/providers/sign",{"_index":1034,"title":{},"body":{"injectables/SignInProvider.html":{},"coverage.html":{}}}],["src/auth/service/auth.service",{"_index":1188,"title":{},"body":{"injectables/UserService.html":{}}}],["src/auth/service/auth.service.ts",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/service/auth.service.ts:10",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/service/auth.service.ts:17",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/service/auth.service.ts:22",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/social/dtos/google",{"_index":722,"title":{},"body":{"classes/GoogleTokenDto.html":{},"coverage.html":{}}}],["src/auth/social/google",{"_index":682,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"coverage.html":{}}}],["src/auth/social/providers/google",{"_index":694,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["src/common/interceptors/data",{"_index":590,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["src/common/pagination/dtos/pagination",{"_index":668,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["src/common/pagination/interfaces/paginated.interface",{"_index":979,"title":{},"body":{"injectables/PostService.html":{}}}],["src/common/pagination/interfaces/paginated.interface.ts",{"_index":789,"title":{},"body":{"interfaces/Paginated.html":{},"coverage.html":{}}}],["src/common/pagination/pagination.module",{"_index":964,"title":{},"body":{"modules/PostModule.html":{}}}],["src/common/pagination/pagination.module.ts",{"_index":804,"title":{},"body":{"modules/PaginationModule.html":{}}}],["src/common/pagination/providers/pagination.provider",{"_index":978,"title":{},"body":{"injectables/PostService.html":{}}}],["src/common/pagination/providers/pagination.provider.ts",{"_index":806,"title":{},"body":{"injectables/PaginationProvider.html":{},"coverage.html":{}}}],["src/common/pagination/providers/pagination.provider.ts:15",{"_index":811,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["src/common/pagination/providers/pagination.provider.ts:9",{"_index":809,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["src/main.ts",{"_index":1311,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/meta",{"_index":476,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["src/post/dtos/create",{"_index":371,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/post/dtos/get",{"_index":658,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"coverage.html":{}}}],["src/post/dtos/patch",{"_index":856,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/post/enums/posttype.enum.ts",{"_index":1352,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/post/enums/status.enum.ts",{"_index":1349,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/post/post.controller.ts",{"_index":904,"title":{},"body":{"controllers/PostController.html":{},"coverage.html":{}}}],["src/post/post.controller.ts:17",{"_index":923,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:29",{"_index":916,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:41",{"_index":929,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:46",{"_index":919,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.entity",{"_index":754,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["src/post/post.entity.ts",{"_index":870,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/post/post.entity.ts:12",{"_index":881,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:18",{"_index":896,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:25",{"_index":884,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:33",{"_index":889,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:40",{"_index":890,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:46",{"_index":876,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:52",{"_index":887,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:59",{"_index":880,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:64",{"_index":886,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:74",{"_index":883,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:79",{"_index":874,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:86",{"_index":894,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.module.ts",{"_index":961,"title":{},"body":{"modules/PostModule.html":{}}}],["src/post/services/create",{"_index":480,"title":{},"body":{"injectables/CreatePostProvider.html":{},"coverage.html":{}}}],["src/post/services/post.service.ts",{"_index":967,"title":{},"body":{"injectables/PostService.html":{},"coverage.html":{}}}],["src/post/services/post.service.ts:16",{"_index":970,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/services/post.service.ts:31",{"_index":975,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/services/post.service.ts:50",{"_index":971,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/services/post.service.ts:54",{"_index":973,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/services/post.service.ts:74",{"_index":977,"title":{},"body":{"injectables/PostService.html":{}}}],["src/tags/dtos/create",{"_index":514,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service",{"_index":492,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostService.html":{}}}],["src/tags/providers/tags.service.ts",{"_index":1083,"title":{},"body":{"injectables/TagsService.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service.ts:12",{"_index":1091,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:18",{"_index":1094,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:28",{"_index":1092,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:33",{"_index":1096,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:8",{"_index":1088,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tag.entity",{"_index":900,"title":{},"body":{"entities/Post.html":{}}}],["src/tags/tag.entity.ts",{"_index":1045,"title":{},"body":{"entities/Tag.html":{},"coverage.html":{}}}],["src/tags/tag.entity.ts:15",{"_index":1053,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:23",{"_index":1056,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:29",{"_index":1050,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:35",{"_index":1055,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:42",{"_index":1051,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:45",{"_index":1047,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:48",{"_index":1057,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:51",{"_index":1049,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:56",{"_index":1054,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:7",{"_index":1052,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.controller.ts",{"_index":1059,"title":{},"body":{"controllers/TagsController.html":{},"coverage.html":{}}}],["src/tags/tags.controller.ts:10",{"_index":1062,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:15",{"_index":1063,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:19",{"_index":1066,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.module",{"_index":963,"title":{},"body":{"modules/PostModule.html":{}}}],["src/tags/tags.module.ts",{"_index":1079,"title":{},"body":{"modules/TagsModule.html":{}}}],["src/uploads/providers/uploads.service.ts",{"_index":1115,"title":{},"body":{"injectables/UploadsService.html":{},"coverage.html":{}}}],["src/uploads/uploads.controller.ts",{"_index":1106,"title":{},"body":{"controllers/UploadsController.html":{},"coverage.html":{}}}],["src/uploads/uploads.module.ts",{"_index":1112,"title":{},"body":{"modules/UploadsModule.html":{}}}],["src/users/dtos/create",{"_index":349,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":674,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":866,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/interfaces/google",{"_index":726,"title":{},"body":{"classes/GoogleUser.html":{},"coverage.html":{}}}],["src/users/providers/create",{"_index":324,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/users/providers/find",{"_index":606,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"coverage.html":{}}}],["src/users/providers/user",{"_index":1131,"title":{},"body":{"injectables/UserCreateManyProvider.html":{},"coverage.html":{}}}],["src/users/providers/user.service",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreatePostProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["src/users/providers/user.service.ts",{"_index":1160,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/users/providers/user.service.ts:100",{"_index":1179,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/user.service.ts:104",{"_index":1180,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/user.service.ts:108",{"_index":1172,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/user.service.ts:22",{"_index":1171,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/user.service.ts:39",{"_index":1176,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/user.service.ts:71",{"_index":1182,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/user.service.ts:92",{"_index":1174,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/user.service.ts:96",{"_index":1173,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/user.entity",{"_index":641,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"entities/Post.html":{}}}],["src/users/user.entity.ts",{"_index":1116,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:14",{"_index":1119,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:22",{"_index":1123,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:29",{"_index":1118,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:36",{"_index":1124,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:44",{"_index":1121,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:48",{"_index":1127,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:8",{"_index":1122,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":1224,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:40",{"_index":1251,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:51",{"_index":1235,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:58",{"_index":1232,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:64",{"_index":1253,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":257,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostModule.html":{}}}],["src/users/users.module.ts",{"_index":1290,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":1378,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1381,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":1383,"title":{},"body":{"index.html":{}}}],["startdate",{"_index":661,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{}}}],["started",{"_index":1359,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1371,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1301,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":283,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["status",{"_index":380,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["stay",{"_index":1446,"title":{},"body":{"index.html":{}}}],["steps",{"_index":1394,"title":{},"body":{"index.html":{}}}],["story",{"_index":1353,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["straightforward",{"_index":1407,"title":{},"body":{"index.html":{}}}],["string",{"_index":35,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/BcryptProvider.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"entities/User.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["string(error",{"_index":1155,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["sub",{"_index":93,"title":{},"body":{"interfaces/ActiveUserData.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["successfully",{"_index":951,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["successfully'})@patch",{"_index":928,"title":{},"body":{"controllers/PostController.html":{}}}],["successfully'})@post",{"_index":915,"title":{},"body":{"controllers/PostController.html":{}}}],["summary",{"_index":950,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":1428,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1476,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":185,"title":{},"body":{"modules/AppModule.html":{}}}],["t",{"_index":637,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["table",{"_index":1161,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1316,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":504,"title":{"entities/Tag.html":{}},"body":{"injectables/CreatePostProvider.html":{},"entities/Post.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["tag.dto",{"_index":1067,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tag.dto.ts",{"_index":515,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["tag.dto.ts:10",{"_index":521,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:22",{"_index":524,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:28",{"_index":517,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:33",{"_index":523,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:39",{"_index":519,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.entity",{"_index":1081,"title":{},"body":{"modules/TagsModule.html":{},"injectables/TagsService.html":{}}}],["tag.posts",{"_index":892,"title":{},"body":{"entities/Post.html":{}}}],["tags",{"_index":381,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"entities/Post.html":{},"injectables/PostService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tags.controller",{"_index":1080,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags.length",{"_index":501,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostService.html":{}}}],["tags/providers/tags.service",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["tags/tags.module",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["tagscontroller",{"_index":1058,"title":{"controllers/TagsController.html":{}},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tagsmodule",{"_index":121,"title":{"modules/TagsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules.html":{},"overview.html":{}}}],["tagsrepository",{"_index":1089,"title":{},"body":{"injectables/TagsService.html":{}}}],["tagsservice",{"_index":142,"title":{"injectables/TagsService.html":{}},"body":{"modules/AppModule.html":{},"injectables/CreatePostProvider.html":{},"injectables/PostService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{},"overview.html":{}}}],["take",{"_index":821,"title":{},"body":{"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"index.html":{}}}],["tap",{"_index":601,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["target",{"_index":582,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["test",{"_index":1386,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":1389,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1388,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1384,"title":{},"body":{"index.html":{}}}],["text",{"_index":875,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["thanks",{"_index":1459,"title":{},"body":{"index.html":{}}}],["this.accesstokenguard",{"_index":293,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.appservice.gethello",{"_index":104,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.isauth",{"_index":1197,"title":{},"body":{"injectables/UserService.html":{}}}],["this.authservice.refreshtoken(refreshtokendto",{"_index":244,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signin(signindto",{"_index":241,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authtypeguardmap[type]).flat",{"_index":301,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.configservice.get(\"apiconfig.apiversion",{"_index":604,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["this.configservice.get(\"s3_bucket",{"_index":1200,"title":{},"body":{"injectables/UserService.html":{}}}],["this.creategoogleuserprovider.creategoogleuser(googleuser",{"_index":1222,"title":{},"body":{"injectables/UserService.html":{}}}],["this.createpostprovider.createpost(createpostdto",{"_index":989,"title":{},"body":{"injectables/PostService.html":{}}}],["this.createusersprovider.createuser(createuserdto",{"_index":1218,"title":{},"body":{"injectables/UserService.html":{}}}],["this.datasource.createqueryrunner",{"_index":1141,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["this.extractrequestfromheader(request",{"_index":60,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.findonebygoogleidprvider.findonebygoogleid(googleid",{"_index":1221,"title":{},"body":{"injectables/UserService.html":{}}}],["this.findoneuserbyemailprovider.findonebyemail(email",{"_index":1220,"title":{},"body":{"injectables/UserService.html":{}}}],["this.generatetokenprovider.generatetoken(user",{"_index":1028,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["this.generatetokensprovider.generatetoken(newuser",{"_index":720,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.generatetokensprovider.generatetoken(user",{"_index":718,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/SignInProvider.html":{}}}],["this.googleauthenticationservice.authenticate(googletokendto",{"_index":693,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["this.hashingprovider.comparepassword(signindto.password",{"_index":1041,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.hashingprovider.hashpassword(createuserdto.password",{"_index":576,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.jwtconfiguration",{"_index":67,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.jwtconfiguration.accesstokenttl",{"_index":653,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtconfiguration.audience",{"_index":645,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["this.jwtconfiguration.googleclientid",{"_index":705,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.jwtconfiguration.googleclientsecret",{"_index":707,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.jwtconfiguration.issuer",{"_index":647,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["this.jwtconfiguration.refreshtokenttl",{"_index":656,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtconfiguration.secret",{"_index":649,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["this.jwtservice.signasync",{"_index":643,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtservice.verifyasync(token",{"_index":66,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.jwtservice.verifyasync>(refreshtokendto.refreshtoken",{"_index":1026,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["this.metaoptionrepository.create(createpostdto.metaoptions",{"_index":496,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["this.metaoptionrepository.create(createpostmetaoptionsdto",{"_index":786,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionrepository.delete(post.metaoptions.id",{"_index":992,"title":{},"body":{"injectables/PostService.html":{}}}],["this.metaoptionrepository.find",{"_index":994,"title":{},"body":{"injectables/PostService.html":{}}}],["this.metaoptionrepository.save(metaoption",{"_index":787,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionrepository.save(metaoptions",{"_index":506,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["this.metaoptionservice.create(createpostmetaoptiondto",{"_index":771,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["this.oauthclient",{"_index":708,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.oauthclient.verifyidtoken",{"_index":711,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.paginationprovider.paginatequery",{"_index":987,"title":{},"body":{"injectables/PostService.html":{}}}],["this.postrepository",{"_index":988,"title":{},"body":{"injectables/PostService.html":{}}}],["this.postrepository.create",{"_index":505,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["this.postrepository.delete(id",{"_index":991,"title":{},"body":{"injectables/PostService.html":{}}}],["this.postrepository.find",{"_index":983,"title":{},"body":{"injectables/PostService.html":{}}}],["this.postrepository.findoneby",{"_index":990,"title":{},"body":{"injectables/PostService.html":{}}}],["this.postrepository.save(post",{"_index":508,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostService.html":{}}}],["this.postservice.createpost(createpostdto",{"_index":953,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.delete(id",{"_index":957,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.findall(postquery",{"_index":949,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.update(patchpostdto",{"_index":955,"title":{},"body":{"controllers/PostController.html":{}}}],["this.reflector.getallandoverride(auth_type_key",{"_index":296,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.refreshtokenprovider.refreshtokens(refreshtokendto",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.request.headers.host",{"_index":824,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.request.protocol",{"_index":823,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.signinprovider.signin(signindto",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.signtoken(user.id",{"_index":655,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.signtoken>(user.id",{"_index":652,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.tagsrepository.create(createtagdto",{"_index":1098,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.delete(id",{"_index":1103,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.find",{"_index":1101,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.save(tag",{"_index":1099,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.softdelete(id",{"_index":1104,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsservice.createtags(createtagdto",{"_index":1070,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.delete(id",{"_index":1072,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.findmultpletags(createpostdto.tags",{"_index":498,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["this.tagsservice.findmultpletags(patchpostdto.tags",{"_index":997,"title":{},"body":{"injectables/PostService.html":{}}}],["this.tagsservice.softremove(id",{"_index":1075,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.userreposiory.findoneby",{"_index":622,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["this.userrepository.create",{"_index":575,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.userrepository.create(googleuser",{"_index":342,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["this.userrepository.findone",{"_index":562,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.userrepository.findoneby",{"_index":613,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"injectables/UserService.html":{}}}],["this.userrepository.save(newuser",{"_index":577,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.userrepository.save(user",{"_index":343,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["this.userscreatemanyprovider.createmany(createmanyusersdto",{"_index":1219,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.creategoogleuser",{"_index":719,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.userservice.createmany(createmanyusersdto",{"_index":1285,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.createuser(createuserdto",{"_index":1283,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.findall(getusersparamdto",{"_index":1276,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.findonebyemail(signindto.email",{"_index":1038,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.userservice.findonebygoogleid(googleid",{"_index":717,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.userservice.findonebyid(+userid",{"_index":981,"title":{},"body":{"injectables/PostService.html":{}}}],["this.userservice.findonebyid(sub",{"_index":1027,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["this.userservice.findonebyid(user.sub",{"_index":499,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["throw",{"_index":61,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["thrown",{"_index":415,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["time",{"_index":1442,"title":{},"body":{"index.html":{}}}],["timestamp",{"_index":885,"title":{},"body":{"entities/Post.html":{}}}],["title",{"_index":382,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["token",{"_index":59,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/GoogleTokenDto.html":{}}}],["token.dto",{"_index":236,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["token.dto.ts",{"_index":723,"title":{},"body":{"classes/GoogleTokenDto.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["token.dto.ts:6",{"_index":725,"title":{},"body":{"classes/GoogleTokenDto.html":{},"classes/RefreshTokenDto.html":{}}}],["token.guard",{"_index":159,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["token.guard.ts",{"_index":7,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{}}}],["token.guard.ts:10",{"_index":20,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:15",{"_index":28,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:33",{"_index":34,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["tokens",{"_index":242,"title":{},"body":{"controllers/AuthController.html":{}}}],["tokens')@httpcode(httpstatus.ok)@auth(authtype.none",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{}}}],["tokens.provider",{"_index":264,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["tokens.provider.ts",{"_index":628,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{},"coverage.html":{}}}],["tokens.provider.ts:11",{"_index":1022,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["tokens.provider.ts:17",{"_index":638,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["tokens.provider.ts:20",{"_index":1024,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["tokens.provider.ts:30",{"_index":634,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["tokens.provider.ts:9",{"_index":632,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["totalitems",{"_index":793,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["totalpages",{"_index":795,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["touch",{"_index":1467,"title":{},"body":{"index.html":{}}}],["transaction",{"_index":1154,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["transformer",{"_index":366,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{},"entities/User.html":{},"dependencies.html":{}}}],["true",{"_index":72,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{}}}],["true})@apipropertyoptional({description",{"_index":438,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@exclude",{"_index":1120,"title":{},"body":{"entities/User.html":{}}}],["true})@jointable",{"_index":893,"title":{},"body":{"entities/Post.html":{}}}],["true})@type(undefined",{"_index":359,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{}}}],["try",{"_index":63,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["twitter",{"_index":1472,"title":{},"body":{"index.html":{}}}],["two",{"_index":76,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["type",{"_index":24,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["type.ts",{"_index":1346,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typeof",{"_index":583,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["typeorm",{"_index":336,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"entities/MetaOption.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"entities/Post.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([metaoption",{"_index":777,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["typeormmodule.forfeature([post",{"_index":966,"title":{},"body":{"modules/PostModule.html":{}}}],["typeormmodule.forfeature([tag",{"_index":1082,"title":{},"body":{"modules/TagsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":1296,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":869,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":1370,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":40,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["unauthorizedexception(\"incorrect",{"_index":1044,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["unauthorizedexception(\"use",{"_index":625,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["unauthorizedexception(error",{"_index":721,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["undefined",{"_index":36,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"entities/Post.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["undefined})@isnotempty()@isarray()@validatenested({each",{"_index":358,"title":{},"body":{"classes/CreateManyUsersDTO.html":{}}}],["undefined})@isoptional()@validatenested({each",{"_index":397,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unique",{"_index":510,"title":{},"body":{"injectables/CreatePostProvider.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["unit",{"_index":1385,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["unlicensed",{"_index":1484,"title":{},"body":{"properties.html":{}}}],["update",{"_index":969,"title":{},"body":{"injectables/PostService.html":{}}}],["update(patchpostdto",{"_index":976,"title":{},"body":{"injectables/PostService.html":{}}}],["updated",{"_index":864,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostController.html":{}}}],["updated'})@isint()@isnotempty",{"_index":861,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["updatedate",{"_index":740,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatedatecolumn",{"_index":752,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatepost",{"_index":907,"title":{},"body":{"controllers/PostController.html":{}}}],["updatepost(@body",{"_index":954,"title":{},"body":{"controllers/PostController.html":{}}}],["updatepost(patchpostdto",{"_index":924,"title":{},"body":{"controllers/PostController.html":{}}}],["updates",{"_index":925,"title":{},"body":{"controllers/PostController.html":{},"index.html":{}}}],["uploads",{"_index":1107,"title":{},"body":{"controllers/UploadsController.html":{}}}],["uploads.controller",{"_index":1113,"title":{},"body":{"modules/UploadsModule.html":{}}}],["uploads/uploads.module",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["uploadscontroller",{"_index":1105,"title":{"controllers/UploadsController.html":{}},"body":{"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"coverage.html":{}}}],["uploadsmodule",{"_index":122,"title":{"modules/UploadsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UploadsModule.html":{},"modules.html":{},"overview.html":{}}}],["uploadsservice",{"_index":1111,"title":{"injectables/UploadsService.html":{}},"body":{"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"coverage.html":{},"overview.html":{}}}],["uppercase",{"_index":543,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["url",{"_index":420,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["url'})@maxlength(256",{"_index":430,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["url(this.request.url",{"_index":826,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["useclass",{"_index":199,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["usefactory",{"_index":180,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards",{"_index":1259,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(accesstokenguard",{"_index":1268,"title":{},"body":{"controllers/UsersController.html":{}}}],["useinterceptors",{"_index":1260,"title":{},"body":{"controllers/UsersController.html":{}}}],["useinterceptors(classserializerinterceptor",{"_index":1281,"title":{},"body":{"controllers/UsersController.html":{}}}],["user",{"_index":89,"title":{"entities/User.html":{}},"body":{"interfaces/ActiveUserData.html":{},"modules/AppModule.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDTO.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetUsersParamDto.html":{},"injectables/GoogleAuthenticationService.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.decorator",{"_index":945,"title":{},"body":{"controllers/PostController.html":{}}}],["user.decorator.ts",{"_index":1307,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":365,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"injectables/CreateUserProvider.html":{},"classes/PatchUserDto.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["user.dto.ts",{"_index":351,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:14",{"_index":533,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:18",{"_index":360,"title":{},"body":{"classes/CreateManyUsersDTO.html":{}}}],["user.dto.ts:20",{"_index":529,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:28",{"_index":548,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:8",{"_index":531,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":654,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["user.entity",{"_index":337,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["user.interface",{"_index":340,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/UserService.html":{}}}],["user.interface.ts",{"_index":727,"title":{},"body":{"classes/GoogleUser.html":{},"coverage.html":{}}}],["user.interface.ts:2",{"_index":728,"title":{},"body":{"classes/GoogleUser.html":{}}}],["user.interface.ts:3",{"_index":729,"title":{},"body":{"classes/GoogleUser.html":{}}}],["user.interface.ts:4",{"_index":731,"title":{},"body":{"classes/GoogleUser.html":{}}}],["user.interface.ts:5",{"_index":730,"title":{},"body":{"classes/GoogleUser.html":{}}}],["user.password",{"_index":1042,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["user.posts",{"_index":872,"title":{},"body":{"entities/Post.html":{}}}],["user.provider",{"_index":1192,"title":{},"body":{"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["user.provider.ts",{"_index":326,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["user.provider.ts:14",{"_index":334,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["user.provider.ts:16",{"_index":557,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.provider.ts:8",{"_index":330,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["user.provider.ts:9",{"_index":555,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.service.ts",{"_index":1212,"title":{},"body":{"injectables/UserService.html":{}}}],["user?.[field",{"_index":1495,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usercreatemanyprovider",{"_index":1130,"title":{"injectables/UserCreateManyProvider.html":{}},"body":{"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["userid",{"_index":639,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["username",{"_index":189,"title":{},"body":{"modules/AppModule.html":{}}}],["userreposiory",{"_index":619,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["userrepository",{"_index":331,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/UserService.html":{}}}],["users",{"_index":352,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/GetUsersParamDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["users.controller",{"_index":1291,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/user.entity",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.module",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":1223,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userscreatemanyprovider",{"_index":1168,"title":{},"body":{"injectables/UserService.html":{}}}],["userservice",{"_index":272,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/CreatePostProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["usersmodule",{"_index":123,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["uses",{"_index":427,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["using",{"_index":1185,"title":{},"body":{"injectables/UserService.html":{},"index.html":{}}}],["validatenested",{"_index":363,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{}}}],["validation",{"_index":414,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validationpipe",{"_index":1261,"title":{},"body":{"controllers/UsersController.html":{}}}],["validationschema",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":364,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GoogleTokenDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"dependencies.html":{}}}],["value",{"_index":842,"title":{},"body":{"classes/PaginationQueryDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":401,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["varchar",{"_index":877,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["variable",{"_index":1303,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1485,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":1482,"title":{},"body":{"properties.html":{}}}],["video",{"_index":1435,"title":{},"body":{"index.html":{}}}],["visit",{"_index":1425,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":1438,"title":{},"body":{"index.html":{}}}],["void",{"_index":587,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["want",{"_index":1250,"title":{},"body":{"controllers/UsersController.html":{}}}],["watch",{"_index":1379,"title":{},"body":{"index.html":{}}}],["website",{"_index":1470,"title":{},"body":{"index.html":{}}}],["without",{"_index":428,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["working",{"_index":1424,"title":{},"body":{"index.html":{}}}],["world",{"_index":204,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":1449,"title":{},"body":{"index.html":{}}}],["yes",{"_index":640,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["you'd",{"_index":1463,"title":{},"body":{"index.html":{}}}],["you're",{"_index":1390,"title":{},"body":{"index.html":{}}}],["z0",{"_index":422,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["z\\d@$!%*#?&]{8",{"_index":537,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*#?&])[a",{"_index":536,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":535,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"guards/AccessTokenGuard.html":{"url":"guards/AccessTokenGuard.html","title":"guard - AccessTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/access-token.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                extractRequestFromHeader\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/access-token.guard.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/access-token.guard.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractRequestFromHeader\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractRequestFromHeader(request: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/access-token.guard.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Inject, Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { Observable } from 'rxjs';\nimport jwtConfig from '../config/jwt.config';\nimport { Request } from 'express';\nimport { REQUEST_USER_KEY } from '../constants/auth.constants';\n\n@Injectable()\nexport class AccessTokenGuard implements CanActivate {\n\n  constructor(private readonly jwtService: JwtService,\n    @Inject(jwtConfig.KEY) private readonly jwtConfiguration: ConfigType\n  ) { }\n  async canActivate(\n    context: ExecutionContext,\n  ): Promise {\n    const request = context.switchToHttp().getRequest();\n    const token = this.extractRequestFromHeader(request)\n    if (!token) {\n      throw new UnauthorizedException(\"\")\n    }\n\n    try {\n      const payload = await this.jwtService.verifyAsync(token, this.jwtConfiguration)\n      request[REQUEST_USER_KEY] = payload\n    } catch (error) {\n      throw new UnauthorizedException()\n    }\n    return true;\n  }\n\n  private extractRequestFromHeader(request: Request): string | undefined {\n    const [_, token] = request.headers.authorization?.split(' ') ?? [] //this line get the two part of the header bearer and token when split the string from the space between them\n    return token;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ActiveUserData.html":{"url":"interfaces/ActiveUserData.html","title":"interface - ActiveUserData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ActiveUserData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/active-user-data.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ActiveUserData {\n\n    //sub is the id of the user in the database\n    sub: number;\n    email: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) { }\n\n  /* @Get()\n   getHello(): string {\n     return this.appService.getHello();\n   }*/\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nPostModule\n\nPostModule\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUploadsModule\n\nUploadsModule\n\nAppModule -->\n\nUploadsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            MetaOptionsModule\n                        \n                        \n                            PaginationModule\n                        \n                        \n                            PostModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UploadsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostModule } from './post/post.module';\nimport { PostService } from './post/services/post.service';\nimport { AuthModule } from './auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './users/user.entity';\nimport { TagsModule } from './tags/tags.module';\nimport { MetaOptionsModule } from './meta-options/meta-options.module';\nimport { TagsService } from './tags/providers/tags.service';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { PaginationModule } from './common/pagination/pagination.module';\nimport appConfig from './config/app.config';\nimport databaseConfig from './config/database.config';\nimport environmentValidation from './config/environment.validation';\nimport { JwtModule } from '@nestjs/jwt';\nimport jwtConfig from './auth/config/jwt.config';\nimport { APP_GUARD, APP_INTERCEPTOR } from '@nestjs/core';\nimport { AccessTokenGuard } from './auth/guards/access-token.guard';\nimport { AuthenticationGuard } from './auth/guards/authentication.guard';\nimport { CreatePostProvider } from './post/services/create-post.provider';\nimport { DataResponseInterceptor } from './common/interceptors/data-response/data-response.interceptor';\nimport { UploadsModule } from './uploads/uploads.module';\n\nconst ENV = process.env.NODE_ENV;\n@Module({\n  imports: [UsersModule, PostModule, AuthModule, TagsModule, ConfigModule.forRoot({\n    isGlobal: true,\n    //envFilePath: ['.env.development']\n    envFilePath: !ENV ? '.env' : `.env.${ENV}`,\n    load: [appConfig, databaseConfig],\n    validationSchema: environmentValidation\n  }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        //entities: [User],\n        autoLoadEntities: configService.get('database.autoLoadEntities'),\n        synchronize: configService.get('database.synchronize'),\n        port: +configService.get('database.port'),\n        username: configService.get('database.user'),\n        password: configService.get('database.password'),\n        host: configService.get('database.host'),\n        database: configService.get('database.name'),\n      })\n\n    }),\n\n    ConfigModule.forFeature(jwtConfig),\n    JwtModule.registerAsync(jwtConfig.asProvider()),\n    TagsModule,\n    MetaOptionsModule,\n    PaginationModule,\n    UploadsModule],\n  controllers: [AppController],\n  providers: [AppService,\n    {\n      provide: APP_GUARD,\n      useClass: AuthenticationGuard\n    },\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: DataResponseInterceptor\n    },\n    AccessTokenGuard,\n\n  ],\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World NestJs!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                refreshToken\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                            Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshToken(refreshTokenDto: RefreshTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('refresh-tokens')@HttpCode(HttpStatus.OK)@Auth(AuthType.none)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshTokenDto\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signinDto: SignInDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('sign-in')@HttpCode(HttpStatus.OK)@Auth(AuthType.none)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signinDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, HttpCode, HttpStatus, Post } from '@nestjs/common';\nimport { AuthService } from './service/auth.service';\nimport { SignInDto } from './dtos/signin.dto';\nimport { Auth } from './decorators/auth.decorator';\nimport { AuthType } from './enums/auth-type';\nimport { RefreshTokenDto } from './dtos/refresh-token.dto';\n\n@Controller('auth')\nexport class AuthController {\n\n    constructor(private readonly authService: AuthService) { }\n\n    @Post('sign-in')\n    @HttpCode(HttpStatus.OK)\n    @Auth(AuthType.none)\n    public async signIn(@Body() signinDto: SignInDto) {\n        return this.authService.signIn(signinDto)\n    }\n\n    @Post('refresh-tokens')\n    @HttpCode(HttpStatus.OK)\n    @Auth(AuthType.none)\n    public async refreshToken(@Body() refreshTokenDto: RefreshTokenDto) {\n        return this.authService.refreshToken(refreshTokenDto)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nHashingProvider \n\nHashingProvider \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGenerateTokensProvider\n\nGenerateTokensProvider\n\nAuthModule -->\n\nGenerateTokensProvider->AuthModule\n\n\n\n\n\nGoogleAuthenticationService\n\nGoogleAuthenticationService\n\nAuthModule -->\n\nGoogleAuthenticationService->AuthModule\n\n\n\n\n\nRefreshTokensProvider\n\nRefreshTokensProvider\n\nAuthModule -->\n\nRefreshTokensProvider->AuthModule\n\n\n\n\n\nSignInProvider\n\nSignInProvider\n\nAuthModule -->\n\nSignInProvider->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            GenerateTokensProvider\n                        \n                        \n                            GoogleAuthenticationService\n                        \n                        \n                            RefreshTokensProvider\n                        \n                        \n                            SignInProvider\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                        \n                            GoogleAuthenticationController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            HashingProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthService } from './service/auth.service';\nimport { AuthController } from './auth.controller';\nimport { UsersModule } from 'src/users/users.module';\nimport { HashingProvider } from './providers/hashing.provider';\nimport { BcryptProvider } from './providers/bcrypt.provider';\nimport { SignInProvider } from './providers/sign-in.provider';\nimport { ConfigModule } from '@nestjs/config';\nimport jwtConfig from './config/jwt.config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { GenerateTokensProvider } from './providers/generate-tokens.provider';\nimport { RefreshTokensProvider } from './providers/refresh-tokens.provider';\nimport { GoogleAuthenticationController } from './social/google-authentication.controller';\nimport { GoogleAuthenticationService } from './social/providers/google-authentication.service';\n\n@Module({\n  providers: [AuthService, {\n    provide: HashingProvider,\n    useClass: BcryptProvider\n  }, SignInProvider, GenerateTokensProvider, RefreshTokensProvider, GoogleAuthenticationService],\n  controllers: [AuthController, GoogleAuthenticationController],\n  imports: [forwardRef(() => UsersModule),\n  ConfigModule.forFeature(jwtConfig),\n  JwtModule.registerAsync(jwtConfig.asProvider())],\n  exports: [AuthService, HashingProvider]\n})\nexport class AuthModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/service/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                refreshToken\n                            \n                            \n                                    Public\n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, signInProvider: SignInProvider, refreshTokenProvider: RefreshTokensProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/service/auth.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        signInProvider\n                                                  \n                                                        \n                                                                        SignInProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        refreshTokenProvider\n                                                  \n                                                        \n                                                                        RefreshTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshToken(refreshTokenDto: RefreshTokenDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/service/auth.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshTokenDto\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/service/auth.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { UserService } from 'src/users/providers/user.service';\nimport { SignInDto } from '../dtos/signin.dto';\nimport { SignInProvider } from '../providers/sign-in.provider';\nimport { RefreshTokenDto } from '../dtos/refresh-token.dto';\nimport { GenerateTokensProvider } from '../providers/generate-tokens.provider';\nimport { RefreshTokensProvider } from '../providers/refresh-tokens.provider';\n\n@Injectable()\nexport class AuthService {\n\n    constructor(@Inject(forwardRef(() => UserService)) private readonly userService: UserService,\n        private readonly signInProvider: SignInProvider,\n        private readonly refreshTokenProvider: RefreshTokensProvider\n\n    ) { }\n    public async signIn(signInDto: SignInDto) {\n        return await this.signInProvider.signIn(signInDto)\n    }\n\n\n    public async refreshToken(refreshTokenDto: RefreshTokenDto) {\n        return await this.refreshTokenProvider.refreshTokens(refreshTokenDto)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthenticationGuard.html":{"url":"guards/AuthenticationGuard.html","title":"guard - AuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/authentication.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                authTypeGuardMap\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                defaultAuthType\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, accessTokenGuard: AccessTokenGuard)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/authentication.guard.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accessTokenGuard\n                                                  \n                                                        \n                                                                        AccessTokenGuard\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/authentication.guard.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable, UnauthorizedException } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Observable } from 'rxjs';\nimport { AccessTokenGuard } from './access-token.guard';\nimport { AuthType } from '../enums/auth-type';\nimport { AUTH_TYPE_KEY } from '../constants/auth.constants';\n\n@Injectable()\nexport class AuthenticationGuard implements CanActivate {\n\n  private static readonly defaultAuthType = AuthType.Bearer;\n\n  private readonly authTypeGuardMap: Record = {\n    [AuthType.Bearer]: this.accessTokenGuard,\n    [AuthType.none]: { canActivate: () => true }\n  }\n  constructor(private readonly reflector: Reflector,\n    private readonly accessTokenGuard: AccessTokenGuard\n  ) { }\n  async canActivate(\n    context: ExecutionContext,\n  ): Promise {\n\n    const authTypes = this.reflector.getAllAndOverride(AUTH_TYPE_KEY, [context.getHandler(), context.getClass()]) ?? [AuthenticationGuard.defaultAuthType]\n    const guards = authTypes.map((type) => this.authTypeGuardMap[type]).flat()\n    const error = new UnauthorizedException()\n\n    for (const instance of guards) {\n      const canActivate = await Promise.resolve(\n\n        instance.canActivate(context)\n      ).catch((error) => {\n        eror: error;\n      })\n\n      if (canActivate) {\n        return true;\n      }\n    }\n    throw error;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BcryptProvider.html":{"url":"injectables/BcryptProvider.html","title":"injectable - BcryptProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BcryptProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/bcrypt.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                comparePassword\n                            \n                            \n                                    Public\n                                    Async\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        comparePassword\n                        \n                    \n                \n            \n            \n                \ncomparePassword(data: string | Buffer, encrypted: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.provider.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encrypted\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(data: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.provider.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { HashingProvider } from './hashing.provider';\nimport * as bcrypt from 'bcrypt';\n@Injectable()\nexport class BcryptProvider implements HashingProvider {\n    public async hashPassword(data: string | Buffer): Promise {\n        const salt = await bcrypt.genSalt();\n        return bcrypt.hash(data, salt)\n\n    }\n    comparePassword(data: string | Buffer, encrypted: string): Promise {\n        return bcrypt.compare(data, encrypted)\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateGoogleUserProvider.html":{"url":"injectables/CreateGoogleUserProvider.html","title":"injectable - CreateGoogleUserProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateGoogleUserProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/create-google-user.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createGoogleUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/create-google-user.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createGoogleUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createGoogleUser(googleUser: GoogleUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/create-google-user.provider.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleUser\n                                            \n                                                            GoogleUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { GoogleUser } from '../interfaces/google-user.interface';\n\n@Injectable()\nexport class CreateGoogleUserProvider {\n\n    constructor(\n        @InjectRepository(User) private userRepository: Repository\n    ) { }\n\n    public async createGoogleUser(googleUser: GoogleUser) {\n        try {\n            const user = this.userRepository.create(googleUser);\n            return await this.userRepository.save(user)\n        } catch (error) {\n            throw new ConflictException(error, {\n                description: 'could not create a new user'\n            })\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateManyUsersDTO.html":{"url":"classes/CreateManyUsersDTO.html","title":"class - CreateManyUsersDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateManyUsersDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-many-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateUserDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'array', required: true, items: undefined})@IsNotEmpty()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-many-user.dto.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsNotEmpty, ValidateNested } from \"class-validator\";\nimport { CreateUserDto } from \"./create-user.dto\";\nimport { Type } from \"class-transformer\";\nimport { ApiProperty } from \"@nestjs/swagger\";\n\nexport class CreateManyUsersDTO {\n    @ApiProperty({\n        type: 'array',\n        required: true,\n        items: {\n            type: 'User'\n        }\n    })\n    @IsNotEmpty()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CreateUserDto)\n    users: CreateUserDto[]\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dtos/create-post.dtos.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({description: 'This is the content of the post', example: 'the post content'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsUrl()@MaxLength(1024)@ApiPropertyOptional({description: 'featured image for your blog post', example: 'http://localhost.com/images/image1.jpg'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionsDto | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ApiPropertyOptional({type: 'object', required: false, items: undefined})@IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:115\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(postType)@IsNotEmpty()@ApiProperty({enum: postType, description: 'Possible values, 'POST', 'PAGE','STORY','SERIES''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsISO8601()@IsOptional()@ApiPropertyOptional({description: 'The date on which the blog post is published', example: '2024-03-16T07:46:32+0000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsJSON()@ApiPropertyOptional({description: 'Serialize your JSON object else a validation error will be thrown', example: '{\n \"@context\": \"https://schema.org\",\n \"@type\": \"Person\"\n}'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty({description: 'For example - 'my-url'', example: 'my-blog-post'})@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url'})@MaxLength(256)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(postStatus)@IsNotEmpty()@ApiProperty({enum: postStatus, description: ' Possible values, 'DRAFT', 'SCHEDULED','REVIEW', 'PUBLISHED''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()@IsInt({each: true})@ApiPropertyOptional({description: 'Array of ids of tags', example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'This is a title', description: 'this is the title of the blog post'})@IsString()@MinLength(4)@MaxLength(512)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsEnum, IsInt, IsISO8601, IsJSON, IsNotEmpty, IsOptional, IsString, IsUrl, Matches, MaxLength, MinLength, ValidateNested } from \"class-validator\";\nimport { postType } from \"../enums/postType.enum\";\nimport { postStatus } from \"../enums/status.enum\";\nimport { CreatePostMetaOptionsDto } from \"../../meta-options/dtos/create-post-meta-option.dtos\";\nimport { Type } from \"class-transformer\";\nimport { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\n\nexport class CreatePostDto {\n    @ApiProperty({\n        example: \"This is a title\",\n        description: \"this is the title of the blog post\"\n    })\n    @IsString()\n    @MinLength(4)\n    @MaxLength(512)\n    @IsNotEmpty()\n    title: string;\n\n    @IsEnum(postType)\n    @IsNotEmpty()\n    @ApiProperty({\n        enum: postType,\n        description: \"Possible values, 'POST', 'PAGE','STORY','SERIES'\",\n    })\n    postType: postType;\n    @IsString()\n    @IsOptional()\n    @ApiPropertyOptional({\n        description: \"This is the content of the post\",\n        example: \"the post content\"\n    })\n    content?: string;\n\n    @IsString()\n    @IsNotEmpty()\n    @ApiProperty({\n        description: \"For example - 'my-url'\",\n        example: \"my-blog-post\"\n    })\n    @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n        message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url'\n    })\n    @MaxLength(256)\n    slug: string;\n\n\n    @IsEnum(postStatus)\n    @IsNotEmpty()\n    @ApiProperty({\n        enum: postStatus,\n        description: \" Possible values, 'DRAFT', 'SCHEDULED','REVIEW', 'PUBLISHED'\"\n    })\n    status: postStatus;\n\n    @IsOptional()\n    @IsJSON()\n    @ApiPropertyOptional({\n        description: \"Serialize your JSON object else a validation error will be thrown\",\n        example: \"{\\r\\n \\\"@context\\\": \\\"https:\\/\\/schema.org\\\",\\r\\n \\\"@type\\\": \\\"Person\\\"\\r\\n}\"\n    })\n    schema?: string;\n\n\n    @IsOptional()\n    @IsUrl()\n    @MaxLength(1024)\n    @ApiPropertyOptional({\n        description: \"featured image for your blog post\",\n        example: \"http://localhost.com/images/image1.jpg\"\n    })\n    featuredImageUrl?: string;\n\n\n    @IsISO8601()\n    @IsOptional()\n    @ApiPropertyOptional({\n        description: \"The date on which the blog post is published\",\n        example: \"2024-03-16T07:46:32+0000\",\n    })\n    publishOn?: Date;\n\n\n    @IsOptional()\n    @IsArray()\n    @IsInt({\n        each: true\n    })\n    @ApiPropertyOptional({\n        description: \"Array of ids of tags\",\n        example: [1, 2],\n    })\n    tags?: number[];\n\n\n\n    @IsOptional()\n    @ApiPropertyOptional({\n        type: 'object',\n        required: false,\n        items: {\n            type: 'object',\n            properties: {\n                metaValue: {\n                    type: 'json',\n                    description: 'The metaValue is JSON string',\n                    example: '{\"sidebarEnabled\":true}'\n                }\n            }\n        }\n    })\n\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => CreatePostMetaOptionsDto)\n    metaOptions?: CreatePostMetaOptionsDto | null;\n\n    /*@IsInt()\n    @IsNotEmpty()\n    @ApiProperty({\n        type: 'integer',\n        required: true,\n        example: 1\n    })\n    authorId: number;*/\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto.html":{"url":"classes/CreatePostMetaOptionsDto.html","title":"class - CreatePostMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/dtos/create-post-meta-option.dtos.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                metaValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/dtos/create-post-meta-option.dtos.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsJSON, IsNotEmpty, IsString } from \"class-validator\";\n\nexport class CreatePostMetaOptionsDto {\n    @IsNotEmpty()\n    @IsJSON()\n    metaValue: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreatePostProvider.html":{"url":"injectables/CreatePostProvider.html","title":"injectable - CreatePostProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreatePostProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/services/create-post.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createPost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postRepository: Repository, tagsService: TagsService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/post/services/create-post.provider.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tagsService\n                                                  \n                                                        \n                                                                        TagsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto, user: ActiveUserData)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/services/create-post.provider.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            ActiveUserData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, ConflictException, Injectable } from '@nestjs/common';\nimport { CreatePostDto } from '../dtos/create-post.dtos';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Post } from '../post.entity';\nimport { TagsService } from 'src/tags/providers/tags.service';\nimport { UserService } from 'src/users/providers/user.service';\nimport { ActiveUserData } from 'src/auth/interfaces/active-user-data.interface';\n\n@Injectable()\nexport class CreatePostProvider {\n\n    constructor(\n        @InjectRepository(Post) private readonly postRepository: Repository,\n        private readonly tagsService: TagsService,\n        private readonly userService: UserService,\n\n\n    ) { }\n    public async createPost(createPostDto: CreatePostDto, user: ActiveUserData) {\n        //let metaOptions = createPostDto.metaOptions ? this.metaOptionRepository.create(createPostDto.metaOptions) : null\n        let author = undefined;\n        let tags = undefined;\n        try {\n            tags = await this.tagsService.findMultpleTags(createPostDto.tags)\n            author = await this.userService.findOneById(user.sub);\n        } catch (error) {\n            throw new ConflictException(error)\n        }\n\n        if (createPostDto.tags.length === tags.length) {\n            throw new BadRequestException(\"please checks your tag  ids\")\n        }\n        let post = this.postRepository.create({\n            ...createPostDto,\n            author: author,\n            tags: tags\n        })\n        /*\n        if (metaOptions) {\n                    await this.metaOptionRepository.save(metaOptions);\n                }\n                if (metaOptions) {\n                    post.metaOptions = metaOptions\n                }*/\n        try {\n\n            return await this.postRepository.save(post)\n        } catch (error) {\n            throw new ConflictException(error, {\n                description: \" ensure post slug is unique inside and not duplicate\"\n            })\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagDto.html":{"url":"classes/CreateTagDto.html","title":"class - CreateTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/dtos/create-tag.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsUrl()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@MinLength(3)@IsNotEmpty()@MaxLength(256)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty({description: 'For example - 'my-url'', example: 'my-blog-post'})@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url'})@MaxLength(256)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsJSON, IsNotEmpty, IsOptional, IsString, IsUrl, Matches, MaxLength, MinLength } from \"class-validator\";\n\nexport class CreateTagDto {\n    @ApiProperty()\n    @IsString()\n    @MinLength(3)\n    @IsNotEmpty()\n    @MaxLength(256)\n    name: string;\n\n    @IsString()\n    @IsNotEmpty()\n    @ApiProperty({\n        description: \"For example - 'my-url'\",\n        example: \"my-blog-post\"\n    })\n    @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n        message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url'\n    })\n    @MaxLength(256)\n    slug: string;\n\n\n    @ApiPropertyOptional()\n    @IsOptional()\n    @IsString()\n    description?: string;\n\n    @ApiPropertyOptional()\n    @IsOptional()\n    @IsJSON()\n    schema?: string;\n\n    @ApiPropertyOptional()\n    @IsOptional()\n    @IsUrl()\n    @MaxLength(1024)\n    featuredImageUrl?: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsEmail()@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {message: 'Password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, one number, and one special character.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsOptional, IsString, Matches, MaxLength, MinLength } from \"class-validator\";\n\nexport class CreateUserDto {\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(3)\n    @MaxLength(96)\n    firstName: string;\n\n    @IsString()\n    @IsOptional()\n    @MinLength(3)\n    @MaxLength(96)\n    lastName?: string;\n\n    @IsString()\n    @IsNotEmpty()\n    @IsEmail()\n    @MaxLength(96)\n    email: string;\n\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(8)\n    @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {\n        message: 'Password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, one number, and one special character.'\n    })\n    password: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateUserProvider.html":{"url":"injectables/CreateUserProvider.html","title":"injectable - CreateUserProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateUserProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/create-user.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, hashingProvider: HashingProvider)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/create-user.provider.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/create-user.provider.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, forwardRef, Inject, Injectable, RequestTimeoutException } from '@nestjs/common';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { HashingProvider } from 'src/auth/providers/hashing.provider';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class CreateUserProvider {\n\n    constructor(\n        @InjectRepository(User) private readonly userRepository: Repository,\n        @Inject(forwardRef(() => HashingProvider)) private readonly hashingProvider: HashingProvider\n    ) { }\n\n    public async createUser(createUserDto: CreateUserDto) {\n        let existingUser = undefined;\n        try {\n            existingUser = await this.userRepository.findOne({\n                where: {\n                    email: createUserDto.email\n                }\n            })\n\n        } catch (error) {\n            throw new RequestTimeoutException('Unable to process your request at the moment please try later', {\n                description: 'Error connectiong to the database'\n            })\n        }\n\n        if (existingUser) {\n            throw new BadRequestException('The user already exists, please check your email.')\n        }\n        let newUser = this.userRepository.create({\n            ...createUserDto,\n            password: await this.hashingProvider.hashPassword(createUserDto.password)\n        });\n\n        try {\n            newUser = await this.userRepository.save(newUser)\n        } catch (err) {\n            throw new RequestTimeoutException('Unable to process your request at the moment please try later', {\n                description: 'Error connecting to the database'\n            })\n        }\n        return newUser\n    }\n}\nfunction InejectRepository(): (target: typeof CreateUserProvider, propertyKey: undefined, parameterIndex: 0) => void {\n    throw new Error('Function not implemented.');\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DataResponseInterceptor.html":{"url":"injectables/DataResponseInterceptor.html","title":"injectable - DataResponseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DataResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/data-response/data-response.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/common/interceptors/data-response/data-response.interceptor.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptors/data-response/data-response.interceptor.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CallHandler, ExecutionContext, Injectable, NestInterceptor } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { map, Observable, tap } from 'rxjs';\n\n@Injectable()\nexport class DataResponseInterceptor implements NestInterceptor {\n\n  constructor(private readonly configService: ConfigService) { }\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(map((data) => ({\n      apiVersion: this.configService.get(\"apiConfig.apiVersion\"),\n      data: data,\n    })));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindOneByGoogleIdProvider.html":{"url":"injectables/FindOneByGoogleIdProvider.html","title":"injectable - FindOneByGoogleIdProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindOneByGoogleIdProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/find-one-by-google-id.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                findOneByGoogleId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/find-one-by-google-id.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByGoogleId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByGoogleId(googleId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/find-one-by-google-id.provider.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class FindOneByGoogleIdProvider {\n    constructor(\n        @InjectRepository(User) private readonly userRepository: Repository\n    ) { }\n\n    public async findOneByGoogleId(googleId: string) {\n        return this.userRepository.findOneBy({ googleId: googleId })\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindOneUserByEmailProvider.html":{"url":"injectables/FindOneUserByEmailProvider.html","title":"injectable - FindOneUserByEmailProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindOneUserByEmailProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/find-one-user-by-email.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                findOneByEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userReposiory: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/find-one-user-by-email.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userReposiory\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/find-one-user-by-email.provider.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, RequestTimeoutException, UnauthorizedException } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class FindOneUserByEmailProvider {\n\n    constructor(\n        @InjectRepository(User) private readonly userReposiory: Repository\n    ) { }\n\n    public async findOneByEmail(email: string) {\n        let user: User | undefined = undefined;\n\n        try {\n            user = await this.userReposiory.findOneBy({ email: email });\n        } catch (error) {\n            throw new RequestTimeoutException(error, {\n                description: 'could not fetch user'\n            })\n        }\n\n        if (!user) {\n            throw new UnauthorizedException(\"use does not exist\")\n        }\n        return user;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GenerateTokensProvider.html":{"url":"injectables/GenerateTokensProvider.html","title":"injectable - GenerateTokensProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GenerateTokensProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/generate-tokens.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                generateToken\n                            \n                            \n                                    Public\n                                    Async\n                                signToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtConfiguration: ConfigType<>, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/generate-tokens.provider.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        generateToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateToken(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/generate-tokens.provider.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    signToken(userId: number, expiresIn: number, payload?: T)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/generate-tokens.provider.ts:17\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                expiresIn\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport jwtConfig from '../config/jwt.config';\nimport { JwtService } from '@nestjs/jwt';\nimport { User } from 'src/users/user.entity';\nimport { ActiveUserData } from '../interfaces/active-user-data.interface';\n\n@Injectable()\nexport class GenerateTokensProvider {\n\n    constructor(\n        @Inject(jwtConfig.KEY) private readonly jwtConfiguration: ConfigType,\n        private readonly jwtService: JwtService\n    ) { }\n\n\n    public async signToken(userId: number, expiresIn: number, payload?: T) {\n        return await this.jwtService.signAsync({\n            sub: userId,\n            ...payload\n        }, {\n            audience: this.jwtConfiguration.audience,\n            issuer: this.jwtConfiguration.issuer,\n            secret: this.jwtConfiguration.secret,\n            expiresIn\n        })\n\n    }\n\n    public async generateToken(user: User) {\n        const [accessToken, refreshToken] = await Promise.all([\n            this.signToken>(user.id, this.jwtConfiguration.accessTokenTtl, { email: user.email }),\n\n            this.signToken(user.id, this.jwtConfiguration.refreshTokenTtl)\n        ])\n\n        return {\n            accessToken,\n            refreshToken\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPostBaseDto.html":{"url":"classes/GetPostBaseDto.html","title":"class - GetPostBaseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPostBaseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dtos/get-posts.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                endDate\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                startDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        endDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/get-posts.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        startDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/get-posts.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IntersectionType } from \"@nestjs/swagger\";\nimport { IsDate, IsOptional } from \"class-validator\";\nimport { PaginationQueryDto } from \"src/common/pagination/dtos/pagination-query.dto\";\n\nclass GetPostBaseDto {\n    @IsDate()\n    @IsOptional()\n    startDate?: Date;\n\n    @IsDate()\n    @IsOptional()\n    endDate?: Date;\n}\n\nexport class GetPostDto extends IntersectionType(GetPostBaseDto, PaginationQueryDto) {\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPostDto.html":{"url":"classes/GetPostDto.html","title":"class - GetPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dtos/get-posts.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            IntersectionType(GetPostBaseDto, PaginationQueryDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IntersectionType } from \"@nestjs/swagger\";\nimport { IsDate, IsOptional } from \"class-validator\";\nimport { PaginationQueryDto } from \"src/common/pagination/dtos/pagination-query.dto\";\n\nclass GetPostBaseDto {\n    @IsDate()\n    @IsOptional()\n    startDate?: Date;\n\n    @IsDate()\n    @IsOptional()\n    endDate?: Date;\n}\n\nexport class GetPostDto extends IntersectionType(GetPostBaseDto, PaginationQueryDto) {\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Ger user  with a specific id', example: 1234})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-param.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsInt, IsOptional } from \"class-validator\";\n\nexport class GetUsersParamDto {\n    @ApiPropertyOptional({\n        description: \"Ger user  with a specific id\",\n        example: 1234\n    })\n    @IsOptional()\n    @IsInt()\n    @Type(() => Number)\n    id?: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GoogleAuthenticationController.html":{"url":"controllers/GoogleAuthenticationController.html","title":"controller - GoogleAuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GoogleAuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/google-authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                google-authentication\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                authenticate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                        \n                    authenticate(googleTokenDto: GoogleTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/auth/social/google-authentication.controller.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleTokenDto\n                                            \n                                                            GoogleTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { GoogleAuthenticationService } from './providers/google-authentication.service';\nimport { GoogleTokenDto } from './dtos/google-token.dto';\n\n@Controller('google-authentication')\nexport class GoogleAuthenticationController {\n\n    constructor(private readonly googleAuthenticationService: GoogleAuthenticationService) { }\n\n\n    @Post()\n    public authenticate(@Body() googleTokenDto: GoogleTokenDto) {\n        return this.googleAuthenticationService.authenticate(googleTokenDto)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleAuthenticationService.html":{"url":"injectables/GoogleAuthenticationService.html","title":"injectable - GoogleAuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleAuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/providers/google-authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                oauthClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                authenticate\n                            \n                            \n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, generateTokensProvider: GenerateTokensProvider, userService: UserService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/social/providers/google-authentication.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTokensProvider\n                                                  \n                                                        \n                                                                        GenerateTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                        \n                    authenticate(googleTokenDto: GoogleTokenDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/social/providers/google-authentication.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleTokenDto\n                                            \n                                                            GoogleTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/social/providers/google-authentication.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        oauthClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OAuth2Client\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/social/providers/google-authentication.service.ts:13\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable, OnModuleInit, UnauthorizedException } from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { OAuth2Client } from 'google-auth-library';\nimport jwtConfig from 'src/auth/config/jwt.config';\nimport { GoogleTokenDto } from '../dtos/google-token.dto';\nimport { UserService } from 'src/users/providers/user.service';\nimport { GenerateTokensProvider } from 'src/auth/providers/generate-tokens.provider';\n\n@Injectable()\nexport class GoogleAuthenticationService implements OnModuleInit {\n\n    private oauthClient: OAuth2Client;\n\n    constructor(private readonly jwtService: JwtService,\n        private readonly generateTokensProvider: GenerateTokensProvider,\n        @Inject(forwardRef(() => UserService)) private readonly userService: UserService,\n        @Inject(jwtConfig.KEY) private readonly jwtConfiguration: ConfigType\n    ) { }\n\n    onModuleInit() {\n        const clientId = this.jwtConfiguration.googleClientId;\n        const clientSecret = this.jwtConfiguration.googleClientSecret;\n        this.oauthClient = new OAuth2Client(clientId, clientSecret)\n    }\n\n    public async authenticate(googleTokenDto: GoogleTokenDto) {\n\n        try {\n            const loginTicket = await this.oauthClient.verifyIdToken({\n                idToken: googleTokenDto.token\n            })\n\n            const { email, sub: googleId, given_name: firstName, family_name: lastName } = loginTicket.getPayload();\n\n            const user = await this.userService.findOneByGoogleId(googleId)\n\n            if (user) {\n                return this.generateTokensProvider.generateToken(user)\n            }\n\n            const newUser = await this.userService.createGoogleUser({\n                email: email,\n                firstName: firstName,\n                lastName: lastName,\n                googleId: googleId\n            })\n            return this.generateTokensProvider.generateToken(newUser);\n        } catch (error) {\n            throw new UnauthorizedException(error)\n        }\n\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GoogleTokenDto.html":{"url":"classes/GoogleTokenDto.html","title":"class - GoogleTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GoogleTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/dtos/google-token.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/social/dtos/google-token.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from \"class-validator\";\n\nexport class GoogleTokenDto {\n    @IsNotEmpty()\n    @IsString()\n    token: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GoogleUser.html":{"url":"classes/GoogleUser.html","title":"class - GoogleUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GoogleUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interfaces/google-user.interface.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                firstName\n                            \n                            \n                                googleId\n                            \n                            \n                                lastName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/interfaces/google-user.interface.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/interfaces/google-user.interface.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        googleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/interfaces/google-user.interface.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/interfaces/google-user.interface.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class GoogleUser {\n    email: string;\n    firstName: string;\n    lastName: string;\n    googleId: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HashingProvider.html":{"url":"injectables/HashingProvider.html","title":"injectable - HashingProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HashingProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/hashing.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                comparePassword\n                            \n                            \n                                    Abstract\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        comparePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePassword(data: string | Buffer, encrypted: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.provider.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encrypted\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(data: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.provider.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport abstract class HashingProvider {\n\n    abstract hashPassword(data: string | Buffer): Promise\n\n    abstract comparePassword(data: string | Buffer, encrypted: string): Promise\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/MetaOption.html":{"url":"entities/MetaOption.html","title":"entity - MetaOption","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  MetaOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-option.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                metaValue\n                            \n                            \n                                    \n                                    \n                                post\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, post => post.metaOptions, {onDelete: 'CASCADE'})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:19\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from \"src/post/post.entity\";\nimport { Column, CreateDateColumn, Entity, JoinColumn, OneToOne, PrimaryGeneratedColumn, UpdateDateColumn } from \"typeorm\";\n\n@Entity()\nexport class MetaOption {\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column({\n        type: \"json\",\n        nullable: false\n    })\n    metaValue: string;\n\n    @CreateDateColumn()\n    createDate: Date\n\n    @UpdateDateColumn()\n    updateDate: Date;\n\n\n    @OneToOne(() => Post, (post) => post.metaOptions, {\n        onDelete: 'CASCADE'\n    })\n    @JoinColumn()\n    post: Post;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MetaOptionsController.html":{"url":"controllers/MetaOptionsController.html","title":"controller - MetaOptionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MetaOptionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-options.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                meta-options\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostMetaOptionDto: CreatePostMetaOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/meta-options/meta-options.controller.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostMetaOptionDto\n                                            \n                                                            CreatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { CreatePostMetaOptionsDto } from './dtos/create-post-meta-option.dtos';\nimport { MetaOptionsService } from './providers/meta-options.service';\n\n@Controller('meta-options')\nexport class MetaOptionsController {\n\n\n    constructor(private readonly metaOptionService: MetaOptionsService) { }\n    @Post()\n    public create(@Body() createPostMetaOptionDto: CreatePostMetaOptionsDto) {\n        return this.metaOptionService.create(createPostMetaOptionDto);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MetaOptionsModule.html":{"url":"modules/MetaOptionsModule.html","title":"module - MetaOptionsModule","body":"\n                   \n\n\n\n\n    Modules\n    MetaOptionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/meta-options/meta-options.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MetaOptionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MetaOptionsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MetaOptionsController } from './meta-options.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MetaOption } from './meta-option.entity';\nimport { MetaOptionsService } from './providers/meta-options.service';\n\n@Module({\n  controllers: [MetaOptionsController],\n  imports: [TypeOrmModule.forFeature([MetaOption])],\n  providers: [MetaOptionsService]\n})\nexport class MetaOptionsModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MetaOptionsService.html":{"url":"injectables/MetaOptionsService.html","title":"injectable - MetaOptionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MetaOptionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/providers/meta-options.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(metaOptionRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/meta-options/providers/meta-options.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        metaOptionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostMetaOptionsDto: CreatePostMetaOptionsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/meta-options/providers/meta-options.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostMetaOptionsDto\n                                            \n                                                            CreatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreatePostMetaOptionsDto } from '../dtos/create-post-meta-option.dtos';\nimport { Repository } from 'typeorm';\nimport { MetaOption } from '../meta-option.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class MetaOptionsService {\n\n    constructor(@InjectRepository(MetaOption) private readonly metaOptionRepository: Repository) { }\n\n    public async create(createPostMetaOptionsDto: CreatePostMetaOptionsDto) {\n        let metaOption = this.metaOptionRepository.create(createPostMetaOptionsDto);\n        return await this.metaOptionRepository.save(metaOption);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Paginated.html":{"url":"interfaces/Paginated.html","title":"interface - Paginated","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Paginated\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/interfaces/paginated.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            links\n                                        \n                                \n                                \n                                        \n                                            meta\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        links\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        links:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        meta\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        meta:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Paginated {\n\n    data: T[];\n    meta: {\n        itemsPerPage: number;\n        totalItems: number;\n        currentPage: number;\n        totalPages: number;\n    };\n    links: {\n        first: string;\n        last: string;\n        current: string;\n        next: string;\n        previous: string;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaginationModule.html":{"url":"modules/PaginationModule.html","title":"module - PaginationModule","body":"\n                   \n\n\n\n\n    Modules\n    PaginationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_exports\n\n\n\ncluster_PaginationModule_providers\n\n\n\n\nPaginationProvider \n\nPaginationProvider \n\n\n\nPaginationModule\n\nPaginationModule\n\nPaginationProvider  -->\n\nPaginationModule->PaginationProvider \n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nPaginationModule -->\n\nPaginationProvider->PaginationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/pagination/pagination.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaginationProvider\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PaginationProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PaginationProvider } from './providers/pagination.provider';\n\n@Module({\n    providers: [PaginationProvider],\n    exports: [PaginationProvider]\n})\nexport class PaginationModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaginationProvider.html":{"url":"injectables/PaginationProvider.html","title":"injectable - PaginationProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaginationProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/providers/pagination.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                paginateQuery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: Request)\n                    \n                \n                        \n                            \n                                Defined in src/common/pagination/providers/pagination.provider.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                    Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        paginateQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    paginateQuery(paginationQuery: PaginationQueryDto, repository: Repository)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/pagination/providers/pagination.provider.ts:15\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                paginationQuery\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                repository\n                                            \n                                                        Repository\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { PaginationQueryDto } from '../dtos/pagination-query.dto';\nimport { ObjectLiteral, Repository } from 'typeorm';\nimport { Request } from 'express';\nimport { REQUEST } from '@nestjs/core';\nimport { Paginated } from '../interfaces/paginated.interface';\n\n@Injectable()\nexport class PaginationProvider {\n\n    constructor(\n        @Inject(REQUEST)\n        private readonly request: Request\n    ) { }\n    public async paginateQuery(paginationQuery: PaginationQueryDto, repository: Repository): Promise> {\n        let results = await repository.find({\n            skip: (paginationQuery.page - 1) * paginationQuery.limit,\n            take: paginationQuery.limit\n        })\n\n        const baseUrl = this.request.protocol + '://' + this.request.headers.host + '/';\n\n        const newUrl = new URL(this.request.url, baseUrl)\n        console.log(newUrl)\n\n        const totalItems = await repository.count();\n        const totalPages = Math.ceil(totalItems / paginationQuery.limit);\n        const nextPage = paginationQuery.page === totalPages ? paginationQuery.page : paginationQuery.page + 1\n        const previousPage = paginationQuery.page === 1 ? paginationQuery.page : paginationQuery.page - 1;\n        const finalResponse: Paginated = {\n            data: results,\n            meta: {\n                itemsPerPage: paginationQuery.limit,\n                totalItems: totalItems,\n                currentPage: paginationQuery.page,\n                totalPages: totalPages,\n            },\n            links: {\n                first: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&pages=1`,\n                last: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&pages=${totalPages}`,\n                current: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&pages=${paginationQuery.page}`,\n                next: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&pages=${nextPage}`,\n                previous: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&pages=${previousPage}`\n            }\n        }\n\n        return finalResponse;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationQueryDto.html":{"url":"classes/PaginationQueryDto.html","title":"class - PaginationQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/dtos/pagination-query.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/dtos/pagination-query.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/dtos/pagination-query.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport { IsOptional, IsPositive } from \"class-validator\";\n\nexport class PaginationQueryDto {\n    @IsOptional()\n    @IsPositive()\n    //@Type(() => Number) we do not need this anymore cause we already enabled the implicit conversion in the main.ts\n    limit?: number = 10;\n    @IsOptional()\n    @IsPositive()\n    //@Type(() => Number)\n    page?: number = 1;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dtos/patch-post-dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The id of the post that needs to be updated'})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/patch-post-dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from \"@nestjs/swagger\";\nimport { IsInt, IsNotEmpty } from \"class-validator\";\nimport { CreatePostDto } from \"./create-post.dtos\";\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n    @ApiProperty({\n        description: \"The id of the post that needs to be updated\"\n    })\n    @IsInt()\n    @IsNotEmpty()\n    id: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \"@nestjs/mapped-types\";\nimport { CreateUserDto } from \"./create-user.dto\";\n\nexport class PatchUserDto extends PartialType(CreateUserDto) {\n   \n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                postType\n                            \n                            \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.posts, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MetaOption\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, metaOptions => metaOptions.post, {cascade: true, eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: postType, nullable: false, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: postStatus, nullable: false, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Tag[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, tag => tag.posts, {eager: true})@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:18\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, JoinTable, ManyToMany, ManyToOne, OneToOne, PrimaryGeneratedColumn } from \"typeorm\";\nimport { CreatePostMetaOptionsDto } from \"../meta-options/dtos/create-post-meta-option.dtos\";\nimport { postType } from \"./enums/postType.enum\";\nimport { postStatus } from \"./enums/status.enum\";\nimport { MetaOption } from \"src/meta-options/meta-option.entity\";\nimport { User } from \"src/users/user.entity\";\nimport { Tag } from \"src/tags/tag.entity\";\n\n@Entity()\nexport class Post {\n    @PrimaryGeneratedColumn()\n    id: number;\n    @Column({\n        type: \"varchar\",\n        length: 512,\n        nullable: false\n    })\n    title: string;\n    @Column({\n        type: \"enum\",\n        enum: postType,\n        nullable: false,\n        default: postType.POST\n    })\n    postType: postType;\n\n    @Column({\n        type: \"varchar\",\n        length: 256,\n        nullable: false,\n        unique: true\n    })\n    slug: string;\n    @Column({\n        type: \"enum\",\n        enum: postStatus,\n        nullable: false,\n        default: postStatus.DRAFT\n    })\n    status: postStatus;\n\n    @Column({\n        type: \"text\",\n        nullable: true\n    })\n    content?: string;\n\n    @Column({\n        type: \"text\",\n        nullable: true\n    })\n    schema?: string;\n\n    @Column({\n        type: \"varchar\",\n        length: 1024,\n        nullable: true\n    })\n    featuredImageUrl?: string;\n\n    @Column({\n        type: \"timestamp\",\n    })\n    publishOn?: Date;\n\n\n\n\n    @OneToOne(() => MetaOption, (metaOptions) => metaOptions.post, {\n        cascade: true,\n        eager: true\n    })\n    //@JoinColumn()\n    metaOptions?: MetaOption;\n\n    @ManyToOne(() => User, (user) => user.posts, {\n        eager: true\n    })\n    author: User;\n\n\n    @ManyToMany(() => Tag, (tag) => tag.posts, {\n        eager: true\n    })\n    @JoinTable()\n    tags?: Tag[];\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostController.html":{"url":"controllers/PostController.html","title":"controller - PostController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                post\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    Public\n                                deletePost\n                            \n                            \n                                    \n                                    Public\n                                getPost\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(user: ActiveUserData, createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new blog post'})@ApiResponse({status: 201, description: 'you get a 201 response if your post is created successfully'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            ActiveUserData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPost(userId: string, postQuery: GetPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:userId?')\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                postQuery\n                                            \n                                                            GetPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Updates an existing blog post'})@ApiResponse({status: 200, description: 'A 200 response if the post is updated successfully'})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Param, ParseIntPipe, Patch, Post, Query, Req } from '@nestjs/common';\nimport { PostService } from './services/post.service';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreatePostDto } from './dtos/create-post.dtos';\nimport { PatchPostDto } from './dtos/patch-post-dto';\nimport { GetPostDto } from './dtos/get-posts.dto';\nimport { ActiveUser } from 'src/auth/decorators/active-user.decorator';\nimport { ActiveUserData } from 'src/auth/interfaces/active-user-data.interface';\n\n@Controller('post')\n@ApiTags('posts')\nexport class PostController {\n\n    constructor(private readonly postService: PostService) { }\n\n    @Get('/:userId?')\n    public getPost(@Param('userId') userId: string, @Query() postQuery: GetPostDto) {\n        return this.postService.findAll(postQuery, userId)\n    }\n\n    @ApiOperation({\n        summary: \"Creates a new blog post\"\n    })\n    @ApiResponse({\n        status: 201,\n        description: \"you get a 201 response if your post is created successfully\"\n    })\n    @Post()\n    public createPost(@ActiveUser() user: ActiveUserData, @Body() createPostDto: CreatePostDto) {\n\n        return this.postService.createPost(createPostDto, user)\n    }\n    @ApiOperation({\n        summary: \"Updates an existing blog post\"\n    })\n    @ApiResponse({\n        status: 200,\n        description: \"A 200 response if the post is updated successfully\"\n    })\n    @Patch()\n    public updatePost(@Body() patchPostDto: PatchPostDto) {\n        return this.postService.update(patchPostDto)\n    }\n\n    @Delete()\n    public deletePost(@Query(\"id\", ParseIntPipe) id: number) {\n        return this.postService.delete(id)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostModule.html":{"url":"modules/PostModule.html","title":"module - PostModule","body":"\n                   \n\n\n\n\n    Modules\n    PostModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostModule\n\n\n\ncluster_PostModule_imports\n\n\n\ncluster_PostModule_providers\n\n\n\n\nPaginationModule\n\nPaginationModule\n\n\n\nPostModule\n\nPostModule\n\nPostModule -->\n\nPaginationModule->PostModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostModule -->\n\nTagsModule->PostModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostModule -->\n\nUsersModule->PostModule\n\n\n\n\n\nCreatePostProvider\n\nCreatePostProvider\n\nPostModule -->\n\nCreatePostProvider->PostModule\n\n\n\n\n\nPostService\n\nPostService\n\nPostModule -->\n\nPostService->PostModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/post/post.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CreatePostProvider\n                        \n                        \n                            PostService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PaginationModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostController } from './post.controller';\nimport { PostService } from './services/post.service';\nimport { UsersModule } from 'src/users/users.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Post } from './post.entity';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { TagsModule } from 'src/tags/tags.module';\nimport { PaginationModule } from 'src/common/pagination/pagination.module';\nimport { CreatePostProvider } from './services/create-post.provider';\n\n@Module({\n  controllers: [PostController],\n  providers: [PostService, CreatePostProvider],\n  imports: [\n    UsersModule,\n    TagsModule,\n    TypeOrmModule.forFeature([Post, MetaOption]),\n    PaginationModule\n  ]\n})\nexport class PostModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostService.html":{"url":"injectables/PostService.html","title":"injectable - PostService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/services/post.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createPost\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, postRepository: Repository, tagsService: TagsService, paginationProvider: PaginationProvider, createPostProvider: CreatePostProvider)\n                    \n                \n                        \n                            \n                                Defined in src/post/services/post.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tagsService\n                                                  \n                                                        \n                                                                        TagsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        paginationProvider\n                                                  \n                                                        \n                                                                        PaginationProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        createPostProvider\n                                                  \n                                                        \n                                                                        CreatePostProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto, user: ActiveUserData)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/services/post.service.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            ActiveUserData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/services/post.service.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(postQuery: GetPostDto, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/services/post.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postQuery\n                                            \n                                                            GetPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(patchPostDto: PatchPostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/services/post.service.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable, RequestTimeoutException } from '@nestjs/common';\nimport { UserService } from 'src/users/providers/user.service';\nimport { CreatePostDto } from '../dtos/create-post.dtos';\nimport { Repository } from 'typeorm';\nimport { Post } from '../post.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { TagsService } from 'src/tags/providers/tags.service';\nimport { PatchPostDto } from '../dtos/patch-post-dto';\nimport { GetPostDto } from '../dtos/get-posts.dto';\nimport { PaginationProvider } from 'src/common/pagination/providers/pagination.provider';\nimport { Paginated } from 'src/common/pagination/interfaces/paginated.interface';\nimport { CreatePostProvider } from './create-post.provider';\nimport { ActiveUserData } from 'src/auth/interfaces/active-user-data.interface';\n@Injectable()\nexport class PostService {\n\n    constructor(\n        private readonly userService: UserService,\n        @InjectRepository(Post) private readonly postRepository: Repository,\n\n        //@InjectRepository(MetaOption) private readonly metaOptionRepository: Repository,\n\n        private readonly tagsService: TagsService,\n\n        private readonly paginationProvider: PaginationProvider,\n\n        private readonly createPostProvider: CreatePostProvider\n    ) { }\n\n    public async findAll(postQuery: GetPostDto, userId: string): Promise> {\n        /*const user = await this.userService.findOneById(+userId);\n        let posts = await this.postRepository.find({\n            relations: {\n                metaOptions: true,\n                author: true,\n                tags: true\n            },\n            skip: (postQuery.page - 1) * postQuery.limit,\n            take: postQuery.limit,\n        })*/\n\n        let posts = await this.paginationProvider.paginateQuery({\n            limit: postQuery.limit,\n            page: postQuery.page\n        }, this.postRepository,)\n        return posts\n    }\n\n    public async createPost(createPostDto: CreatePostDto, user: ActiveUserData) {\n        return await this.createPostProvider.createPost(createPostDto, user)\n    }\n\n    public async delete(id: number) {\n\n        let post = await this.postRepository.findOneBy({ id: id })\n\n        await this.postRepository.delete(id)\n\n        /*await this.metaOptionRepository.delete(post.metaOptions.id)\n*/\n        /*let inversePost = await this.metaOptionRepository.find({\n            where: {\n                id: post.metaOptions.id\n            },\n            relations: {\n                post: true\n            }\n        })*/\n        return { deleted: true, id }\n    }\n\n\n    public async update(patchPostDto: PatchPostDto) {\n        let tags = undefined;\n        let post = undefined;\n        try {\n            tags = await this.tagsService.findMultpleTags(patchPostDto.tags);\n        } catch (err) {\n            throw new RequestTimeoutException('unable to process your request please try later',);\n        }\n\n        if (!tags || tags.length !== patchPostDto.tags.length) {\n            throw new BadRequestException('please check your tag Ids and ensure they are correct')\n        }\n\n        try {\n            post = await this.postRepository.findOneBy({ id: patchPostDto.id })\n        } catch (e) {\n            throw new RequestTimeoutException('unable to process your request please try later',);\n\n        }\n\n        if (!post) {\n            throw new BadRequestException('The post id does not exist')\n        }\n\n        post.title = patchPostDto.title ?? post.title;\n        post.content = patchPostDto.content ?? post.content\n        post.status = patchPostDto.status ?? post.status\n        post.slug = patchPostDto.slug ?? post.slug\n        post.postType = patchPostDto.postType ?? post.postType\n        post.featuredImageUrl = patchPostDto.featuredImageUrl ?? post.featuredImageUrl\n        post.publishOn = patchPostDto.publishOn ?? post.publishOn\n\n        post.tags = tags\n        try {\n            await this.postRepository.save(post)\n        } catch (err) {\n            throw new RequestTimeoutException('unable to process your request please try later',);\n        }\n        return post;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenDto.html":{"url":"classes/RefreshTokenDto.html","title":"class - RefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/refresh-token.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/refresh-token.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from \"class-validator\";\n\nexport class RefreshTokenDto {\n    @IsNotEmpty()\n    @IsString()\n    refreshToken: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokensProvider.html":{"url":"injectables/RefreshTokensProvider.html","title":"injectable - RefreshTokensProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokensProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/refresh-tokens.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                refreshTokens\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>, generateTokenProvider: GenerateTokensProvider, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/refresh-tokens.provider.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTokenProvider\n                                                  \n                                                        \n                                                                        GenerateTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshTokens(refreshTokenDto: RefreshTokenDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/refresh-tokens.provider.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshTokenDto\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable, UnauthorizedException } from '@nestjs/common';\nimport { RefreshTokenDto } from '../dtos/refresh-token.dto';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigType } from '@nestjs/config';\nimport jwtConfig from '../config/jwt.config';\nimport { GenerateTokensProvider } from './generate-tokens.provider';\nimport { UserService } from 'src/users/providers/user.service';\nimport { ActiveUserData } from '../interfaces/active-user-data.interface';\n\n@Injectable()\nexport class RefreshTokensProvider {\n\n    constructor(\n        private readonly jwtService: JwtService,\n        @Inject(jwtConfig.KEY) private readonly jwtConfiguration: ConfigType,\n\n        private readonly generateTokenProvider: GenerateTokensProvider,\n        @Inject(forwardRef(() => UserService)) private readonly userService: UserService\n    ) { }\n    public async refreshTokens(refreshTokenDto: RefreshTokenDto) {\n        try {\n            const { sub } = await this.jwtService.verifyAsync>(refreshTokenDto.refreshToken, {\n                secret: this.jwtConfiguration.secret,\n                audience: this.jwtConfiguration.audience,\n                issuer: this.jwtConfiguration.issuer\n            })\n\n            const user = await this.userService.findOneById(sub)\n\n            return await this.generateTokenProvider.generateToken(user)\n        } catch (error) {\n            throw new UnauthorizedException(error)\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInDto.html":{"url":"classes/SignInDto.html","title":"class - SignInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/signin.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/signin.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/signin.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString } from \"class-validator\";\n\nexport class SignInDto {\n    @IsEmail()\n    @IsNotEmpty()\n    email: string;\n\n    @IsString()\n    @IsNotEmpty()\n    password: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SignInProvider.html":{"url":"injectables/SignInProvider.html","title":"injectable - SignInProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SignInProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/sign-in.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, hashingProvider: HashingProvider, jwtService: JwtService, generateTokensProvider: GenerateTokensProvider, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/sign-in.provider.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTokensProvider\n                                                  \n                                                        \n                                                                        GenerateTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/sign-in.provider.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable, RequestTimeoutException, UnauthorizedException } from '@nestjs/common';\nimport { SignInDto } from '../dtos/signin.dto';\nimport { UserService } from 'src/users/providers/user.service';\nimport { HashingProvider } from './hashing.provider';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigType } from '@nestjs/config';\nimport jwtConfig from '../config/jwt.config';\nimport { ActiveUserData } from '../interfaces/active-user-data.interface';\nimport { GenerateTokensProvider } from './generate-tokens.provider';\n\n@Injectable()\nexport class SignInProvider {\n\n    constructor(\n        @Inject(forwardRef(() => UserService))\n        private readonly userService: UserService,\n        private readonly hashingProvider: HashingProvider,\n        private readonly jwtService: JwtService,\n        private readonly generateTokensProvider: GenerateTokensProvider,\n        @Inject(jwtConfig.KEY) private readonly jwtConfiguration: ConfigType\n    ) {\n\n    }\n    public async signIn(signInDto: SignInDto) {\n        let user = await this.userService.findOneByEmail(signInDto.email)\n\n        let isEqual: boolean = false\n\n        try {\n            isEqual = await this.hashingProvider.comparePassword(signInDto.password, user.password)\n        } catch (error) {\n            throw new RequestTimeoutException(error, {\n                description: 'could not compare password'\n            })\n        }\n\n        if (!isEqual) {\n            throw new UnauthorizedException(\"incorrect password\")\n        }\n        return await this.generateTokensProvider.generateToken(user)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Tag.html":{"url":"entities/Tag.html","title":"entity - Tag","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Tag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tag.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                deleteAt\n                            \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                posts\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, post => post.tags, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:48\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from \"src/post/post.entity\";\nimport { Column, CreateDateColumn, DeleteDateColumn, Entity, ManyToMany, PrimaryGeneratedColumn, UpdateDateColumn } from \"typeorm\";\n\n@Entity()\nexport class Tag {\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column({\n        type: \"varchar\",\n        length: 256,\n        nullable: false,\n        unique: true\n    })\n    name: string;\n\n    @Column({\n        type: \"varchar\",\n        length: 256,\n        nullable: false,\n        unique: true\n    })\n    slug: string;\n\n    @Column({\n        type: \"text\",\n        nullable: true,\n    })\n    description?: string;\n\n    @Column({\n        type: \"text\",\n        nullable: true,\n    })\n    schema?: string;\n\n    @Column({\n        type: \"varchar\",\n        length: 1024,\n        nullable: true,\n    })\n    featuredImageUrl: string;\n\n    @CreateDateColumn()\n    createDate: Date;\n\n    @UpdateDateColumn()\n    updateDate: Date;\n\n    @DeleteDateColumn()\n    deleteAt: Date;\n\n    @ManyToMany(() => Post, (post) => post.tags, {\n        onDelete: \"CASCADE\"\n    })\n    posts: Post[];\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagsController.html":{"url":"controllers/TagsController.html","title":"controller - TagsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tags\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                create\n                            \n                            \n                                    \n                                    Public\n                                delete\n                            \n                            \n                                    \n                                    Public\n                                softDelete\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTagDto: CreateTagDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTagDto\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        softDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDelete(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('soft-delete')\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, ParseIntPipe, Post, Query } from '@nestjs/common';\nimport { CreateTagDto } from './dtos/create-tag.dto';\nimport { TagsService } from './providers/tags.service';\n\n@Controller('tags')\nexport class TagsController {\n\n    constructor(private readonly tagsService: TagsService) { }\n    @Post()\n    public create(@Body() createTagDto: CreateTagDto) {\n        return this.tagsService.createTags(createTagDto)\n    }\n\n    @Delete()\n    public delete(@Query('id', ParseIntPipe) id: number) {\n        return this.tagsService.delete(id);\n    }\n    @Delete(\"soft-delete\")\n    public softDelete(@Query('id', ParseIntPipe) id: number) {\n        return this.tagsService.softRemove(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagsModule.html":{"url":"modules/TagsModule.html","title":"module - TagsModule","body":"\n                   \n\n\n\n\n    Modules\n    TagsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\n\nTagsService \n\nTagsService \n\n\n\nTagsModule\n\nTagsModule\n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tags/tags.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TagsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TagsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TagsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TagsController } from './tags.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Tag } from './tag.entity';\nimport { TagsService } from './providers/tags.service';\n\n@Module({\n  controllers: [TagsController],\n  imports: [TypeOrmModule.forFeature([Tag])],\n  providers: [TagsService],\n  exports: [TagsService]\n})\nexport class TagsModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TagsService.html":{"url":"injectables/TagsService.html","title":"injectable - TagsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TagsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/providers/tags.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createTags\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findMultpleTags\n                            \n                            \n                                    Public\n                                    Async\n                                softRemove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/tags/providers/tags.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tagsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTags(createTagDto: CreateTagDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTagDto\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findMultpleTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    findMultpleTags(tags: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tags\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        softRemove\n                        \n                    \n                \n            \n            \n                \n                        \n                    softRemove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateTagDto } from '../dtos/create-tag.dto';\nimport { In, Repository } from 'typeorm';\nimport { Tag } from '../tag.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class TagsService {\n\n    constructor(@InjectRepository(Tag) private readonly tagsRepository: Repository) { }\n\n    public async createTags(createTagDto: CreateTagDto) {\n        let tag = this.tagsRepository.create(createTagDto)\n\n        return await this.tagsRepository.save(tag)\n    }\n\n    public async findMultpleTags(tags: number[]) {\n        let result = await this.tagsRepository.find({\n            where: {\n                id: In(tags)\n            }\n        })\n\n        return result;\n    }\n\n    public async delete(id: number) {\n        await this.tagsRepository.delete(id);\n        return { deleted: true, id }\n    }\n\n    public async softRemove(id: number) {\n        await this.tagsRepository.softDelete(id);\n        return { deleted: true, id }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UploadsController.html":{"url":"controllers/UploadsController.html","title":"controller - UploadsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UploadsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/uploads/uploads.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                uploads\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\n\n@Controller('uploads')\nexport class UploadsController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UploadsModule.html":{"url":"modules/UploadsModule.html","title":"module - UploadsModule","body":"\n                   \n\n\n\n\n    Modules\n    UploadsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UploadsModule\n\n\n\ncluster_UploadsModule_providers\n\n\n\n\nUploadsService\n\nUploadsService\n\n\n\nUploadsModule\n\nUploadsModule\n\nUploadsModule -->\n\nUploadsService->UploadsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/uploads/uploads.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UploadsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UploadsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UploadsController } from './uploads.controller';\nimport { UploadsService } from './providers/uploads.service';\n\n@Module({\n  controllers: [UploadsController],\n  providers: [UploadsService]\n})\nexport class UploadsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UploadsService.html":{"url":"injectables/UploadsService.html","title":"injectable - UploadsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UploadsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/uploads/providers/uploads.service.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class UploadsService {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                googleId\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                            \n                                    \n                                posts\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        googleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, post => post.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:48\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Exclude } from \"class-transformer\";\nimport { Post } from \"src/post/post.entity\";\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from \"typeorm\";\n\n@Entity()\nexport class User {\n    @PrimaryGeneratedColumn()\n    id: number;\n    @Column({\n        type: \"varchar\",\n        length: 96,\n        nullable: false\n    })\n    firstName: string;\n    @Column(\n        {\n            type: \"varchar\",\n            length: 96,\n            nullable: true\n        }\n    )\n    lastName: string;\n    @Column({\n        type: \"varchar\",\n        length: 96,\n        nullable: false,\n        unique: true\n    })\n    email: string;\n    @Column({\n        type: \"varchar\",\n        length: 96,\n        nullable: true\n    })\n    @Exclude()\n    password?: string;\n\n    @Column({\n        type: \"varchar\",\n        length: 96,\n        nullable: true\n    })\n    @Exclude()\n    googleId?: string;\n\n\n    @OneToMany(() => Post, (post) => post.author)\n    posts: Post[]\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserCreateManyProvider.html":{"url":"injectables/UserCreateManyProvider.html","title":"injectable - UserCreateManyProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserCreateManyProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/user-create-many.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createMany\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataSource: DataSource)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/user-create-many.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMany(createManyUsersDto: CreateManyUsersDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user-create-many.provider.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createManyUsersDto\n                                            \n                                                            CreateManyUsersDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, RequestTimeoutException } from '@nestjs/common';\nimport { User } from '../user.entity';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { DataSource } from 'typeorm';\nimport { CreateManyUsersDTO } from '../dtos/create-many-user.dto';\n\n@Injectable()\nexport class UserCreateManyProvider {\n\n    constructor(private readonly dataSource: DataSource) { }\n    public async createMany(createManyUsersDto: CreateManyUsersDTO) {\n        let newUsers: User[] = []\n\n        const queryRunner = this.dataSource.createQueryRunner();\n        try {\n            await queryRunner.connect();\n\n            await queryRunner.startTransaction();\n        } catch (error) {\n            throw new RequestTimeoutException('could not connect to the database')\n        }\n\n        try {\n            for (let user of createManyUsersDto.users) {\n                let newUser = queryRunner.manager.create(User, user)\n                let result = await queryRunner.manager.save(newUser)\n                newUsers.push(result)\n            }\n            await queryRunner.commitTransaction();\n        } catch (error) {\n            await queryRunner.rollbackTransaction();\n            throw new ConflictException('could not complete the transaction', {\n                description: String(error)\n            })\n        } finally {\n            try {\n                await queryRunner.release()\n            } catch (error) {\n                throw new RequestTimeoutException('could not release to the connection', {\n                    description: String(error)\n                })\n            }\n        }\n        return newUsers\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/user.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to connect to Users table and perform business operations\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createGoogleUser\n                            \n                            \n                                    Public\n                                    Async\n                                createMany\n                            \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOneByEmail\n                            \n                            \n                                    Public\n                                    Async\n                                findOneByGoogleId\n                            \n                            \n                                    Public\n                                    Async\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, userRepository: Repository, configService: ConfigService, profilConfiguration: ConfigType<>, usersCreateManyProvider: UserCreateManyProvider, createGoogleUserProvider: CreateGoogleUserProvider, createUsersProvider: CreateUserProvider, findOneByGoogleIdPrvider: FindOneByGoogleIdProvider, findOneUserByEmailProvider: FindOneUserByEmailProvider)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/user.service.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        profilConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersCreateManyProvider\n                                                  \n                                                        \n                                                                        UserCreateManyProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        createGoogleUserProvider\n                                                  \n                                                        \n                                                                        CreateGoogleUserProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        createUsersProvider\n                                                  \n                                                        \n                                                                        CreateUserProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findOneByGoogleIdPrvider\n                                                  \n                                                        \n                                                                        FindOneByGoogleIdProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findOneUserByEmailProvider\n                                                  \n                                                        \n                                                                        FindOneUserByEmailProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createGoogleUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createGoogleUser(googleUser: GoogleUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user.service.ts:108\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleUser\n                                            \n                                                            GoogleUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMany(createManyUsersDto: CreateManyUsersDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user.service.ts:96\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createManyUsersDto\n                                            \n                                                            CreateManyUsersDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user.service.ts:92\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUserParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user.service.ts:39\n                        \n                    \n\n\n            \n                \n                        The method to get all the users from the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user.service.ts:100\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByGoogleId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByGoogleId(googleId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user.service.ts:104\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user.service.ts:71\n                        \n                    \n\n\n            \n                \n                        Find a single user using the ID of user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, forwardRef, HttpException, HttpStatus, Inject, Injectable, RequestTimeoutException } from \"@nestjs/common\";\nimport { GetUsersParamDto } from \"../dtos/get-users-param.dto\";\nimport { AuthService } from \"src/auth/service/auth.service\";\nimport { DataSource, Repository } from \"typeorm\";\nimport { User } from \"../user.entity\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { CreateUserDto } from \"../dtos/create-user.dto\";\nimport { ConfigService, ConfigType } from \"@nestjs/config\";\nimport profileConfig from \"../config/profile.config\";\nimport { UserCreateManyProvider } from \"./user-create-many.provider\";\nimport { CreateManyUsersDTO } from \"../dtos/create-many-user.dto\";\nimport { CreateUserProvider } from \"./create-user.provider\";\nimport { FindOneUserByEmailProvider } from \"./find-one-user-by-email.provider\";\nimport { FindOneByGoogleIdProvider } from \"./find-one-by-google-id.provider\";\nimport { CreateGoogleUserProvider } from \"./create-google-user.provider\";\nimport { GoogleUser } from \"../interfaces/google-user.interface\";\n\n/**\n * Class to connect to Users table and perform business operations\n */\n@Injectable()\nexport class UserService {\n\n    constructor(\n        @Inject(forwardRef(() => AuthService)) private readonly authService: AuthService,\n        @InjectRepository(User) private userRepository: Repository,\n        private readonly configService: ConfigService,\n        @Inject(profileConfig.KEY) private readonly profilConfiguration: ConfigType,\n        private readonly usersCreateManyProvider: UserCreateManyProvider,\n        private readonly createGoogleUserProvider: CreateGoogleUserProvider,\n        private readonly createUsersProvider: CreateUserProvider,\n        private readonly findOneByGoogleIdPrvider: FindOneByGoogleIdProvider,\n        private readonly findOneUserByEmailProvider: FindOneUserByEmailProvider\n    ) { }\n\n    /**\n     * The method to get all the users from the database\n     */\n    public findAll(getUserParamDto: GetUsersParamDto, limit: number, page: number) {\n        /* const isAUth = this.authService.isAUth();\n         console.log(isAUth)\n \n         const environment = this.configService.get(\"S3_BUCKET\")\n         console.log(environment)\n         console.log(this.profilConfiguration)\n         console.log(this.profilConfiguration.apiKey)\n         return [\n             {\n                 firstName: 'John',\n                 email: 'john@doe.com'\n             },\n             {\n                 firstName: 'Alice',\n                 email: 'alice@doe.com'\n             }\n         ]*/\n\n        throw new HttpException({\n            status: HttpStatus.MOVED_PERMANENTLY,\n            error: 'The API endpoint does not exist',\n            fileName: 'user.service.ts',\n            lineNumber: 14,\n        }, HttpStatus.MOVED_PERMANENTLY, {\n            description: 'Occured because the API endpoint was permanently moved'\n        })\n    }\n    /**\n     * Find a single user using the ID of user\n     */\n\n    public async findOneById(id: number) {\n        let user = undefined;\n\n        try {\n            user = await this.userRepository.findOneBy({\n                id: id,\n            })\n        } catch (err) {\n            throw new RequestTimeoutException('Unable to process your request at the moment please try later', {\n                description: 'Error connectiong to the database'\n            })\n        }\n\n        if (!user) {\n            throw new BadRequestException('The user id does not exist')\n        }\n        return await this.userRepository.findOneBy({\n            id: id,\n        })\n    }\n\n    public async createUser(createUserDto: CreateUserDto) {\n        return this.createUsersProvider.createUser(createUserDto)\n    }\n\n    public async createMany(createManyUsersDto: CreateManyUsersDTO) {\n        return await this.usersCreateManyProvider.createMany(createManyUsersDto)\n    }\n\n    public async findOneByEmail(email: string) {\n        return await this.findOneUserByEmailProvider.findOneByEmail(email)\n    }\n\n    public async findOneByGoogleId(googleId: string) {\n        return this.findOneByGoogleIdPrvider.findOneByGoogleId(googleId)\n    }\n\n    public async createGoogleUser(googleUser: GoogleUser) {\n        return await this.createGoogleUserProvider.createGoogleUser(googleUser)\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Public\n                                createManyUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        createManyUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createManyUsers(createManyUsersDTO: CreateManyUsersDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create-many')@UseGuards(AccessTokenGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createManyUsersDTO\n                                            \n                                                            CreateManyUsersDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDTO: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@Auth(AuthType.none)@UseInterceptors(ClassSerializerInterceptor)\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDTO\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUsersParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/:optional?')@ApiOperation({summary: 'Fetches a list of registered users on the application'})@ApiResponse({status: 200, description: 'Users fetched successfully based on the query'})@ApiQuery({name: 'limit', type: 'number', required: false, description: 'the number of entries returned per query', example: 10})@ApiQuery({name: 'page', type: 'number', required: false, description: 'the position of the page number that you want the API to return ', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUsersParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, ClassSerializerInterceptor, Controller, DefaultValuePipe, Get, Header, Headers, Ip, Param, ParseIntPipe, Patch, Post, Query, SetMetadata, UseGuards, UseInterceptors, ValidationPipe } from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UserService } from './providers/user.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreateManyUsersDTO } from './dtos/create-many-user.dto';\nimport { AccessTokenGuard } from 'src/auth/guards/access-token.guard';\nimport { Auth } from 'src/auth/decorators/auth.decorator';\nimport { AuthType } from 'src/auth/enums/auth-type';\n\n@Controller('users')\n@ApiTags('Users')\n//@UseGuards(AccessTokenGuard)\nexport class UsersController {\n\n    constructor(private readonly userService: UserService) { }\n    @Get('/:id/:optional?')\n    @ApiOperation({\n        summary: \"Fetches a list of registered users on the application\",\n    })\n    @ApiResponse({\n        status: 200,\n        description: \"Users fetched successfully based on the query\"\n    })\n    @ApiQuery({\n        name: 'limit',\n        type: \"number\",\n        required: false,\n        description: \"the number of entries returned per query\",\n        example: 10\n    })\n    @ApiQuery({\n        name: 'page',\n        type: \"number\",\n        required: false,\n        description: \"the position of the page number that you want the API to return \",\n        example: 1\n    })\n    public getUsers(/*@Param('id', ParseIntPipe) id: number | undefined*/ @Param() getUsersParamDto: GetUsersParamDto,\n        @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n        @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number\n    ) {\n        return this.userService.findAll(getUsersParamDto, limit, page)\n    }\n\n    @Post()\n    //@SetMetadata('authType', 'none')\n    @Auth(AuthType.none) // custom decorator\n    @UseInterceptors(ClassSerializerInterceptor)\n    public createUsers(@Body() createUserDTO: CreateUserDto,\n    ) {\n        return this.userService.createUser(createUserDTO);\n    }\n\n    @Post('create-many')\n    @UseGuards(AccessTokenGuard)\n    public createManyUsers(@Body() createManyUsersDTO: CreateManyUsersDTO\n    ) {\n        return this.userService.createMany(createManyUsersDTO);\n    }\n\n    @Patch()\n    public patchUser(@Body() patchUserDto: PatchUserDto) {\n        return patchUserDto\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nUserService \n\nUserService \n\n\n\nUsersModule\n\nUsersModule\n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nCreateGoogleUserProvider\n\nCreateGoogleUserProvider\n\nUsersModule -->\n\nCreateGoogleUserProvider->UsersModule\n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUsersModule -->\n\nCreateUserProvider->UsersModule\n\n\n\n\n\nFindOneByGoogleIdProvider\n\nFindOneByGoogleIdProvider\n\nUsersModule -->\n\nFindOneByGoogleIdProvider->UsersModule\n\n\n\n\n\nFindOneUserByEmailProvider\n\nFindOneUserByEmailProvider\n\nUsersModule -->\n\nFindOneUserByEmailProvider->UsersModule\n\n\n\n\n\nUserCreateManyProvider\n\nUserCreateManyProvider\n\nUsersModule -->\n\nUserCreateManyProvider->UsersModule\n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CreateGoogleUserProvider\n                        \n                        \n                            CreateUserProvider\n                        \n                        \n                            FindOneByGoogleIdProvider\n                        \n                        \n                            FindOneUserByEmailProvider\n                        \n                        \n                            UserCreateManyProvider\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UserService } from './providers/user.service';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './user.entity';\nimport { ConfigModule } from '@nestjs/config';\nimport { UserCreateManyProvider } from './providers/user-create-many.provider';\nimport { CreateUserProvider } from './providers/create-user.provider';\nimport { FindOneUserByEmailProvider } from './providers/find-one-user-by-email.provider';\nimport profileConfig from './config/profile.config';\nimport { APP_GUARD } from '@nestjs/core';\nimport { AccessTokenGuard } from 'src/auth/guards/access-token.guard';\nimport jwtConfig from 'src/auth/config/jwt.config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { FindOneByGoogleIdProvider } from './providers/find-one-by-google-id.provider';\nimport { CreateGoogleUserProvider } from './providers/create-google-user.provider';\n\n@Module({\n    controllers: [UsersController],\n    providers: [UserService,\n        UserCreateManyProvider,\n        CreateUserProvider,\n        FindOneUserByEmailProvider,\n        FindOneByGoogleIdProvider,\n        CreateGoogleUserProvider\n    ],\n    exports: [UserService],\n    imports: [\n        forwardRef(() => AuthModule),\n        TypeOrmModule.forFeature([User]),\n        ConfigModule.forFeature(profileConfig),\n        ConfigModule.forFeature(jwtConfig),\n        JwtModule.registerAsync(jwtConfig.asProvider())\n    ]\n})\nexport class UsersModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.module.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/constants/auth.constants.ts\n            \n            variable\n            AUTH_TYPE_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/constants/auth.constants.ts\n            \n            variable\n            REQUEST_USER_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/active-user.decorator.ts\n            \n            variable\n            ActiveUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/auth.decorator.ts\n            \n            variable\n            Auth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dtos/refresh-token.dto.ts\n            \n            class\n            RefreshTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dtos/signin.dto.ts\n            \n            class\n            SignInDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/guards/access-token.guard.ts\n            \n            guard\n            AccessTokenGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/guards/authentication.guard.ts\n            \n            guard\n            AuthenticationGuard\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/interfaces/active-user-data.interface.ts\n            \n            interface\n            ActiveUserData\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/bcrypt.provider.ts\n            \n            injectable\n            BcryptProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/generate-tokens.provider.ts\n            \n            injectable\n            GenerateTokensProvider\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/providers/hashing.provider.ts\n            \n            injectable\n            HashingProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/refresh-tokens.provider.ts\n            \n            injectable\n            RefreshTokensProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/sign-in.provider.ts\n            \n            injectable\n            SignInProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/service/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/social/dtos/google-token.dto.ts\n            \n            class\n            GoogleTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/social/google-authentication.controller.ts\n            \n            controller\n            GoogleAuthenticationController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/social/providers/google-authentication.service.ts\n            \n            injectable\n            GoogleAuthenticationService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/interceptors/data-response/data-response.interceptor.ts\n            \n            injectable\n            DataResponseInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/pagination/dtos/pagination-query.dto.ts\n            \n            class\n            PaginationQueryDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/pagination/interfaces/paginated.interface.ts\n            \n            interface\n            Paginated\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/pagination/providers/pagination.provider.ts\n            \n            injectable\n            PaginationProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/dtos/create-post-meta-option.dtos.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/meta-option.entity.ts\n            \n            entity\n            MetaOption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/meta-options.controller.ts\n            \n            controller\n            MetaOptionsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/providers/meta-options.service.ts\n            \n            injectable\n            MetaOptionsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/post/dtos/create-post.dtos.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/post/dtos/get-posts.dto.ts\n            \n            class\n            GetPostBaseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/post/dtos/get-posts.dto.ts\n            \n            class\n            GetPostDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/post/dtos/patch-post-dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/post/post.controller.ts\n            \n            controller\n            PostController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/post/post.entity.ts\n            \n            entity\n            Post\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/post/services/create-post.provider.ts\n            \n            injectable\n            CreatePostProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/post/services/post.service.ts\n            \n            injectable\n            PostService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/dtos/create-tag.dto.ts\n            \n            class\n            CreateTagDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/providers/tags.service.ts\n            \n            injectable\n            TagsService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/tag.entity.ts\n            \n            entity\n            Tag\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tags/tags.controller.ts\n            \n            controller\n            TagsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/uploads/providers/uploads.service.ts\n            \n            injectable\n            UploadsService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/uploads/uploads.controller.ts\n            \n            controller\n            UploadsController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dtos/create-many-user.dto.ts\n            \n            class\n            CreateManyUsersDTO\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/interfaces/google-user.interface.ts\n            \n            class\n            GoogleUser\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/providers/create-google-user.provider.ts\n            \n            injectable\n            CreateGoogleUserProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/create-user.provider.ts\n            \n            injectable\n            CreateUserProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/create-user.provider.ts\n            \n            function\n            InejectRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/providers/find-one-by-google-id.provider.ts\n            \n            injectable\n            FindOneByGoogleIdProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/find-one-user-by-email.provider.ts\n            \n            injectable\n            FindOneUserByEmailProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/user-create-many.provider.ts\n            \n            injectable\n            UserCreateManyProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/user.service.ts\n            \n            injectable\n            UserService\n            \n                33 %\n                (3/9)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.23\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.2\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.3.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            aws-sdk : ^2.1643.0\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            google-auth-library : ^9.11.0\n        \n            joi : ^17.12.2\n        \n            pg : ^8.11.5\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthType   (src/.../auth-type.ts)\n                        \n                        \n                            postStatus   (src/.../status.enum.ts)\n                        \n                        \n                            postType   (src/.../postType.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/enums/auth-type.ts\n    \n        \n            \n                \n                    \n                        \n                        AuthType\n                    \n                \n                        \n                            \n                                 Bearer\n                            \n                        \n                        \n                            \n                                 none\n                            \n                        \n            \n        \n\n    src/post/enums/status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : DRAFT\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : SCHEDULED\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : REVIEW\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : PUBLISHED\n                            \n                        \n            \n        \n\n    src/post/enums/postType.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : POST\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : PAGE\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : STORY\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : SERIES\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            InejectRepository   (src/.../create-user.provider.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/users/providers/create-user.provider.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        InejectRepository\n                        \n                    \n                \n            \n            \n                \nInejectRepository()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MetaOptionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaginationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UploadsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_exports\n\n\n\ncluster_PaginationModule_providers\n\n\n\ncluster_PostModule\n\n\n\ncluster_PostModule_providers\n\n\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\ncluster_UploadsModule\n\n\n\ncluster_UploadsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nHashingProvider \n\nHashingProvider \n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\n\n\nPostModule\n\nPostModule\n\nPostModule -->\n\nPaginationModule->PostModule\n\n\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nPaginationProvider \n\nPaginationProvider \n\nPaginationProvider  -->\n\nPaginationModule->PaginationProvider \n\n\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostModule -->\n\nTagsModule->PostModule\n\n\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nTagsService \n\nTagsService \n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nUploadsModule\n\nUploadsModule\n\nAppModule -->\n\nUploadsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostModule -->\n\nUsersModule->PostModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGenerateTokensProvider\n\nGenerateTokensProvider\n\nAuthModule -->\n\nGenerateTokensProvider->AuthModule\n\n\n\n\n\nGoogleAuthenticationService\n\nGoogleAuthenticationService\n\nAuthModule -->\n\nGoogleAuthenticationService->AuthModule\n\n\n\n\n\nRefreshTokensProvider\n\nRefreshTokensProvider\n\nAuthModule -->\n\nRefreshTokensProvider->AuthModule\n\n\n\n\n\nSignInProvider\n\nSignInProvider\n\nAuthModule -->\n\nSignInProvider->AuthModule\n\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nPaginationModule -->\n\nPaginationProvider->PaginationModule\n\n\n\n\n\nCreatePostProvider\n\nCreatePostProvider\n\nPostModule -->\n\nCreatePostProvider->PostModule\n\n\n\n\n\nPostService\n\nPostService\n\nPostModule -->\n\nPostService->PostModule\n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\nUploadsService\n\nUploadsService\n\nUploadsModule -->\n\nUploadsService->UploadsModule\n\n\n\n\n\nCreateGoogleUserProvider\n\nCreateGoogleUserProvider\n\nUsersModule -->\n\nCreateGoogleUserProvider->UsersModule\n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUsersModule -->\n\nCreateUserProvider->UsersModule\n\n\n\n\n\nFindOneByGoogleIdProvider\n\nFindOneByGoogleIdProvider\n\nUsersModule -->\n\nFindOneByGoogleIdProvider->UsersModule\n\n\n\n\n\nFindOneUserByEmailProvider\n\nFindOneUserByEmailProvider\n\nUsersModule -->\n\nFindOneUserByEmailProvider->UsersModule\n\n\n\n\n\nUserCreateManyProvider\n\nUserCreateManyProvider\n\nUsersModule -->\n\nUserCreateManyProvider->UsersModule\n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        8 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    8 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    21 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    15 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ActiveUser   (src/.../active-user.decorator.ts)\n                        \n                        \n                            Auth   (src/.../auth.decorator.ts)\n                        \n                        \n                            AUTH_TYPE_KEY   (src/.../auth.constants.ts)\n                        \n                        \n                            ENV   (src/.../app.module.ts)\n                        \n                        \n                            REQUEST_USER_KEY   (src/.../auth.constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/decorators/active-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ActiveUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n    (field: keyof ActiveUserData | undefined, ctx: ExecutionContext) => {\n        const request = ctx.switchToHttp().getRequest()\n        const user: ActiveUserData = request[REQUEST_USER_KEY]\n        return field ? user?.[field] : user\n    }\n)\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Auth\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...authTypes: AuthType[]) => SetMetadata(AUTH_TYPE_KEY, authTypes)\n                    \n                \n\n\n        \n    \n\n    src/auth/constants/auth.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AUTH_TYPE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'authType'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        REQUEST_USER_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'user'\n                    \n                \n\n\n        \n    \n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
