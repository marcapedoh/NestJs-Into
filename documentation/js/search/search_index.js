var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/guards/AccessTokenGuard.html",[0,2.798,1,2.165]],["body/guards/AccessTokenGuard.html",[1,2.666,2,3.161,3,0.171,4,0.151,5,0.151,6,3.98,7,2.711,8,0.298,9,1.283,10,2.036,11,6.07,12,2.623,13,4.513,14,1.364,15,3.161,16,5.412,17,4.513,18,4.383,19,0.701,20,3.161,21,1.573,22,0.02,23,1.423,24,0.575,25,1.045,26,3.161,27,5.74,28,3.161,29,3.87,30,1.22,31,2.877,32,4.513,33,4.024,34,3.161,35,1.423,36,2.328,37,0.392,38,1.741,39,0.805,40,4.019,41,0.564,42,1.741,43,1.868,44,3.161,45,2.711,46,2.015,47,2.414,48,2.414,49,2.414,50,3.161,51,0.171,52,0.052,53,2.711,54,1.533,55,1.419,56,2.711,57,2.962,58,3.161,59,6.07,60,3.161,61,2.486,62,1.948,63,1.741,64,4.513,65,1.291,66,3.161,67,3.161,68,3.161,69,1.741,70,1.741,71,1.283,72,1.445,73,3.161,74,3.161,75,3.161,76,3.161,77,2.711,78,2.711,79,3.161,80,3.161,81,3.161,82,3.161,83,0.012,84,0.012]],["title/controllers/AppController.html",[85,1.417,86,2.541]],["body/controllers/AppController.html",[3,0.276,4,0.244,5,0.244,22,0.02,35,1.381,37,0.374,41,0.911,51,0.276,52,0.084,54,2.477,55,1.606,71,1.452,83,0.016,84,0.016,85,2.398,86,4.299,87,1.976,88,4.38,89,3.943,90,4.38,91,4.38,92,5.108]],["title/modules/AppModule.html",[93,1.276,94,2.541]],["body/modules/AppModule.html",[1,2.401,3,0.148,4,0.131,5,0.131,22,0.02,24,0.299,37,0.437,38,1.508,41,0.488,42,1.508,43,1.617,46,1.745,51,0.148,52,0.045,57,1.412,72,1.251,83,0.011,84,0.011,86,3.361,87,1.572,89,3.547,90,2.347,93,1.688,94,4.997,95,1.251,96,1.251,97,1.412,98,1.412,99,1.251,100,2.501,101,1.412,102,2.347,103,2.347,104,2.347,105,3.547,106,3.826,107,3.547,108,3.826,109,3.853,110,3.307,111,2.097,112,1.412,113,1.327,114,2.09,115,2.863,116,2.738,117,2.738,118,2.738,119,1.508,120,2.738,121,2.738,122,1.745,123,1.118,124,1.415,125,2.738,126,2.738,127,1.251,128,1.412,129,2.738,130,1.412,131,2.738,132,3.103,133,4.599,134,2.738,135,4.064,136,2.738,137,4.064,138,2.738,139,4.064,140,2.738,141,2.09,142,2.738,143,3.485,144,1.898,145,2.738,146,2.09,147,3.701,148,2.347,149,2.738,150,2.738,151,4.064,152,2.738,153,2.738,154,2.738,155,2.738,156,2.738,157,2.738,158,2.738,159,1.617,160,2.738,161,2.738,162,2.738,163,2.738,164,2.738,165,2.738,166,2.738,167,2.738,168,1.617,169,2.738,170,2.738,171,2.738,172,1.898,173,2.738,174,2.09,175,2.09,176,2.09,177,2.09]],["title/injectables/AppService.html",[39,0.653,89,2.165]],["body/injectables/AppService.html",[3,0.275,4,0.243,5,0.243,8,0.48,9,1.758,19,0.678,22,0.019,30,1.375,35,1.672,37,0.307,39,1.103,41,0.907,51,0.275,52,0.084,71,1.446,83,0.016,84,0.016,89,3.654,91,5.943,178,1.867,179,4.363,180,5.088,181,5.088,182,5.088,183,4.363]],["title/controllers/AuthController.html",[85,1.417,184,2.541]],["body/controllers/AuthController.html",[3,0.237,4,0.21,5,0.21,8,0.415,9,1.605,10,2.412,19,0.586,21,1.314,22,0.02,23,1.188,24,0.481,25,0.873,30,1.188,37,0.376,41,0.784,51,0.237,52,0.073,54,2.132,55,1.383,71,1.25,83,0.015,84,0.015,85,1.701,87,1.701,184,3.915,185,3.77,186,2.803,187,4.397,188,2.063,189,4.311,190,3.357,191,4.114,192,1.25,193,5.645,194,4.397,195,4.397,196,2.009,197,2.803,198,4.397,199,3.77,200,1.25,201,3.435,202,3.77,203,3.357,204,4.397,205,4.397,206,4.397,207,4.397]],["title/modules/AuthModule.html",[93,1.276,105,2.165]],["body/modules/AuthModule.html",[3,0.201,4,0.178,5,0.178,22,0.02,37,0.428,41,0.665,42,2.055,43,2.204,46,2.377,47,2.848,51,0.201,52,0.062,83,0.013,84,0.013,87,1.959,93,2.003,95,1.704,96,1.704,97,1.924,98,1.924,99,1.704,100,2.966,101,2.966,105,4.191,110,2.79,111,2.613,112,1.924,113,1.809,115,2.204,132,2.848,141,2.848,174,2.848,175,2.848,176,2.848,177,2.848,184,3.987,201,3.974,202,3.198,208,3.198,209,3.198,210,3.198,211,3.571,212,3.929,213,3.73,214,2.992,215,3.73,216,3.198,217,3.73,218,3.511,219,3.73,220,3.198,221,3.198]],["title/injectables/AuthService.html",[39,0.653,201,2.018]],["body/injectables/AuthService.html",[3,0.212,4,0.188,5,0.188,8,0.371,9,1.491,10,2.284,12,2.396,14,1.696,19,0.786,21,1.568,22,0.02,23,1.417,24,0.573,25,1.042,30,1.417,37,0.38,38,2.164,39,0.935,41,0.701,51,0.212,52,0.065,55,1.649,65,1.604,71,1.491,72,1.795,83,0.014,84,0.014,178,1.441,188,2.234,189,4.004,190,4.004,191,3.877,196,1.795,201,2.889,203,3,212,4.072,214,2.321,220,3.369,221,3.369,222,3.369,223,5.401,224,3,225,3.342,226,3.929,227,3.929,228,3.369,229,3.929,230,3,231,3.929,232,3.929]],["title/injectables/BcryptProvider.html",[39,0.653,218,2.541]],["body/injectables/BcryptProvider.html",[3,0.215,4,0.191,5,0.191,8,0.376,9,1.505,10,2.301,19,0.706,21,1.583,22,0.02,23,1.431,24,0.579,25,1.052,30,1.431,31,4.039,35,1.922,37,0.359,39,0.945,41,0.711,51,0.215,52,0.066,53,3.419,57,2.057,65,1.628,71,1.505,83,0.014,84,0.014,178,1.463,188,1.968,211,2.733,218,3.673,233,3.419,234,4.541,235,4.541,236,4.541,237,5.813,238,5.433,239,3.988,240,3.673,241,4.541,242,3.988,243,3.419,244,4.541,245,5.296,246,3.988,247,3.988,248,3.988]],["title/classes/CreateManyUsersDTO.html",[52,0.06,249,2.165]],["body/classes/CreateManyUsersDTO.html",[3,0.234,4,0.207,5,0.207,8,0.41,19,0.578,22,0.02,24,0.741,37,0.395,51,0.234,52,0.102,72,2.832,83,0.015,84,0.015,124,1.511,192,1.233,249,3.307,250,1.679,251,4.274,252,3.568,253,3.009,254,1.76,255,3.95,256,3.175,257,4.34,258,4.8,259,4.274,260,4.8,261,4.34,262,3.721,263,4.34,264,4.8,265,3.084,266,4.8,267,1.772,268,1.983,269,2.564,270,2.766,271,3.882,272,1.983,273,3.721]],["title/classes/CreatePostDto.html",[52,0.06,274,2.165]],["body/classes/CreatePostDto.html",[3,0.101,4,0.089,5,0.089,8,0.176,19,0.812,22,0.02,24,0.737,25,1.234,29,2.586,35,1.647,36,0.962,37,0.309,51,0.101,52,0.063,70,1.661,72,1.994,83,0.008,84,0.008,127,1.378,192,1.732,200,1.795,250,0.721,254,1.194,258,2.586,259,3.331,260,2.586,262,1.599,264,2.586,265,2.824,266,2.586,267,0.761,270,1.189,271,3.554,272,0.852,273,2.586,274,1.782,275,5.327,276,1.599,277,3.797,278,4.626,279,2.633,280,2.9,281,4.289,282,3.256,283,2.633,284,3.322,285,2.421,286,3.054,287,4.626,288,1.443,289,1.865,290,3.016,291,4.327,292,2.244,293,1.865,294,1.865,295,1.865,296,1.865,297,3.016,298,3.016,299,4.289,300,3.016,301,1.865,302,2.403,303,2.586,304,1.865,305,4.791,306,1.661,307,1.865,308,1.865,309,1.865,310,2.317,311,3.741,312,4.363,313,3.016,314,1.865,315,2.578,316,1.865,317,3.741,318,3.016,319,3.016,320,3.016,321,1.865,322,1.865,323,3.016,324,3.741,325,3.016,326,3.016,327,1.865,328,1.865,329,1.865,330,1.599,331,3.256,332,1.599,333,3.741,334,3.741,335,2.303,336,2.586,337,2.586,338,2.586,339,2.586,340,2.586,341,1.599,342,1.865,343,3.658,344,1.865,345,2.586,346,3.016,347,1.865,348,1.865,349,1.865,350,2.586,351,1.865,352,1.865,353,1.865,354,1.865,355,1.865,356,2.9,357,3.016,358,2.303,359,3.094,360,2.781,361,2.586,362,1.424,363,1.424,364,1.424,365,1.599,366,1.599,367,1.293,368,1.293,369,4.12,370,1.865,371,1.865,372,1.865,373,2.586,374,1.599,375,1.599,376,1.865,377,1.865,378,1.865,379,1.865,380,1.599,381,1.865,382,2.303,383,1.865]],["title/classes/CreatePostMetaOptionsDto.html",[52,0.06,302,2.018]],["body/classes/CreatePostMetaOptionsDto.html",[3,0.267,4,0.236,5,0.236,8,0.466,19,0.658,22,0.019,24,0.54,35,1.641,37,0.298,51,0.267,52,0.1,83,0.016,84,0.016,127,2.775,192,1.403,200,1.726,250,1.91,254,1.909,265,3.345,267,2.016,302,3.345,358,4.636,360,3.147,367,4.21,382,5.021,384,2.944,385,4.233,386,4.937,387,4.937]],["title/classes/CreateTagDto.html",[52,0.06,388,2.335]],["body/classes/CreateTagDto.html",[3,0.182,4,0.161,5,0.161,8,0.318,19,0.828,22,0.019,23,1.473,24,0.68,25,1.28,35,1.879,37,0.285,51,0.182,52,0.078,83,0.012,84,0.012,192,1.767,200,0.958,250,1.304,254,1.485,265,3.002,267,1.376,271,3.779,272,1.54,279,3.779,283,3.779,284,4.312,291,4.108,299,3.605,310,2.167,330,2.89,331,4.673,332,2.89,333,5.064,334,5.064,335,3.605,336,4.049,337,4.049,338,4.049,339,4.049,340,4.049,341,2.89,358,3.605,359,3.254,360,3.765,361,4.049,362,2.573,363,2.573,364,2.573,369,4.51,374,2.89,375,4.049,380,2.89,388,3.01,389,5.526,390,2.89,391,3.37,392,3.37,393,3.37,394,3.37,395,3.37,396,3.37,397,3.37,398,3.37,399,3.37,400,2.89]],["title/classes/CreateUserDto.html",[52,0.06,256,1.777]],["body/classes/CreateUserDto.html",[3,0.196,4,0.173,5,0.173,8,0.343,19,0.812,22,0.019,24,0.666,25,0.987,35,1.858,37,0.219,51,0.196,52,0.082,83,0.013,84,0.013,168,3.773,192,1.733,250,1.403,251,4.876,253,2.516,254,1.562,256,2.41,265,3.358,267,1.481,288,1.644,335,3.794,359,2.737,360,4.07,362,2.77,363,2.77,364,2.77,400,4.261,401,3.122,402,4.327,403,4.86,404,3.628,405,3.628,406,3.628,407,3.628,408,3.628,409,3.628,410,3.628,411,6.096,412,4.969,413,4.969,414,4.969,415,4.969,416,4.969,417,4.969,418,4.383,419,4.969,420,6.096,421,4.969,422,4.969,423,4.969,424,3.628,425,4.261,426,5.668,427,3.628,428,3.628]],["title/injectables/CreateUserProvider.html",[39,0.653,429,2.165]],["body/injectables/CreateUserProvider.html",[3,0.165,4,0.146,5,0.146,8,0.288,9,1.251,10,1.996,12,2.011,14,1.899,19,0.586,21,1.315,22,0.02,23,1.189,24,0.481,25,0.874,30,0.825,33,2.805,36,2.271,37,0.376,38,1.681,39,0.785,41,0.544,51,0.165,52,0.05,55,1.384,61,3.112,62,2.438,63,3.112,65,2.107,69,2.424,70,2.843,71,0.868,83,0.011,84,0.011,123,1.246,124,1.533,168,1.803,172,3.052,178,1.12,188,1.707,196,1.395,211,3.396,214,1.803,256,3.025,269,1.803,310,1.615,401,2.424,429,3.049,430,3.941,431,2.331,432,3.773,433,3.052,434,2.914,435,3.052,436,3.773,437,3.773,438,3.052,439,2.331,440,1.803,441,1.395,442,1.181,443,1.946,444,3.052,445,1.803,446,2.331,447,2.331,448,5.161,449,3.052,450,3.052,451,3.36,452,3.36,453,3.773,454,3.579,455,3.36,456,2.617,457,2.331,458,2.617,459,3.052,460,2.331,461,4.425,462,3.052,463,3.052,464,3.052,465,2.331,466,3.052,467,2.617,468,2.331,469,3.052,470,3.052,471,3.052,472,3.052,473,2.617,474,2.331,475,3.052,476,3.052]],["title/injectables/FindOneUserByEmailProvider.html",[39,0.653,477,2.165]],["body/injectables/FindOneUserByEmailProvider.html",[3,0.202,4,0.179,5,0.179,8,0.353,9,1.442,10,2.227,12,1.709,14,2.19,19,0.676,21,1.517,22,0.02,23,1.371,24,0.555,25,1.008,30,1.011,35,1.556,36,2.618,37,0.373,39,0.905,40,2.856,41,0.667,51,0.202,52,0.062,55,1.176,61,2.795,62,2.19,63,2.06,65,1.527,69,2.06,70,2.06,71,1.063,83,0.013,84,0.013,123,1.527,124,2.472,178,1.372,188,1.905,196,1.709,310,1.372,401,3.172,418,3.67,434,3.185,440,2.21,442,1.447,443,2.384,445,2.21,446,2.856,477,2.998,478,4.937,479,3.207,480,4.35,481,3.74,482,3.74,483,5.074,484,4.35,485,3.74,486,3.74,487,3.207,488,3.74,489,3.74,490,2.856]],["title/classes/GetPostBaseDto.html",[52,0.06,491,2.541]],["body/classes/GetPostBaseDto.html",[3,0.24,4,0.212,5,0.212,8,0.419,19,0.757,22,0.02,24,0.621,25,1.312,37,0.378,51,0.24,52,0.103,83,0.015,84,0.015,192,1.615,250,1.718,254,1.787,267,1.813,272,2.03,315,3.902,359,3.451,491,3.94,492,4.784,493,3.391,494,5.372,495,5.372,496,5.682,497,4.441,498,4.441,499,3.808,500,5.372,501,3.357,502,3.08,503,3.391,504,2.624,505,3.08,506,3.808]],["title/classes/GetPostDto.html",[52,0.06,504,2.165]],["body/classes/GetPostDto.html",[3,0.263,4,0.232,5,0.232,22,0.019,37,0.394,51,0.263,52,0.108,83,0.016,84,0.016,250,1.882,267,1.986,272,2.223,315,3.555,359,3.598,491,3.373,492,3.714,493,3.714,494,4.171,495,4.171,499,4.171,500,5.601,501,3.859,502,3.373,503,3.714,504,3.555,505,4.172,506,5.159]],["title/classes/GetUsersParamDto.html",[52,0.06,507,2.335]],["body/classes/GetUsersParamDto.html",[3,0.243,4,0.215,5,0.215,8,0.425,19,0.6,22,0.019,24,0.689,25,1.138,37,0.38,51,0.243,52,0.104,83,0.015,84,0.015,124,1.996,192,1.279,250,1.741,254,1.802,255,3.653,267,1.838,270,2.869,272,2.057,288,2.086,291,3.653,310,1.652,356,4.376,359,3.157,369,4.376,507,3.653,508,4.914,509,3.86,510,2.799,511,4.501,512,5.731,513,5.731,514,4.501,515,4.501,516,4.501]],["title/injectables/HashingProvider.html",[39,0.653,211,1.89]],["body/injectables/HashingProvider.html",[3,0.233,4,0.206,5,0.206,8,0.407,9,1.584,19,0.743,21,1.666,22,0.019,23,1.507,24,0.609,25,1.107,30,1.507,31,4.163,35,1.951,37,0.26,39,0.994,41,0.769,51,0.233,52,0.071,83,0.014,84,0.014,178,1.582,211,2.876,234,4.78,235,4.78,236,4.78,237,5.94,238,5.297,240,3.865,241,4.78,517,3.697,518,7.049,519,4.311,520,4.311]],["title/entities/MetaOption.html",[521,1.777,522,1.89]],["body/entities/MetaOption.html",[3,0.201,4,0.178,5,0.178,8,0.352,19,0.859,22,0.02,24,0.727,35,1.369,37,0.306,51,0.201,52,0.062,83,0.013,84,0.013,128,3.431,159,2.204,192,1.833,200,1.994,254,1.592,288,1.675,306,2.79,315,3.643,324,4.342,382,4.39,384,3.224,442,1.443,510,2.348,521,2.456,522,2.613,523,3.198,524,4.93,525,4.93,526,4.93,527,3.73,528,3.987,529,3.73,530,2.586,531,3.511,532,3.73,533,3.198,534,4.342,535,4.342,536,3.73,537,3.73,538,4.93,539,3.73,540,2.848,541,3.511,542,4.342,543,4.342,544,2.848]],["title/controllers/MetaOptionsController.html",[85,1.417,545,2.541]],["body/controllers/MetaOptionsController.html",[3,0.236,4,0.209,5,0.209,8,0.412,9,1.598,19,0.582,21,1.306,22,0.02,23,1.181,24,0.477,25,0.868,30,1.181,37,0.375,41,0.779,51,0.236,52,0.072,54,2.118,55,1.373,71,1.242,83,0.015,84,0.015,85,1.69,87,1.69,127,2.569,128,2.9,186,2.784,188,2.057,192,1.242,197,2.784,200,1.865,268,2.569,302,3.615,368,3.029,384,2.726,441,1.996,545,3.898,546,3.745,547,5.621,548,4.368,549,4.368,550,5.621,551,3.321,552,3.745,553,3.745,554,4.368,555,4.368,556,3.745,557,4.368]],["title/modules/MetaOptionsModule.html",[93,1.276,106,2.335]],["body/modules/MetaOptionsModule.html",[3,0.24,4,0.212,5,0.212,22,0.02,37,0.412,41,0.792,51,0.24,52,0.073,83,0.015,84,0.015,87,2.198,93,2.182,95,2.03,96,2.03,97,2.291,98,2.291,99,2.03,100,3.232,101,2.291,106,4.45,111,2.931,112,2.291,113,2.154,115,2.624,122,2.831,123,1.813,127,2.596,128,2.291,384,2.154,522,2.291,545,4.344,551,4.125,552,3.808,553,3.808,558,3.808,559,3.808,560,4.441,561,4.441,562,2.831,563,4.441]],["title/injectables/MetaOptionsService.html",[39,0.653,551,2.165]],["body/injectables/MetaOptionsService.html",[3,0.22,4,0.195,5,0.195,8,0.385,9,1.527,10,2.325,12,1.861,14,1.758,19,0.716,21,1.606,22,0.02,23,1.452,24,0.587,25,1.067,30,1.101,37,0.401,39,0.958,41,0.726,51,0.22,52,0.067,55,1.281,65,1.663,71,1.158,83,0.014,84,0.014,123,1.663,127,2.455,178,1.494,188,1.988,196,1.861,200,1.158,268,2.455,302,3.658,368,2.824,384,2.914,434,3.297,441,1.861,442,1.576,445,2.406,522,2.771,551,3.173,562,2.596,564,5.153,565,3.493,566,4.073,567,4.073,568,4.606,569,5.371,570,4.073,571,4.073,572,4.073,573,4.073]],["title/interfaces/Paginated.html",[574,2.541,575,2.335]],["body/interfaces/Paginated.html",[3,0.247,4,0.219,5,0.219,8,0.432,22,0.019,24,0.781,35,1.862,51,0.247,83,0.015,84,0.015,127,3.052,240,4.631,254,1.822,288,2.21,574,3.175,575,3.693,576,4.579,577,3.926,578,5.727,579,5.449,580,6.679,581,3.926,582,3.926,583,3.926,584,3.926,585,3.926,586,3.926,587,3.926,588,3.926,589,3.926]],["title/modules/PaginationModule.html",[93,1.276,107,2.165]],["body/modules/PaginationModule.html",[3,0.252,4,0.223,5,0.223,22,0.019,37,0.354,41,0.834,51,0.252,52,0.077,83,0.015,84,0.015,93,2.235,95,2.137,96,2.137,97,2.412,98,2.412,99,2.137,100,3.311,101,3.311,107,4.242,111,3.029,112,2.412,113,2.267,590,4.009,591,4.009,592,4.009,593,4.406,594,4.676,595,4.676]],["title/injectables/PaginationProvider.html",[39,0.653,593,2.165]],["body/injectables/PaginationProvider.html",[3,0.168,4,0.148,5,0.148,8,0.293,9,1.266,10,2.015,12,1.418,14,1.922,19,0.593,21,1.557,22,0.02,23,1.203,24,0.569,25,0.884,30,0.838,31,2.838,33,4.118,37,0.378,38,1.709,39,0.794,41,0.553,48,2.369,51,0.168,52,0.051,55,0.975,57,3.334,62,1.339,65,1.818,71,0.882,83,0.015,84,0.012,127,1.418,144,2.151,178,1.138,188,1.723,240,2.151,292,3.362,434,3.334,442,1.2,501,3.362,503,2.369,575,2.838,578,2.66,579,2.66,581,2.66,582,4.466,583,2.66,584,4.88,585,2.66,586,2.66,587,2.66,588,2.66,589,2.66,593,2.631,596,2.66,597,4.452,598,3.102,599,3.102,600,4.452,601,3.102,602,3.102,603,3.102,604,3.102,605,3.102,606,3.102,607,3.102,608,2.66,609,6.61,610,5.691,611,2.369,612,4.452,613,3.102,614,3.102,615,3.102,616,3.102,617,3.102,618,3.102,619,3.102,620,3.102,621,3.102,622,4.452,623,3.102,624,3.102,625,3.102,626,3.102,627,3.102]],["title/classes/PaginationQueryDto.html",[52,0.06,501,2.165]],["body/classes/PaginationQueryDto.html",[3,0.229,4,0.203,5,0.203,8,0.401,19,0.735,22,0.02,24,0.735,25,1.289,37,0.333,51,0.229,52,0.101,83,0.014,84,0.014,192,1.568,250,1.641,254,1.735,267,1.732,270,2.704,288,2.282,292,3.259,359,3.377,458,3.638,501,3.259,502,4.251,628,3.638,629,4.251,630,3.907,631,4.212,632,4.212,633,4.73,634,5.516,635,4.242,636,4.242,637,6.13,638,3.638,639,4.242,640,4.242,641,4.242,642,4.242,643,4.242,644,4.242]],["title/classes/PatchPostDto.html",[52,0.06,645,2.335]],["body/classes/PatchPostDto.html",[3,0.246,4,0.218,5,0.218,8,0.431,19,0.608,22,0.019,24,0.499,37,0.383,51,0.246,52,0.095,83,0.015,84,0.015,192,1.297,200,1.896,250,1.765,254,1.818,265,3.184,267,1.863,268,2.085,271,4.008,272,2.085,274,2.696,288,1.913,310,1.674,356,4.414,505,4.008,510,2.81,645,3.685,646,4.957,647,3.913,648,5.781,649,4.563,650,5.781,651,4.563,652,4.563,653,3.913,654,3.484,655,3.913]],["title/classes/PatchUserDto.html",[52,0.06,656,2.541]],["body/classes/PatchUserDto.html",[3,0.283,4,0.251,5,0.251,22,0.019,37,0.38,51,0.283,52,0.087,83,0.016,84,0.016,250,2.031,253,3.64,256,2.545,268,2.399,269,3.101,505,4.37,653,4.501,656,4.37,657,4.501,658,6.302,659,4.501,660,4.501]],["title/entities/Post.html",[200,1.041,521,1.777]],["body/entities/Post.html",[3,0.12,4,0.106,5,0.106,8,0.21,19,0.867,22,0.02,24,0.765,25,1.293,35,1.699,36,1.792,37,0.349,51,0.12,52,0.037,72,3.081,83,0.009,84,0.009,124,1.929,127,1.587,128,1.149,159,1.316,192,1.85,200,1.214,254,1.092,278,3.661,279,2.961,280,3.992,281,4.569,282,3.661,283,2.961,284,2.961,285,2.722,286,2.722,287,3.661,288,1.149,302,1.227,306,3.297,315,2.052,343,3.992,365,1.91,366,1.91,367,1.545,368,1.545,373,5.131,384,1.08,442,0.862,510,1.743,521,1.684,522,2.488,528,2.961,530,4.15,531,4.628,533,1.91,541,4.264,542,2.978,543,2.978,544,2.652,562,1.42,631,3.682,661,1.91,662,2.961,663,2.228,664,3.474,665,5.539,666,2.228,667,4.135,668,2.228,669,4.23,670,4.23,671,2.978,672,2.228,673,2.228,674,3.474,675,2.228,676,2.228,677,3.474,678,2.228,679,2.228,680,2.978,681,2.652,682,2.228,683,2.228,684,3.052,685,1.91,686,3.474,687,2.228,688,2.228,689,3.474,690,2.228,691,3.474,692,2.978,693,3.474,694,2.228,695,2.228,696,2.228,697,2.228]],["title/controllers/PostController.html",[85,1.417,698,2.541]],["body/controllers/PostController.html",[3,0.152,4,0.134,5,0.134,8,0.265,9,1.177,19,0.723,21,1.623,22,0.02,23,1.467,24,0.593,25,1.078,30,1.467,35,1.329,37,0.366,41,0.501,51,0.152,52,0.046,54,1.361,55,0.883,62,1.787,71,1.543,83,0.011,84,0.011,85,1.086,87,1.086,119,2.709,186,1.789,188,2.267,192,1.543,197,1.789,200,1.898,272,1.283,274,3.579,285,2.639,288,1.627,299,4.145,310,1.992,441,1.283,504,3.208,510,1.69,645,3.861,654,2.143,655,3.55,698,2.871,699,2.407,700,3.55,701,4.14,702,4.14,703,4.14,704,2.407,705,4.14,706,4.14,707,4.14,708,5.429,709,5.429,710,4.14,711,2.807,712,2.807,713,2.807,714,3.411,715,2.807,716,2.807,717,4.217,718,4.14,719,2.807,720,4.217,721,2.807,722,3.55,723,4.14,724,4.655,725,2.807,726,2.807,727,2.407,728,3.161,729,3.55,730,3.161,731,2.407,732,4.217,733,4.217,734,2.407,735,2.143,736,2.407,737,1.946,738,2.407,739,2.807,740,2.807,741,2.807,742,2.807,743,3.55,744,3.55,745,2.807,746,2.807,747,2.807,748,2.807,749,2.807,750,2.807]],["title/modules/PostModule.html",[93,1.276,108,2.335]],["body/modules/PostModule.html",[3,0.209,4,0.185,5,0.185,22,0.02,37,0.427,41,0.69,51,0.209,52,0.064,83,0.013,84,0.013,87,2.009,93,2.041,95,1.769,96,1.769,97,1.997,98,1.997,99,1.769,100,3.023,101,1.997,107,3.972,108,4.626,109,3.972,110,3.703,111,2.679,112,1.997,113,1.877,115,3.068,119,3.703,122,2.468,123,1.581,128,1.997,200,1.1,216,3.319,384,1.877,522,2.679,562,2.468,698,4.063,731,3.319,751,3.319,752,3.871,753,3.319,754,3.871,755,3.871,756,3.319,757,3.871,758,3.871,759,3.871]],["title/injectables/PostService.html",[39,0.653,119,2.018]],["body/injectables/PostService.html",[3,0.101,4,0.089,5,0.089,8,0.177,9,0.86,10,2.406,12,1.999,14,0.808,19,0.64,21,1.435,22,0.02,23,1.298,24,0.525,25,0.954,30,1.182,31,1.929,33,2.428,35,1.029,36,1.561,37,0.375,39,0.54,41,0.334,51,0.101,52,0.031,54,0.908,55,1.51,57,0.966,61,2.645,62,2.072,63,2.829,65,2.619,69,2.098,71,1.243,72,2.194,83,0.008,84,0.008,119,1.667,123,0.765,124,0.652,128,0.966,130,2.789,178,0.687,188,2.058,196,1.74,200,1.696,224,1.43,225,2.49,230,1.43,274,3.034,280,3.666,286,3.586,288,1.26,292,1.106,303,1.606,350,1.606,384,0.908,434,2.789,439,1.43,440,1.106,441,0.856,442,0.724,445,1.106,451,2.908,452,2.908,454,2.641,455,2.908,457,1.43,460,1.43,465,2.311,490,1.43,504,2.584,510,2.207,522,0.966,534,1.606,562,1.194,568,3.265,575,1.194,593,3.193,608,1.606,611,1.43,629,1.298,630,1.194,645,3.06,654,1.43,662,3.033,684,1.032,700,2.595,704,2.595,714,2.098,717,1.606,720,3.265,735,1.43,736,1.606,737,1.298,738,1.606,756,1.606,760,1.606,761,2.595,762,3.026,763,3.808,764,1.872,765,1.872,766,2.311,767,1.872,768,3.026,769,1.872,770,3.026,771,1.872,772,1.872,773,1.872,774,1.872,775,1.872,776,1.872,777,1.872,778,2.908,779,1.872,780,3.026,781,3.026,782,3.808,783,1.872,784,1.872,785,1.872,786,1.872,787,1.872,788,1.872,789,1.872,790,1.872,791,3.026,792,3.026,793,1.872,794,1.872,795,1.872,796,1.872,797,1.872,798,1.606,799,1.872,800,1.872,801,1.872,802,1.872,803,1.606,804,1.872,805,1.872,806,1.872,807,3.026,808,1.872,809,3.026,810,1.872,811,3.026,812,1.872,813,3.026,814,1.872,815,3.026,816,1.872,817,3.026,818,1.872,819,3.026,820,1.872,821,1.606]],["title/classes/SignInDto.html",[52,0.06,191,2.165]],["body/classes/SignInDto.html",[3,0.261,4,0.231,5,0.231,8,0.456,19,0.798,22,0.019,24,0.655,35,1.84,37,0.291,51,0.261,52,0.099,83,0.016,84,0.016,168,3.847,191,3.539,192,1.702,250,1.868,254,1.883,265,3.587,267,1.972,360,3.818,401,3.587,425,5.136,822,4.141,823,4.829,824,4.829,825,4.829,826,4.829]],["title/injectables/SignInProvider.html",[39,0.653,212,2.165]],["body/injectables/SignInProvider.html",[3,0.174,4,0.154,5,0.154,8,0.304,9,1.298,10,2.055,12,2.643,14,1.971,16,5.598,17,4.555,18,4.416,19,0.609,21,1.365,22,0.02,23,1.234,24,0.499,25,0.907,30,0.869,37,0.394,38,1.771,39,0.815,40,2.455,41,0.573,42,1.771,43,1.899,46,2.049,47,2.455,51,0.174,52,0.053,55,1.819,56,2.757,57,1.659,61,2.516,62,1.971,63,1.771,65,2.169,69,1.771,70,1.771,71,0.914,83,0.012,84,0.012,124,1.12,168,2.698,178,1.18,188,1.758,189,3.487,190,3.487,191,3.609,196,1.469,203,2.455,211,3.369,212,2.698,214,1.899,224,2.455,225,3.166,228,2.757,230,2.455,243,2.757,306,1.771,310,1.18,401,1.771,440,1.899,447,2.455,487,2.757,827,4.555,828,2.757,829,3.215,830,3.215,831,3.215,832,5.312,833,3.215,834,3.215,835,3.215,836,3.215,837,4.567,838,3.215,839,3.215,840,3.215,841,3.215,842,3.215,843,3.215,844,3.215,845,3.215,846,3.215,847,3.215,848,3.215,849,3.215]],["title/entities/Tag.html",[521,1.777,684,2.018]],["body/entities/Tag.html",[3,0.155,4,0.137,5,0.137,8,0.27,19,0.894,22,0.02,23,1.344,24,0.771,25,1.088,35,1.813,37,0.253,51,0.155,52,0.047,72,3.065,83,0.011,84,0.011,159,1.691,192,1.906,200,1.734,254,1.32,279,3.449,283,3.449,284,3.449,288,1.389,306,3.018,310,1.825,315,3.604,442,1.107,510,2.031,521,2.036,524,4.265,525,4.265,526,4.265,528,3.449,530,4.046,531,4.651,535,3.6,538,4.265,540,2.185,541,4.23,544,3.206,667,4.698,669,4.657,670,4.657,671,3.6,680,4.698,681,4.184,684,2.313,685,2.454,692,3.6,778,3.798,821,3.6,850,2.454,851,4.974,852,2.861,853,4.974,854,2.861,855,2.861,856,2.861,857,2.861,858,2.861,859,2.861,860,2.861,861,2.861,862,2.861]],["title/controllers/TagsController.html",[85,1.417,863,2.541]],["body/controllers/TagsController.html",[3,0.199,4,0.176,5,0.176,8,0.348,9,1.428,19,0.762,21,1.709,22,0.02,23,1.545,24,0.625,25,1.136,30,1.545,37,0.345,41,0.658,51,0.199,52,0.061,54,1.789,55,1.16,71,1.625,83,0.013,84,0.013,85,1.427,87,1.427,130,2.949,186,2.351,188,2.316,192,1.625,197,2.351,200,1.625,268,2.297,286,2.351,288,2.193,388,4.224,441,1.686,510,2.506,556,3.163,714,4.703,728,4.365,730,2.816,766,2.816,863,3.485,864,3.163,865,5.026,866,3.688,867,3.688,868,3.688,869,3.688,870,3.688,871,3.688,872,3.163,873,3.163,874,3.688,875,3.688,876,3.688,877,3.688,878,3.688,879,3.688,880,3.688]],["title/modules/TagsModule.html",[93,1.276,109,2.165]],["body/modules/TagsModule.html",[3,0.235,4,0.208,5,0.208,22,0.02,37,0.409,41,0.776,51,0.235,52,0.072,83,0.015,84,0.015,87,2.17,93,2.162,95,1.99,96,1.99,97,2.246,98,2.246,99,1.99,100,3.202,101,3.202,109,4.174,111,2.894,112,2.246,113,2.111,115,2.572,122,2.775,123,1.778,130,3.81,684,2.398,863,4.304,873,3.733,881,3.733,882,3.733,883,3.733,884,4.354,885,4.354,886,3.733,887,4.354]],["title/injectables/TagsService.html",[39,0.653,130,1.89]],["body/injectables/TagsService.html",[3,0.17,4,0.15,5,0.15,8,0.297,9,1.278,10,2.71,12,1.438,14,1.358,19,0.807,21,1.811,22,0.02,23,1.638,24,0.662,25,1.204,30,1.548,37,0.366,39,0.802,41,0.561,51,0.17,52,0.052,55,0.989,65,2.339,71,1.628,72,2.055,83,0.012,84,0.012,123,1.285,130,2.321,178,1.154,188,2.318,196,2.617,286,2.006,288,2.235,388,3.862,434,2.955,441,1.438,442,1.217,445,1.859,510,2.474,684,2.478,714,3.119,766,3.434,798,3.857,872,2.698,886,2.698,888,2.698,889,4.498,890,4.498,891,4.498,892,3.146,893,3.146,894,4.498,895,4.498,896,3.146,897,3.146,898,4.498,899,3.146,900,4.498,901,3.146,902,3.146,903,3.146,904,3.146,905,3.857,906,3.146,907,3.146,908,3.146,909,3.146]],["title/entities/User.html",[124,1.276,521,1.777]],["body/entities/User.html",[3,0.182,4,0.161,5,0.161,8,0.319,19,0.859,22,0.02,24,0.76,35,1.826,37,0.285,51,0.182,52,0.056,72,2.702,83,0.012,84,0.012,124,1.647,159,1.996,168,3.225,192,1.833,200,1.833,254,1.487,288,1.565,306,3.553,401,3.007,402,4.167,403,4.68,442,1.307,510,2.229,521,2.294,528,3.785,530,4.1,531,4.686,540,2.58,541,4.316,669,5.16,670,5.16,681,3.612,778,4.167,910,2.897,911,6.757,912,3.379,913,3.379,914,3.379,915,3.379,916,3.379,917,3.379,918,4.73,919,3.379,920,4.73]],["title/injectables/UserCreateManyProvider.html",[39,0.653,921,2.165]],["body/injectables/UserCreateManyProvider.html",[3,0.179,4,0.159,5,0.159,8,0.313,9,1.328,10,2.091,14,1.433,19,0.622,21,1.397,22,0.02,23,1.263,24,0.511,25,0.928,30,0.897,37,0.373,39,0.833,41,0.592,51,0.179,52,0.055,54,1.61,55,1.044,57,1.713,61,2.978,62,2.333,63,2.978,65,2.619,69,2.978,70,2.978,71,0.943,83,0.012,84,0.012,124,2.043,172,2.302,178,1.218,188,1.789,196,1.517,249,3.653,252,2.116,256,1.61,268,2.47,269,2.76,310,1.714,440,1.961,441,2.135,442,1.284,443,2.116,461,2.846,905,2.846,921,2.76,922,4.635,923,2.846,924,4.006,925,3.319,926,5.5,927,3.319,928,4.006,929,3.319,930,3.319,931,4.672,932,3.319,933,3.319,934,3.319,935,3.319,936,4.672,937,2.846,938,3.319,939,3.319,940,3.319,941,3.319,942,3.319,943,3.319,944,3.319,945,3.319,946,3.319,947,4.672,948,3.319,949,3.319,950,3.319,951,3.319]],["title/injectables/UserService.html",[39,0.653,225,1.777]],["body/injectables/UserService.html",[3,0.105,4,0.093,5,0.093,8,0.184,9,0.889,10,2.433,12,2.511,14,1.349,18,3.418,19,0.697,21,1.563,22,0.02,23,1.414,24,0.572,25,1.039,30,1.324,33,1.243,35,1.058,36,1.006,37,0.385,38,1.074,39,0.557,41,0.348,42,1.074,51,0.105,52,0.065,55,1.645,57,1.613,61,2.156,62,1.689,63,1.722,65,1.828,69,1.074,70,1.722,71,1.393,83,0.008,84,0.008,123,0.796,124,2.151,133,4.711,172,2.713,178,0.715,188,2.168,196,2.046,199,1.672,201,3.027,214,1.152,223,1.672,225,1.516,249,2.895,252,1.243,255,3.124,256,2.376,268,1.429,269,1.847,285,1.243,288,1.949,310,1.436,401,2.156,402,2.387,418,1.243,429,2.645,432,2.68,434,2.31,436,3.355,437,2.68,439,1.489,440,1.152,441,1.429,442,0.754,443,1.243,445,1.152,446,1.489,447,1.489,451,1.489,452,1.489,453,1.672,454,1.352,455,1.489,456,1.672,457,1.489,465,1.489,474,1.489,477,3.246,480,2.68,484,2.68,490,2.387,507,2.854,510,2.332,629,2.713,630,2.494,737,1.352,761,2.68,921,2.645,924,2.68,926,1.672,928,2.68,937,2.68,952,1.672,953,2.68,954,3.126,955,3.126,956,3.126,957,3.126,958,1.949,959,3.913,960,3.913,961,3.913,962,1.949,963,1.949,964,1.949,965,3.126,966,1.949,967,3.126,968,1.949,969,1.949,970,3.126,971,1.949,972,3.913,973,3.126,974,2.68,975,3.126,976,1.672,977,1.949,978,1.672,979,1.672,980,1.672,981,1.672,982,1.672,983,1.949,984,1.949,985,1.949,986,1.949,987,1.949,988,1.949,989,1.949,990,1.949,991,1.949,992,1.949,993,1.949,994,1.949,995,3.126,996,2.68,997,3.126,998,1.949,999,1.949,1000,1.949,1001,1.949,1002,1.949,1003,1.949,1004,1.949,1005,3.126,1006,1.949,1007,1.949,1008,1.949]],["title/controllers/UsersController.html",[85,1.417,1009,2.541]],["body/controllers/UsersController.html",[1,1.413,3,0.129,4,0.114,5,0.114,6,1.659,8,0.226,9,1.043,19,0.667,21,1.497,22,0.02,23,1.541,24,0.67,25,0.995,30,1.354,36,1.234,37,0.37,41,0.427,51,0.129,52,0.039,54,1.16,55,0.752,62,1.584,71,1.621,78,2.051,83,0.01,84,0.01,85,0.925,87,0.925,146,1.827,186,1.525,188,2.19,192,1.424,197,1.525,200,1.269,225,2.166,249,3.369,252,2.34,255,3.635,256,2.765,259,3.825,269,2.639,272,1.093,285,1.525,288,2.262,291,3.193,292,2.169,306,2.759,310,2.092,441,1.677,507,3.635,510,0.977,629,3.954,630,3.905,633,2.051,656,4.248,724,3.147,727,3.147,728,3.825,729,3.83,730,3.825,732,3.147,733,3.147,734,2.051,735,1.827,737,1.659,743,2.051,744,3.147,976,2.051,996,3.147,1009,2.545,1010,2.051,1011,3.671,1012,3.671,1013,3.671,1014,3.671,1015,2.392,1016,3.671,1017,2.392,1018,2.392,1019,2.392,1020,2.392,1021,2.392,1022,2.392,1023,3.671,1024,3.671,1025,3.671,1026,2.392,1027,3.671,1028,3.147,1029,2.392,1030,3.671,1031,3.671,1032,3.671,1033,2.392,1034,3.671,1035,3.671,1036,2.392,1037,2.392,1038,2.392,1039,2.392,1040,2.392,1041,2.392,1042,2.392,1043,2.392,1044,2.051,1045,4.466,1046,2.392,1047,2.392,1048,3.671,1049,2.392,1050,1.827,1051,2.392,1052,2.392,1053,2.392,1054,2.392,1055,2.392,1056,2.392,1057,2.392,1058,2.392,1059,2.392,1060,2.392,1061,2.392]],["title/modules/UsersModule.html",[93,1.276,110,2.018]],["body/modules/UsersModule.html",[1,2.741,3,0.177,4,0.157,5,0.157,6,2.279,22,0.02,37,0.435,41,0.586,42,1.81,43,1.942,46,2.095,51,0.177,52,0.054,83,0.012,84,0.012,87,1.795,93,1.873,95,1.502,96,1.502,97,1.696,98,1.696,99,1.502,100,2.774,101,2.774,105,2.741,110,3.921,111,2.394,112,1.696,113,1.594,115,1.942,122,2.095,123,1.342,124,1.616,132,2.509,141,2.509,143,4.61,144,2.279,146,2.509,174,2.509,175,2.509,176,2.509,177,2.509,214,2.741,225,3.424,268,1.502,418,2.095,429,3.777,443,2.095,477,3.777,921,3.777,978,2.818,979,2.818,980,2.818,981,2.818,982,2.818,1009,3.728,1044,2.818,1050,2.509,1062,2.818,1063,2.818,1064,2.818,1065,3.287,1066,3.287,1067,3.287,1068,3.287,1069,3.287,1070,3.287,1071,3.287,1072,3.287,1073,3.287,1074,3.287,1075,3.287,1076,3.287,1077,3.287]],["title/coverage.html",[1078,3.82]],["body/coverage.html",[0,1.98,1,1.532,5,0.124,6,1.798,7,2.223,22,0.02,24,0.283,39,1.215,49,1.98,52,0.111,62,1.119,83,0.01,84,0.01,85,2.276,86,1.798,88,2.223,89,1.532,99,1.185,114,1.98,119,1.428,124,1.359,127,1.185,128,2.014,130,1.338,147,1.98,179,2.223,184,1.798,185,2.223,191,1.532,200,1.334,201,1.428,211,1.338,212,1.532,218,1.798,222,2.223,225,1.257,233,2.223,249,1.532,251,2.98,252,1.653,253,3.254,255,1.653,256,1.257,268,1.185,274,1.532,275,2.223,276,2.223,302,1.428,367,1.798,384,2.532,385,2.223,388,1.653,389,2.223,390,2.223,418,1.653,429,1.532,430,2.98,431,2.98,467,3.346,468,1.98,473,6.432,477,1.532,478,2.223,479,2.223,491,1.798,492,2.98,493,2.98,501,1.532,502,1.798,504,1.532,507,1.653,508,2.223,509,2.223,517,2.223,521,2.532,522,1.338,523,2.223,545,1.798,546,2.223,551,1.532,564,2.223,565,2.223,574,1.798,575,1.653,577,2.223,593,1.532,596,2.223,628,2.223,645,1.653,646,2.223,647,2.223,656,1.798,657,2.223,661,2.223,684,1.428,698,1.798,699,2.223,760,2.223,822,2.223,827,2.223,828,2.223,850,2.223,863,1.798,864,2.223,888,2.223,910,2.223,921,1.532,922,2.223,923,2.223,952,2.223,953,2.223,1009,1.798,1010,2.223,1078,1.98,1079,2.223,1080,2.593,1081,2.593,1082,6.65,1083,3.903,1084,6.104,1085,2.223,1086,6.65,1087,5.221,1088,2.223,1089,2.593,1090,4.692,1091,4.692,1092,2.593,1093,2.593,1094,2.593]],["title/dependencies.html",[96,2.014,1095,2.622]],["body/dependencies.html",[22,0.02,41,0.84,42,2.594,43,2.782,45,4.038,48,3.596,52,0.097,83,0.015,84,0.015,96,2.152,123,1.923,144,3.265,244,4.038,267,1.923,270,3.002,272,2.152,442,1.822,659,4.038,660,4.038,1096,4.709,1097,4.709,1098,6.437,1099,4.709,1100,4.709,1101,4.709,1102,4.709,1103,4.709,1104,4.709,1105,4.709,1106,4.709,1107,4.709,1108,4.709,1109,4.709,1110,4.709,1111,4.709,1112,4.709,1113,4.709,1114,4.709,1115,4.709,1116,4.709]],["title/miscellaneous/enumerations.html",[1117,1.807,1118,3.779]],["body/miscellaneous/enumerations.html",[8,0.468,22,0.019,83,0.016,84,0.016,200,1.73,281,4.647,317,5.218,343,4.647,345,5.218,630,3.879,632,5.606,1117,2.928,1118,4.249,1119,4.955,1120,4.955,1121,4.955,1122,6.085,1123,6.085,1124,4.955,1125,6.085,1126,6.085]],["title/miscellaneous/functions.html",[1117,1.807,1127,3.779]],["body/miscellaneous/functions.html",[8,0.516,22,0.018,30,1.477,83,0.017,84,0.017,99,3.14,430,4.173,431,4.929,468,5.246,474,4.173,1088,4.686,1117,3.229,1127,4.686,1128,5.465,1129,5.465]],["title/index.html",[8,0.289,1130,3.058,1131,3.058]],["body/index.html",[4,0.136,22,0.019,77,2.448,83,0.011,84,0.011,113,2.955,183,5.54,291,3.489,310,1.048,311,2.448,434,1.473,454,2.907,460,4.654,611,2.18,638,2.448,662,1.98,722,2.448,803,2.448,974,2.448,1028,2.448,1050,4.654,1078,2.18,1079,3.595,1132,2.855,1133,2.855,1134,4.968,1135,4.192,1136,2.855,1137,2.855,1138,2.855,1139,2.855,1140,4.192,1141,4.968,1142,2.855,1143,2.855,1144,5.474,1145,2.855,1146,6.461,1147,2.855,1148,6.299,1149,2.855,1150,2.855,1151,2.855,1152,4.192,1153,2.855,1154,4.192,1155,2.855,1156,4.968,1157,2.855,1158,4.192,1159,2.855,1160,2.855,1161,2.855,1162,2.855,1163,2.855,1164,5.474,1165,2.855,1166,4.192,1167,2.855,1168,2.855,1169,4.192,1170,5.474,1171,2.855,1172,4.192,1173,2.855,1174,4.192,1175,6.095,1176,5.474,1177,2.855,1178,4.192,1179,2.855,1180,2.855,1181,2.855,1182,2.855,1183,5.474,1184,2.855,1185,2.855,1186,2.855,1187,2.855,1188,4.192,1189,2.855,1190,2.855,1191,2.855,1192,2.855,1193,2.855,1194,4.192,1195,2.855,1196,2.855,1197,2.855,1198,4.192,1199,2.855,1200,2.855,1201,4.693,1202,2.855,1203,2.855,1204,2.855,1205,2.855,1206,2.855,1207,2.855,1208,2.855,1209,2.855,1210,4.192,1211,2.855,1212,2.855,1213,2.855,1214,2.855,1215,4.968,1216,2.855,1217,2.855,1218,2.855,1219,4.192,1220,2.855,1221,2.855,1222,2.855,1223,2.855,1224,4.192,1225,2.855,1226,2.855,1227,2.855,1228,4.192,1229,4.192,1230,2.855,1231,2.855,1232,2.855,1233,2.855,1234,2.855,1235,2.855,1236,2.855,1237,2.855,1238,2.855,1239,2.855,1240,2.855,1241,2.855,1242,2.855,1243,2.855,1244,2.855,1245,2.855,1246,2.855,1247,2.448]],["title/modules.html",[95,2.286]],["body/modules.html",[22,0.016,83,0.016,84,0.016,94,3.528,95,2.325,105,3.006,106,3.243,107,3.006,108,3.243,109,3.006,110,2.803,1201,6.268,1248,7.31,1249,7.31,1250,7.31]],["title/overview.html",[1251,4.29]],["body/overview.html",[0,2.414,22,0.019,83,0.012,84,0.012,87,1.223,89,3.109,93,1.101,94,5.048,95,1.445,96,1.445,97,1.631,98,1.631,99,1.445,100,1.631,101,1.631,102,2.711,103,2.711,104,2.711,105,3.995,106,3.869,107,3.839,108,4.424,109,3.925,110,3.895,111,2.328,112,1.631,113,1.533,119,2.899,130,3.352,159,1.868,178,1.16,201,3.579,208,2.711,209,2.711,210,2.711,211,2.962,212,3.109,225,3.151,250,1.223,292,2.666,429,3.109,477,3.109,551,3.109,558,2.711,559,2.711,574,2.192,590,2.711,591,2.711,592,2.711,593,3.839,751,2.711,753,2.711,881,2.711,882,2.711,883,2.711,921,3.109,1062,2.711,1063,2.711,1064,2.711,1251,2.711,1252,3.161,1253,3.161,1254,3.161,1255,3.161,1256,3.161]],["title/properties.html",[254,1.386,1095,2.622]],["body/properties.html",[22,0.019,83,0.017,84,0.017,254,1.769,310,2.065,662,3.902,1247,4.825,1257,5.627,1258,5.627,1259,5.627]],["title/miscellaneous/variables.html",[1117,1.807,1260,3.779]],["body/miscellaneous/variables.html",[8,0.508,22,0.019,24,0.588,35,1.453,49,4.882,83,0.017,84,0.017,114,4.105,124,1.873,147,4.882,148,4.61,631,4.882,632,4.882,1085,4.61,1117,3.177,1260,4.61,1261,5.377,1262,5.377]]],"invertedIndex":[["",{"_index":22,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":473,"title":{},"body":{"injectables/CreateUserProvider.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1258,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1107,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1114,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":1116,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1106,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1082,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1089,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1084,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1086,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1087,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1090,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1091,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":319,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":292,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"injectables/PostService.html":{},"controllers/UsersController.html":{},"overview.html":{}}}],["1.1.23",{"_index":1097,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":633,"title":{},"body":{"classes/PaginationQueryDto.html":{},"controllers/UsersController.html":{}}}],["10.0.0",{"_index":1098,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":1104,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":1100,"title":{},"body":{"dependencies.html":{}}}],["1024",{"_index":671,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["10})@apiquery({name",{"_index":1033,"title":{},"body":{"controllers/UsersController.html":{}}}],["12",{"_index":1256,"title":{},"body":{"overview.html":{}}}],["1234",{"_index":516,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["1234})@isoptional()@isint()@type(undefined",{"_index":514,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["13",{"_index":1255,"title":{},"body":{"overview.html":{}}}],["14",{"_index":1001,"title":{},"body":{"injectables/UserService.html":{}}}],["16t07:46:32+0000",{"_index":320,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["17.12.2",{"_index":1109,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":381,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["2.0.5",{"_index":1101,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":724,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":708,"title":{},"body":{"controllers/PostController.html":{}}}],["2024",{"_index":318,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["256",{"_index":680,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["3.2.2",{"_index":1099,"title":{},"body":{"dependencies.html":{}}}],["3/7",{"_index":1093,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":1254,"title":{},"body":{"overview.html":{}}}],["42",{"_index":1092,"title":{},"body":{"coverage.html":{}}}],["5.1.1",{"_index":1105,"title":{},"body":{"dependencies.html":{}}}],["512",{"_index":689,"title":{},"body":{"entities/Post.html":{}}}],["6",{"_index":1253,"title":{},"body":{"overview.html":{}}}],["7",{"_index":1252,"title":{},"body":{"overview.html":{}}}],["7.3.0",{"_index":1103,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1115,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":414,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["8.11.5",{"_index":1111,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":334,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["96",{"_index":911,"title":{},"body":{"entities/User.html":{}}}],["_",{"_index":73,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["abstract",{"_index":518,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["accesstokenguard",{"_index":1,"title":{"guards/AccessTokenGuard.html":{}},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["accestoken",{"_index":837,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["adding",{"_index":1072,"title":{},"body":{"modules/UsersModule.html":{}}}],["alice",{"_index":993,"title":{},"body":{"injectables/UserService.html":{}}}],["alice@doe.com",{"_index":994,"title":{},"body":{"injectables/UserService.html":{}}}],["allowing",{"_index":1189,"title":{},"body":{"index.html":{}}}],["already",{"_index":458,"title":{},"body":{"injectables/CreateUserProvider.html":{},"classes/PaginationQueryDto.html":{}}}],["amazing",{"_index":1234,"title":{},"body":{"index.html":{}}}],["anymore",{"_index":639,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["api",{"_index":996,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["apioperation",{"_index":732,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":705,"title":{},"body":{"controllers/PostController.html":{}}}],["apiproperty",{"_index":271,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty()@isstring()@minlength(3)@isnotempty()@maxlength(256",{"_index":395,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apiproperty({description",{"_index":649,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["apiproperty({example",{"_index":352,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({type",{"_index":257,"title":{},"body":{"classes/CreateManyUsersDTO.html":{}}}],["apipropertyoptional",{"_index":369,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional()@isoptional()@isjson",{"_index":397,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional()@isoptional()@isstring",{"_index":391,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional()@isoptional()@isurl()@maxlength(1024",{"_index":393,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional({description",{"_index":511,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["apiquery",{"_index":1045,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":733,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":734,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["apitags('posts",{"_index":740,"title":{},"body":{"controllers/PostController.html":{}}}],["apitags('users",{"_index":1047,"title":{},"body":{"controllers/UsersController.html":{}}}],["app.controller",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":90,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["appconfig",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":86,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":1050,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["application'})@apiresponse({status",{"_index":1026,"title":{},"body":{"controllers/UsersController.html":{}}}],["applications",{"_index":1140,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":94,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":89,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":258,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{}}}],["async",{"_index":10,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["audience",{"_index":842,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["auth",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":215,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/config/jwt.config",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guards/access",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":184,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authmodule",{"_index":105,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":662,"title":{},"body":{"entities/Post.html":{},"injectables/PostService.html":{},"index.html":{},"properties.html":{}}}],["authorid",{"_index":277,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["authservice",{"_index":201,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["await",{"_index":65,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["aws",{"_index":1178,"title":{},"body":{"index.html":{}}}],["backers",{"_index":1235,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":439,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["badrequestexception('please",{"_index":802,"title":{},"body":{"injectables/PostService.html":{}}}],["badrequestexception('the",{"_index":457,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["based",{"_index":1028,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["baseurl",{"_index":612,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["bcrypt",{"_index":244,"title":{},"body":{"injectables/BcryptProvider.html":{},"dependencies.html":{}}}],["bcrypt.compare(data",{"_index":248,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.gensalt",{"_index":246,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.hash(data",{"_index":247,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcryptprovider",{"_index":218,"title":{"injectables/BcryptProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["bearer",{"_index":79,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["between",{"_index":82,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["blog",{"_index":299,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"controllers/PostController.html":{}}}],["board",{"_index":1227,"title":{},"body":{"index.html":{}}}],["body",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["bootstrap",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1250,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1248,"title":{},"body":{"modules.html":{}}}],["buffer",{"_index":237,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["building",{"_index":1135,"title":{},"body":{"index.html":{}}}],["business",{"_index":955,"title":{},"body":{"injectables/UserService.html":{}}}],["canactivate",{"_index":11,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["canactivate(context",{"_index":26,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["cascade",{"_index":544,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["cascade'})@joincolumn",{"_index":536,"title":{},"body":{"entities/MetaOption.html":{}}}],["catch",{"_index":69,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/PostService.html":{},"injectables/SignInProvider.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["cause",{"_index":640,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["channel",{"_index":1203,"title":{},"body":{"index.html":{}}}],["character",{"_index":423,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":415,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["check",{"_index":460,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostService.html":{},"index.html":{}}}],["class",{"_index":52,"title":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/SignInDto.html":{}},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":250,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/SignInDto.html":{},"overview.html":{}}}],["clicks",{"_index":1188,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":1173,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":208,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":210,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":209,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule",{"_index":558,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_providers",{"_index":559,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_paginationmodule",{"_index":590,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_exports",{"_index":592,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_providers",{"_index":591,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_postmodule",{"_index":751,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_postmodule_imports",{"_index":752,"title":{},"body":{"modules/PostModule.html":{}}}],["cluster_postmodule_providers",{"_index":753,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_tagsmodule",{"_index":881,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_exports",{"_index":883,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_providers",{"_index":882,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1062,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1064,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":1063,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":541,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["column({type",{"_index":530,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["come",{"_index":1195,"title":{},"body":{"index.html":{}}}],["common/pagination/pagination.module",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["compare",{"_index":835,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["comparepassword",{"_index":234,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["comparepassword(data",{"_index":236,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["complete",{"_index":945,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["compodoc/compodoc",{"_index":1096,"title":{},"body":{"dependencies.html":{}}}],["config/app.config",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database.config",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["config/environment.validation",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["config/jwt.config",{"_index":47,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AuthModule.html":{},"injectables/SignInProvider.html":{}}}],["config/profile.config",{"_index":979,"title":{},"body":{"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["configmodule",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["configmodule.forfeature(jwtconfig",{"_index":174,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["configmodule.forfeature(profileconfig",{"_index":1077,"title":{},"body":{"modules/UsersModule.html":{}}}],["configmodule.forroot",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":133,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserService.html":{}}}],["configservice.get('database.autoloadentities",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.host",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.name",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.password",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.port",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.synchronize",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.user",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["configtype",{"_index":18,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{}}}],["conflictexception",{"_index":930,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["conflictexception('could",{"_index":944,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["connect",{"_index":937,"title":{},"body":{"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["connecting",{"_index":466,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["connection",{"_index":951,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["connectiong",{"_index":456,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UserService.html":{}}}],["console.log(environment",{"_index":988,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(isauth",{"_index":985,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(newurl",{"_index":617,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["console.log(this.profilconfiguration",{"_index":989,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(this.profilconfiguration.apikey",{"_index":990,"title":{},"body":{"injectables/UserService.html":{}}}],["const",{"_index":57,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"injectables/BcryptProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"injectables/SignInProvider.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["constants/auth.constants",{"_index":50,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["constructor",{"_index":14,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["constructor(@inject(forwardref",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(@injectrepository(metaoption",{"_index":571,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["constructor(@injectrepository(tag",{"_index":902,"title":{},"body":{"injectables/TagsService.html":{}}}],["constructor(authservice",{"_index":958,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(datasource",{"_index":925,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["constructor(jwtservice",{"_index":15,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["constructor(metaoptionrepository",{"_index":566,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["constructor(private",{"_index":54,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/TagsController.html":{},"injectables/UserCreateManyProvider.html":{},"controllers/UsersController.html":{}}}],["constructor(request",{"_index":598,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["constructor(tagsrepository",{"_index":892,"title":{},"body":{"injectables/TagsService.html":{}}}],["constructor(userreposiory",{"_index":481,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["constructor(userrepository",{"_index":433,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["constructor(userservice",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{},"injectables/SignInProvider.html":{}}}],["contain",{"_index":417,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["contant",{"_index":1073,"title":{},"body":{"modules/UsersModule.html":{}}}],["content",{"_index":278,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["context",{"_index":29,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/CreatePostDto.html":{}}}],["context.switchtohttp().getrequest",{"_index":58,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["controller",{"_index":85,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('meta",{"_index":554,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["controller('post",{"_index":739,"title":{},"body":{"controllers/PostController.html":{}}}],["controller('tags",{"_index":874,"title":{},"body":{"controllers/TagsController.html":{}}}],["controller('users",{"_index":1046,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":87,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["conversion",{"_index":643,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["correct",{"_index":804,"title":{},"body":{"injectables/PostService.html":{}}}],["courses",{"_index":1209,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":1078,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":268,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/TagsController.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["create(@body",{"_index":556,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/TagsController.html":{}}}],["create(createpostmetaoptiondto",{"_index":548,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["create(createpostmetaoptionsdto",{"_index":569,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["create(createtagdto",{"_index":866,"title":{},"body":{"controllers/TagsController.html":{}}}],["created",{"_index":710,"title":{},"body":{"controllers/PostController.html":{}}}],["createdate",{"_index":524,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createdatecolumn",{"_index":526,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createmany",{"_index":924,"title":{},"body":{"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["createmany(createmanyusersdto",{"_index":928,"title":{},"body":{"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["createmanyusers",{"_index":1011,"title":{},"body":{"controllers/UsersController.html":{}}}],["createmanyusers(@body",{"_index":1059,"title":{},"body":{"controllers/UsersController.html":{}}}],["createmanyusers(createmanyusersdto",{"_index":1015,"title":{},"body":{"controllers/UsersController.html":{}}}],["createmanyusersdto",{"_index":249,"title":{"classes/CreateManyUsersDTO.html":{}},"body":{"classes/CreateManyUsersDTO.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["createmanyusersdto.users",{"_index":938,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["createpost",{"_index":700,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["createpost(@body",{"_index":745,"title":{},"body":{"controllers/PostController.html":{}}}],["createpost(createpostdto",{"_index":704,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["createpostdto",{"_index":274,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["createpostdto.metaoptions",{"_index":785,"title":{},"body":{"injectables/PostService.html":{}}}],["createpostmetaoptiondto",{"_index":550,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createpostmetaoptionsdto",{"_index":302,"title":{"classes/CreatePostMetaOptionsDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"coverage.html":{}}}],["creates",{"_index":706,"title":{},"body":{"controllers/PostController.html":{}}}],["createtagdto",{"_index":388,"title":{"classes/CreateTagDto.html":{}},"body":{"classes/CreateTagDto.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["createtags",{"_index":889,"title":{},"body":{"injectables/TagsService.html":{}}}],["createtags(createtagdto",{"_index":895,"title":{},"body":{"injectables/TagsService.html":{}}}],["createuser",{"_index":432,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UserService.html":{}}}],["createuser(createuserdto",{"_index":437,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UserService.html":{}}}],["createuserdto",{"_index":256,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"classes/PatchUserDto.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":450,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["createuserprovider",{"_index":429,"title":{"injectables/CreateUserProvider.html":{}},"body":{"injectables/CreateUserProvider.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["createusers",{"_index":1012,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(@body",{"_index":1057,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(createuserdto",{"_index":1019,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusersprovider",{"_index":961,"title":{},"body":{"injectables/UserService.html":{}}}],["current",{"_index":587,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["currentpage",{"_index":583,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["data",{"_index":240,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["database",{"_index":172,"title":{},"body":{"modules/AppModule.html":{},"injectables/CreateUserProvider.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["databaseconfig",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["datasource",{"_index":926,"title":{},"body":{"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["date",{"_index":315,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["declarations",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":1205,"title":{},"body":{"index.html":{}}}],["default",{"_index":631,"title":{},"body":{"classes/PaginationQueryDto.html":{},"entities/Post.html":{},"miscellaneous/variables.html":{}}}],["defaultvaluepipe",{"_index":1039,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":1055,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":1053,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":19,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["delete",{"_index":714,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["delete(\"soft",{"_index":878,"title":{},"body":{"controllers/TagsController.html":{}}}],["delete('soft",{"_index":870,"title":{},"body":{"controllers/TagsController.html":{}}}],["delete(@query('id",{"_index":876,"title":{},"body":{"controllers/TagsController.html":{}}}],["delete(id",{"_index":766,"title":{},"body":{"injectables/PostService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["deleteat",{"_index":851,"title":{},"body":{"entities/Tag.html":{}}}],["deleted",{"_index":798,"title":{},"body":{"injectables/PostService.html":{},"injectables/TagsService.html":{}}}],["deletedatecolumn",{"_index":853,"title":{},"body":{"entities/Tag.html":{}}}],["deletepost",{"_index":701,"title":{},"body":{"controllers/PostController.html":{}}}],["deletepost(@query(\"id",{"_index":749,"title":{},"body":{"controllers/PostController.html":{}}}],["deletepost(id",{"_index":713,"title":{},"body":{"controllers/PostController.html":{}}}],["dependencies",{"_index":96,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":1164,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":1177,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":1169,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":1187,"title":{},"body":{"index.html":{}}}],["description",{"_index":310,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":1149,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":1216,"title":{},"body":{"index.html":{}}}],["discord",{"_index":1202,"title":{},"body":{"index.html":{}}}],["dive",{"_index":1204,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":1079,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["draft",{"_index":345,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["dto",{"_index":736,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["dto.ts",{"_index":647,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["dto.ts:12",{"_index":652,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["dtos/create",{"_index":441,"title":{},"body":{"injectables/CreateUserProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["dtos/get",{"_index":737,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["dtos/pagination",{"_index":603,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["dtos/patch",{"_index":735,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/UsersController.html":{}}}],["dtos/signin.dto",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["e",{"_index":806,"title":{},"body":{"injectables/PostService.html":{}}}],["e2e",{"_index":1159,"title":{},"body":{"index.html":{}}}],["each",{"_index":273,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{}}}],["eager",{"_index":665,"title":{},"body":{"entities/Post.html":{}}}],["efficient",{"_index":1136,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":1168,"title":{},"body":{"index.html":{}}}],["email",{"_index":401,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["email.provider",{"_index":982,"title":{},"body":{"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["email.provider.ts",{"_index":479,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"coverage.html":{}}}],["email.provider.ts:13",{"_index":485,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["email.provider.ts:7",{"_index":482,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["enabled",{"_index":641,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["encrypted",{"_index":238,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["enddate",{"_index":494,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{}}}],["endpoint",{"_index":997,"title":{},"body":{"injectables/UserService.html":{}}}],["ensure",{"_index":803,"title":{},"body":{"injectables/PostService.html":{},"index.html":{}}}],["enterprise",{"_index":1218,"title":{},"body":{"index.html":{}}}],["entire",{"_index":1074,"title":{},"body":{"modules/UsersModule.html":{}}}],["entities",{"_index":159,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":521,"title":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"coverage.html":{}}}],["entries",{"_index":1030,"title":{},"body":{"controllers/UsersController.html":{}}}],["enum",{"_index":373,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enumerations",{"_index":1118,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/posttype.enum",{"_index":365,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enums/status.enum",{"_index":366,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["env",{"_index":147,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["env.${env",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["env.development",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["environment",{"_index":986,"title":{},"body":{"injectables/UserService.html":{}}}],["environmentvalidation",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["err",{"_index":465,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["error",{"_index":70,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/CreatePostDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["error('function",{"_index":475,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["example",{"_index":291,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["executioncontext",{"_index":27,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["exist",{"_index":490,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["existing",{"_index":723,"title":{},"body":{"controllers/PostController.html":{}}}],["existinguser",{"_index":448,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["exists",{"_index":459,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["experience",{"_index":1207,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":848,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["export",{"_index":51,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["exports",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":48,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/PaginationProvider.html":{},"dependencies.html":{}}}],["extends",{"_index":505,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["extractrequestfromheader",{"_index":13,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["extractrequestfromheader(request",{"_index":32,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["false",{"_index":306,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["fast",{"_index":1181,"title":{},"body":{"index.html":{}}}],["featured",{"_index":297,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["featuredimageurl",{"_index":279,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["features",{"_index":1191,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":488,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["fetched",{"_index":1027,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetches",{"_index":1023,"title":{},"body":{"controllers/UsersController.html":{}}}],["few",{"_index":1183,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["filename",{"_index":998,"title":{},"body":{"injectables/UserService.html":{}}}],["finally",{"_index":948,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["finalresponse",{"_index":622,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["find",{"_index":972,"title":{},"body":{"injectables/UserService.html":{}}}],["findall",{"_index":761,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["findall(getuserparamdto",{"_index":965,"title":{},"body":{"injectables/UserService.html":{}}}],["findall(postquery",{"_index":768,"title":{},"body":{"injectables/PostService.html":{}}}],["findmultpletags",{"_index":890,"title":{},"body":{"injectables/TagsService.html":{}}}],["findmultpletags(tags",{"_index":898,"title":{},"body":{"injectables/TagsService.html":{}}}],["findonebyemail",{"_index":480,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"injectables/UserService.html":{}}}],["findonebyemail(email",{"_index":484,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"injectables/UserService.html":{}}}],["findonebyid",{"_index":957,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid(id",{"_index":970,"title":{},"body":{"injectables/UserService.html":{}}}],["findoneuserbyemailprovider",{"_index":477,"title":{"injectables/FindOneUserByEmailProvider.html":{}},"body":{"injectables/FindOneUserByEmailProvider.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["first",{"_index":585,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["firstname",{"_index":402,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["focus",{"_index":1190,"title":{},"body":{"index.html":{}}}],["follow",{"_index":1221,"title":{},"body":{"index.html":{}}}],["forwardref",{"_index":214,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["framework",{"_index":1134,"title":{},"body":{"index.html":{}}}],["full",{"_index":1217,"title":{},"body":{"index.html":{}}}],["function",{"_index":467,"title":{},"body":{"injectables/CreateUserProvider.html":{},"coverage.html":{}}}],["functions",{"_index":1127,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":1186,"title":{},"body":{"index.html":{}}}],["ger",{"_index":512,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["get('/:id/:optional",{"_index":1049,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id/:optional?')@apioperation({summary",{"_index":1022,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:userid",{"_index":718,"title":{},"body":{"controllers/PostController.html":{}}}],["gethello",{"_index":91,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getpost",{"_index":702,"title":{},"body":{"controllers/PostController.html":{}}}],["getpost(@param('userid",{"_index":741,"title":{},"body":{"controllers/PostController.html":{}}}],["getpost(userid",{"_index":716,"title":{},"body":{"controllers/PostController.html":{}}}],["getpostbasedto",{"_index":491,"title":{"classes/GetPostBaseDto.html":{}},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"coverage.html":{}}}],["getpostdto",{"_index":504,"title":{"classes/GetPostDto.html":{}},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["getting",{"_index":1130,"title":{"index.html":{}},"body":{}}],["getuserparamdto",{"_index":968,"title":{},"body":{"injectables/UserService.html":{}}}],["getusers",{"_index":1013,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(/*@param('id",{"_index":1051,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getusersparamdto",{"_index":1021,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersparamdto",{"_index":507,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["graph",{"_index":1212,"title":{},"body":{"index.html":{}}}],["grow",{"_index":1231,"title":{},"body":{"index.html":{}}}],["guard",{"_index":0,"title":{"guards/AccessTokenGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guarded",{"_index":1075,"title":{},"body":{"modules/UsersModule.html":{}}}],["guards",{"_index":2,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["hands",{"_index":1206,"title":{},"body":{"index.html":{}}}],["handy",{"_index":1196,"title":{},"body":{"index.html":{}}}],["hashing.provider",{"_index":243,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/SignInProvider.html":{}}}],["hashingprovider",{"_index":211,"title":{"injectables/HashingProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["hashpassword",{"_index":235,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["hashpassword(data",{"_index":241,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["header",{"_index":78,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/UsersController.html":{}}}],["headers",{"_index":1040,"title":{},"body":{"controllers/UsersController.html":{}}}],["hello",{"_index":181,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":1210,"title":{},"body":{"index.html":{}}}],["here",{"_index":1239,"title":{},"body":{"index.html":{}}}],["host",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["http://localhost.com/images/image1.jpg",{"_index":300,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["httpcode",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpexception",{"_index":975,"title":{},"body":{"injectables/UserService.html":{}}}],["https://nestjs.com",{"_index":1244,"title":{},"body":{"index.html":{}}}],["https://schema.org",{"_index":327,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https:\\/\\/schema.org\\\",\\r\\n",{"_index":378,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["httpstatus",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["httpstatus.moved_permanently",{"_index":995,"title":{},"body":{"injectables/UserService.html":{}}}],["id",{"_index":510,"title":{},"body":{"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["identifier",{"_index":1080,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":350,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostService.html":{}}}],["image",{"_index":298,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["implemented",{"_index":476,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["implements",{"_index":53,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/BcryptProvider.html":{}}}],["implicit",{"_index":642,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["import",{"_index":37,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["imports",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["in')@httpcode(httpstatus.ok",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{}}}],["in(tags",{"_index":907,"title":{},"body":{"injectables/TagsService.html":{}}}],["in.provider",{"_index":221,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["in.provider.ts",{"_index":828,"title":{},"body":{"injectables/SignInProvider.html":{},"coverage.html":{}}}],["in.provider.ts:10",{"_index":829,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["in.provider.ts:21",{"_index":830,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["inejectrepository",{"_index":468,"title":{},"body":{"injectables/CreateUserProvider.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["information",{"_index":1171,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":1193,"title":{},"body":{"index.html":{}}}],["inject",{"_index":38,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{}}}],["inject(forwardref",{"_index":447,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{}}}],["inject(jwtconfig.key",{"_index":56,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/SignInProvider.html":{}}}],["inject(profileconfig.key",{"_index":983,"title":{},"body":{"injectables/UserService.html":{}}}],["inject(request",{"_index":606,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["injectable",{"_index":39,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/HashingProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/HashingProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":178,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/HashingProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":445,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["injectrepository(metaoption",{"_index":776,"title":{},"body":{"injectables/PostService.html":{}}}],["injectrepository(post",{"_index":775,"title":{},"body":{"injectables/PostService.html":{}}}],["injectrepository(user",{"_index":446,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/UserService.html":{}}}],["install",{"_index":1185,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":1147,"title":{},"body":{"index.html":{}}}],["integer",{"_index":290,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["interact",{"_index":1213,"title":{},"body":{"index.html":{}}}],["interface",{"_index":574,"title":{"interfaces/Paginated.html":{}},"body":{"interfaces/Paginated.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":576,"title":{},"body":{"interfaces/Paginated.html":{}}}],["interfaces/paginated.interface",{"_index":605,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["intersectiontype",{"_index":499,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{}}}],["intersectiontype(getpostbasedto",{"_index":506,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{}}}],["inversepost",{"_index":795,"title":{},"body":{"injectables/PostService.html":{}}}],["ip",{"_index":1041,"title":{},"body":{"controllers/UsersController.html":{}}}],["isarray",{"_index":264,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{}}}],["isauth",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["isdate",{"_index":500,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{}}}],["isdate()@isoptional",{"_index":496,"title":{},"body":{"classes/GetPostBaseDto.html":{}}}],["isemail",{"_index":425,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["isemail()@isnotempty",{"_index":823,"title":{},"body":{"classes/SignInDto.html":{}}}],["isenum",{"_index":355,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":376,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus)@isnotempty()@apiproperty({enum",{"_index":344,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":372,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype)@isnotempty()@apiproperty({enum",{"_index":309,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isequal",{"_index":832,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["isglobal",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":356,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["isint()@isnotempty()@apiproperty({type",{"_index":289,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isiso8601",{"_index":357,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isiso8601()@isoptional()@apipropertyoptional({description",{"_index":316,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":358,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{}}}],["isnotempty",{"_index":265,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{},"classes/SignInDto.html":{}}}],["isnotempty()@isjson",{"_index":386,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["isoptional",{"_index":359,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{}}}],["isoptional()@apipropertyoptional({type",{"_index":304,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional()@isarray()@isint({each",{"_index":348,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional()@isjson()@apipropertyoptional({description",{"_index":322,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional()@ispositive",{"_index":634,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["isoptional()@isurl()@maxlength(1024)@apipropertyoptional({description",{"_index":296,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["ispositive",{"_index":637,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["isstring",{"_index":360,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["isstring()@isnotempty",{"_index":825,"title":{},"body":{"classes/SignInDto.html":{}}}],["isstring()@isnotempty()@apiproperty({description",{"_index":330,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["isstring()@isnotempty()@isemail()@maxlength(96",{"_index":404,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":406,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(8)@matches(/^(?=.*[a",{"_index":410,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@apipropertyoptional({description",{"_index":294,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":408,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["issuer",{"_index":844,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["isurl",{"_index":361,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["items",{"_index":260,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{}}}],["itemsperpage",{"_index":581,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["job",{"_index":1224,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":1226,"title":{},"body":{"index.html":{}}}],["john",{"_index":991,"title":{},"body":{"injectables/UserService.html":{}}}],["john@doe.com",{"_index":992,"title":{},"body":{"injectables/UserService.html":{}}}],["joi",{"_index":1108,"title":{},"body":{"dependencies.html":{}}}],["join",{"_index":1237,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":542,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["jointable",{"_index":691,"title":{},"body":{"entities/Post.html":{}}}],["json",{"_index":324,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{}}}],["jwtconfig",{"_index":46,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/SignInProvider.html":{},"modules/UsersModule.html":{}}}],["jwtconfiguration",{"_index":17,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/SignInProvider.html":{}}}],["jwtmodule",{"_index":141,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["jwtmodule.registerasync(jwtconfig.asprovider",{"_index":175,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["jwtservice",{"_index":16,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/SignInProvider.html":{}}}],["kamil",{"_index":1241,"title":{},"body":{"index.html":{}}}],["key",{"_index":1165,"title":{},"body":{"index.html":{}}}],["last",{"_index":586,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["lastname",{"_index":403,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["later",{"_index":455,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["learn",{"_index":1199,"title":{},"body":{"index.html":{}}}],["legend",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":670,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["letter",{"_index":420,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letters",{"_index":337,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["license",{"_index":1247,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1229,"title":{},"body":{"index.html":{}}}],["limit",{"_index":629,"title":{},"body":{"classes/PaginationQueryDto.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["line",{"_index":75,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["linenumber",{"_index":1000,"title":{},"body":{"injectables/UserService.html":{}}}],["linkedin",{"_index":1223,"title":{},"body":{"index.html":{}}}],["links",{"_index":578,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["list",{"_index":1024,"title":{},"body":{"controllers/UsersController.html":{}}}],["literal",{"_index":580,"title":{},"body":{"interfaces/Paginated.html":{}}}],["load",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["long",{"_index":416,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["looking",{"_index":1172,"title":{},"body":{"index.html":{}}}],["loop",{"_index":1220,"title":{},"body":{"index.html":{}}}],["lowercase",{"_index":421,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["main.ts",{"_index":644,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["makes",{"_index":1179,"title":{},"body":{"index.html":{}}}],["managing",{"_index":1192,"title":{},"body":{"index.html":{}}}],["many",{"_index":252,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["many')@useguards(accesstokenguard",{"_index":1017,"title":{},"body":{"controllers/UsersController.html":{}}}],["many.provider",{"_index":980,"title":{},"body":{"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["many.provider.ts",{"_index":923,"title":{},"body":{"injectables/UserCreateManyProvider.html":{},"coverage.html":{}}}],["many.provider.ts:11",{"_index":929,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["many.provider.ts:8",{"_index":927,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["manytomany",{"_index":692,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytomany(undefined",{"_index":685,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytoone",{"_index":693,"title":{},"body":{"entities/Post.html":{}}}],["manytoone(undefined",{"_index":663,"title":{},"body":{"entities/Post.html":{}}}],["matches",{"_index":362,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":428,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":374,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["matching",{"_index":84,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(totalitems",{"_index":619,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["mau",{"_index":1175,"title":{},"body":{"index.html":{}}}],["maxlength",{"_index":363,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(1024",{"_index":380,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(256",{"_index":375,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(512",{"_index":371,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["maxlength(96",{"_index":426,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":335,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["meta",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"entities/Post.html":{},"coverage.html":{}}}],["metadata",{"_index":1113,"title":{},"body":{"dependencies.html":{}}}],["metaoption",{"_index":522,"title":{"entities/MetaOption.html":{}},"body":{"entities/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["metaoptionrepository",{"_index":568,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostService.html":{}}}],["metaoptions",{"_index":280,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostService.html":{}}}],["metaoptions.post",{"_index":674,"title":{},"body":{"entities/Post.html":{}}}],["metaoptionscontroller",{"_index":545,"title":{"controllers/MetaOptionsController.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"coverage.html":{}}}],["metaoptionservice",{"_index":555,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["metaoptionsmodule",{"_index":106,"title":{"modules/MetaOptionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules.html":{},"overview.html":{}}}],["metaoptionsservice",{"_index":551,"title":{"injectables/MetaOptionsService.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{},"overview.html":{}}}],["metavalue",{"_index":382,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{}}}],["method",{"_index":967,"title":{},"body":{"injectables/UserService.html":{}}}],["methods",{"_index":9,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/HashingProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["minlength",{"_index":364,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":400,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":370,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":427,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":1117,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1228,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1152,"title":{},"body":{"index.html":{}}}],["module",{"_index":93,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":95,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":453,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UserService.html":{}}}],["more",{"_index":1170,"title":{},"body":{"index.html":{}}}],["moved",{"_index":1004,"title":{},"body":{"injectables/UserService.html":{}}}],["myśliwiec",{"_index":1242,"title":{},"body":{"index.html":{}}}],["name",{"_index":23,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateTagDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/HashingProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["need",{"_index":638,"title":{},"body":{"classes/PaginationQueryDto.html":{},"index.html":{}}}],["needs",{"_index":650,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["nest",{"_index":1141,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1246,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":183,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["nestjs/common",{"_index":41,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/HashingProvider.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":42,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"injectables/PaginationProvider.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":43,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/SignInProvider.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":659,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1102,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":272,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["new",{"_index":62,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/PaginationProvider.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/SignInProvider.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["newurl",{"_index":615,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&pages=${nextpage",{"_index":626,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&pages=${paginationquery.page",{"_index":625,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&pages=${previouspage",{"_index":627,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&pages=${totalpages",{"_index":624,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&pages=1",{"_index":623,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newuser",{"_index":461,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UserCreateManyProvider.html":{}}}],["newusers",{"_index":931,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["newusers.push(result",{"_index":941,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["next",{"_index":588,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["nextpage",{"_index":620,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["node.js",{"_index":1133,"title":{},"body":{"index.html":{}}}],["npm",{"_index":1146,"title":{},"body":{"index.html":{}}}],["null",{"_index":303,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostService.html":{}}}],["nullable",{"_index":531,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["number",{"_index":288,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["object",{"_index":305,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["objectliteral",{"_index":604,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["observable",{"_index":44,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["occured",{"_index":1002,"title":{},"body":{"injectables/UserService.html":{}}}],["offer",{"_index":1225,"title":{},"body":{"index.html":{}}}],["official",{"_index":1176,"title":{},"body":{"index.html":{}}}],["ondelete",{"_index":535,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["one",{"_index":418,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["onetomany",{"_index":920,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":917,"title":{},"body":{"entities/User.html":{}}}],["onetoone",{"_index":543,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["onetoone(undefined",{"_index":533,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["open",{"_index":1230,"title":{},"body":{"index.html":{}}}],["operations",{"_index":956,"title":{},"body":{"injectables/UserService.html":{}}}],["option.dtos",{"_index":368,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{}}}],["option.dtos.ts",{"_index":385,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["option.dtos.ts:6",{"_index":387,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["option.entity",{"_index":562,"title":{},"body":{"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{}}}],["option.entity.ts",{"_index":523,"title":{},"body":{"entities/MetaOption.html":{},"coverage.html":{}}}],["option.entity.ts:13",{"_index":532,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:16",{"_index":527,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:19",{"_index":539,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:26",{"_index":537,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:7",{"_index":529,"title":{},"body":{"entities/MetaOption.html":{}}}],["optional",{"_index":25,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["options",{"_index":547,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options.controller",{"_index":561,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.controller.ts",{"_index":546,"title":{},"body":{"controllers/MetaOptionsController.html":{},"coverage.html":{}}}],["options.controller.ts:11",{"_index":549,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options.module",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["options.module.ts",{"_index":560,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.service",{"_index":553,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["options.service.ts",{"_index":565,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["options.service.ts:12",{"_index":570,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options.service.ts:8",{"_index":567,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options/dtos/create",{"_index":367,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/Post.html":{},"coverage.html":{}}}],["options/meta",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"entities/Post.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["options/providers/meta",{"_index":564,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["out",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":1251,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1095,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":630,"title":{},"body":{"classes/PaginationQueryDto.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["page','story','series",{"_index":313,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["paginated",{"_index":575,"title":{"interfaces/Paginated.html":{}},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["paginatequery",{"_index":597,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginatequery(paginationquery",{"_index":600,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationmodule",{"_index":107,"title":{"modules/PaginationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules.html":{},"overview.html":{}}}],["paginationprovider",{"_index":593,"title":{"injectables/PaginationProvider.html":{}},"body":{"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"coverage.html":{},"overview.html":{}}}],["paginationquery",{"_index":602,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquery.limit",{"_index":610,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquery.page",{"_index":609,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquerydto",{"_index":501,"title":{"classes/PaginationQueryDto.html":{}},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["param",{"_index":727,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["param.dto",{"_index":976,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["param.dto.ts",{"_index":509,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:13",{"_index":515,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parameterindex",{"_index":472,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["parameters",{"_index":21,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/HashingProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["parseintpipe",{"_index":728,"title":{},"body":{"controllers/PostController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["part",{"_index":77,"title":{},"body":{"guards/AccessTokenGuard.html":{},"index.html":{}}}],["partialtype",{"_index":653,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":648,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":658,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["password",{"_index":168,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{}}}],["patch",{"_index":729,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["patchpostdto",{"_index":645,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["patchpostdto.content",{"_index":810,"title":{},"body":{"injectables/PostService.html":{}}}],["patchpostdto.featuredimageurl",{"_index":818,"title":{},"body":{"injectables/PostService.html":{}}}],["patchpostdto.id",{"_index":805,"title":{},"body":{"injectables/PostService.html":{}}}],["patchpostdto.posttype",{"_index":816,"title":{},"body":{"injectables/PostService.html":{}}}],["patchpostdto.publishon",{"_index":820,"title":{},"body":{"injectables/PostService.html":{}}}],["patchpostdto.slug",{"_index":814,"title":{},"body":{"injectables/PostService.html":{}}}],["patchpostdto.status",{"_index":812,"title":{},"body":{"injectables/PostService.html":{}}}],["patchpostdto.tags.length",{"_index":801,"title":{},"body":{"injectables/PostService.html":{}}}],["patchpostdto.title",{"_index":808,"title":{},"body":{"injectables/PostService.html":{}}}],["patchuser",{"_index":1014,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":1061,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(patchuserdto",{"_index":1037,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":656,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["payload",{"_index":64,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["per",{"_index":1032,"title":{},"body":{"controllers/UsersController.html":{}}}],["perform",{"_index":954,"title":{},"body":{"injectables/UserService.html":{}}}],["permanently",{"_index":1003,"title":{},"body":{"injectables/UserService.html":{}}}],["person",{"_index":328,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["person\\\"\\r\\n",{"_index":379,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["pg",{"_index":1110,"title":{},"body":{"dependencies.html":{}}}],["platform",{"_index":1174,"title":{},"body":{"index.html":{}}}],["please",{"_index":454,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["port",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["position",{"_index":1034,"title":{},"body":{"controllers/UsersController.html":{}}}],["possible",{"_index":311,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["post",{"_index":200,"title":{"entities/Post.html":{}},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":707,"title":{},"body":{"controllers/PostController.html":{}}}],["post'})@isstring()@minlength(4)@maxlength(512)@isnotempty",{"_index":353,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@matches(/^[a",{"_index":332,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["post('create",{"_index":1016,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('sign",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{}}}],["post.author",{"_index":918,"title":{},"body":{"entities/User.html":{}}}],["post.content",{"_index":809,"title":{},"body":{"injectables/PostService.html":{}}}],["post.controller",{"_index":755,"title":{},"body":{"modules/PostModule.html":{}}}],["post.dtos",{"_index":654,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["post.dtos.ts",{"_index":276,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["post.dtos.ts:115",{"_index":308,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:124",{"_index":293,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:17",{"_index":354,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:25",{"_index":314,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:32",{"_index":295,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:44",{"_index":342,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:53",{"_index":347,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:61",{"_index":329,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:71",{"_index":301,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:80",{"_index":321,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:92",{"_index":351,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.entity",{"_index":756,"title":{},"body":{"modules/PostModule.html":{},"injectables/PostService.html":{}}}],["post.featuredimageurl",{"_index":817,"title":{},"body":{"injectables/PostService.html":{}}}],["post.metaoptions",{"_index":534,"title":{},"body":{"entities/MetaOption.html":{},"injectables/PostService.html":{}}}],["post.metaoptions.id",{"_index":797,"title":{},"body":{"injectables/PostService.html":{}}}],["post.posttype",{"_index":815,"title":{},"body":{"injectables/PostService.html":{}}}],["post.publishon",{"_index":819,"title":{},"body":{"injectables/PostService.html":{}}}],["post.slug",{"_index":813,"title":{},"body":{"injectables/PostService.html":{}}}],["post.status",{"_index":811,"title":{},"body":{"injectables/PostService.html":{}}}],["post.tags",{"_index":821,"title":{},"body":{"injectables/PostService.html":{},"entities/Tag.html":{}}}],["post.title",{"_index":807,"title":{},"body":{"injectables/PostService.html":{}}}],["post/post.module",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["post/services/post.service",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["postcontroller",{"_index":698,"title":{"controllers/PostController.html":{}},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{},"coverage.html":{}}}],["postgres",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["postmodule",{"_index":108,"title":{"modules/PostModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"modules.html":{},"overview.html":{}}}],["postquery",{"_index":717,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["postquery.limit",{"_index":782,"title":{},"body":{"injectables/PostService.html":{}}}],["postquery.page",{"_index":781,"title":{},"body":{"injectables/PostService.html":{}}}],["postrepository",{"_index":763,"title":{},"body":{"injectables/PostService.html":{}}}],["posts",{"_index":778,"title":{},"body":{"injectables/PostService.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["posts.dto",{"_index":738,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["posts.dto.ts",{"_index":493,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"coverage.html":{}}}],["posts.dto.ts:12",{"_index":497,"title":{},"body":{"classes/GetPostBaseDto.html":{}}}],["posts.dto.ts:8",{"_index":498,"title":{},"body":{"classes/GetPostBaseDto.html":{}}}],["postservice",{"_index":119,"title":{"injectables/PostService.html":{}},"body":{"modules/AppModule.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":343,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["poststatus.draft",{"_index":697,"title":{},"body":{"entities/Post.html":{}}}],["posttype",{"_index":281,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["posttype.post",{"_index":696,"title":{},"body":{"entities/Post.html":{}}}],["prefix",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["previous",{"_index":589,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["previouspage",{"_index":621,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["primarygeneratedcolumn",{"_index":528,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["private",{"_index":12,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["process",{"_index":452,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["process.env.node_env",{"_index":148,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["production",{"_index":1154,"title":{},"body":{"index.html":{}}}],["profilconfiguration",{"_index":959,"title":{},"body":{"injectables/UserService.html":{}}}],["profileconfig",{"_index":978,"title":{},"body":{"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["progressive",{"_index":1132,"title":{},"body":{"index.html":{}}}],["project",{"_index":1144,"title":{},"body":{"index.html":{}}}],["promise",{"_index":31,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{}}}],["properties",{"_index":254,"title":{"properties.html":{}},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"entities/User.html":{},"properties.html":{}}}],["propertykey",{"_index":471,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["provide",{"_index":176,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["providers",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/bcrypt.provider",{"_index":219,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/create",{"_index":1069,"title":{},"body":{"modules/UsersModule.html":{}}}],["providers/find",{"_index":1070,"title":{},"body":{"modules/UsersModule.html":{}}}],["providers/hashing.provider",{"_index":217,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/meta",{"_index":552,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["providers/pagination.provider",{"_index":595,"title":{},"body":{"modules/PaginationModule.html":{}}}],["providers/sign",{"_index":220,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["providers/tags.service",{"_index":873,"title":{},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{}}}],["providers/user",{"_index":1068,"title":{},"body":{"modules/UsersModule.html":{}}}],["providers/user.service",{"_index":1044,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["published",{"_index":317,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["publishon",{"_index":282,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["query",{"_index":730,"title":{},"body":{"controllers/PostController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["query'})@apiquery({name",{"_index":1029,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit",{"_index":1052,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":1054,"title":{},"body":{"controllers/UsersController.html":{}}}],["query.dto",{"_index":503,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"injectables/PaginationProvider.html":{}}}],["query.dto.ts",{"_index":628,"title":{},"body":{"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["query.dto.ts:12",{"_index":636,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["query.dto.ts:8",{"_index":635,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["queryrunner",{"_index":932,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["queryrunner.committransaction",{"_index":942,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["queryrunner.connect",{"_index":934,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["queryrunner.manager.create(user",{"_index":939,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["queryrunner.manager.save(newuser",{"_index":940,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["queryrunner.release",{"_index":949,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["queryrunner.rollbacktransaction",{"_index":943,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["queryrunner.starttransaction",{"_index":935,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["questions",{"_index":1200,"title":{},"body":{"index.html":{}}}],["r\\n",{"_index":377,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["read",{"_index":1238,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":55,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["ready",{"_index":1163,"title":{},"body":{"index.html":{}}}],["real",{"_index":1214,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":1112,"title":{},"body":{"dependencies.html":{}}}],["registered",{"_index":1025,"title":{},"body":{"controllers/UsersController.html":{}}}],["relations",{"_index":780,"title":{},"body":{"injectables/PostService.html":{}}}],["release",{"_index":950,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["repository",{"_index":434,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["repository.count",{"_index":618,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["repository.find",{"_index":607,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["request",{"_index":33,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["request.headers.authorization?.split",{"_index":74,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["request[request_user_key",{"_index":68,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["request_user_key",{"_index":49,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["requesttimeoutexception",{"_index":440,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/PostService.html":{},"injectables/SignInProvider.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["requesttimeoutexception('could",{"_index":936,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["requesttimeoutexception('unable",{"_index":451,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["requesttimeoutexception(error",{"_index":487,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"injectables/SignInProvider.html":{}}}],["required",{"_index":259,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["requiring",{"_index":1182,"title":{},"body":{"index.html":{}}}],["reset",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":1194,"title":{},"body":{"index.html":{}}}],["response",{"_index":709,"title":{},"body":{"controllers/PostController.html":{}}}],["result",{"_index":905,"title":{},"body":{"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{}}}],["results",{"_index":83,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":71,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["returned",{"_index":1031,"title":{},"body":{"controllers/UsersController.html":{}}}],["returns",{"_index":30,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/HashingProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["review",{"_index":1123,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["run",{"_index":1148,"title":{},"body":{"index.html":{}}}],["runs",{"_index":1167,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":45,"title":{},"body":{"guards/AccessTokenGuard.html":{},"dependencies.html":{}}}],["salt",{"_index":245,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["scalable",{"_index":1137,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":1122,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["scheduled','review",{"_index":346,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["schema",{"_index":283,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["secret",{"_index":846,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["serialize",{"_index":323,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":1126,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["server",{"_index":1138,"title":{},"body":{"index.html":{}}}],["service/auth.service",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["services/post.service",{"_index":731,"title":{},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{}}}],["setup",{"_index":1145,"title":{},"body":{"index.html":{}}}],["side",{"_index":1139,"title":{},"body":{"index.html":{}}}],["sidebarenabled\":true",{"_index":383,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["signin",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["signin(@body",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(signindto",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["signindto",{"_index":191,"title":{"classes/SignInDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"coverage.html":{}}}],["signinprovider",{"_index":212,"title":{"injectables/SignInProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["simple",{"_index":1184,"title":{},"body":{"index.html":{}}}],["single",{"_index":973,"title":{},"body":{"injectables/UserService.html":{}}}],["skip",{"_index":608,"title":{},"body":{"injectables/PaginationProvider.html":{},"injectables/PostService.html":{}}}],["slug",{"_index":284,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["small",{"_index":336,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["softdelete",{"_index":865,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdelete(@query('id",{"_index":879,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdelete(id",{"_index":869,"title":{},"body":{"controllers/TagsController.html":{}}}],["softremove",{"_index":891,"title":{},"body":{"injectables/TagsService.html":{}}}],["softremove(id",{"_index":900,"title":{},"body":{"injectables/TagsService.html":{}}}],["source",{"_index":4,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["space",{"_index":81,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["spaces",{"_index":340,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["special",{"_index":422,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":513,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["split",{"_index":80,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["sponsors",{"_index":1233,"title":{},"body":{"index.html":{}}}],["src/.../app.module.ts",{"_index":1261,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.constants.ts",{"_index":1262,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../create",{"_index":1129,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":1128,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../posttype.enum.ts",{"_index":1120,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../status.enum.ts",{"_index":1119,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":88,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":179,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":180,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:12",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":1067,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":213,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/config/jwt.config",{"_index":1071,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/constants/auth.constants.ts",{"_index":1085,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dtos/signin.dto.ts",{"_index":822,"title":{},"body":{"classes/SignInDto.html":{},"coverage.html":{}}}],["src/auth/dtos/signin.dto.ts:10",{"_index":826,"title":{},"body":{"classes/SignInDto.html":{}}}],["src/auth/dtos/signin.dto.ts:6",{"_index":824,"title":{},"body":{"classes/SignInDto.html":{}}}],["src/auth/guards/access",{"_index":6,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["src/auth/providers/bcrypt.provider.ts",{"_index":233,"title":{},"body":{"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["src/auth/providers/bcrypt.provider.ts:11",{"_index":239,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/bcrypt.provider.ts:6",{"_index":242,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/hashing.provider",{"_index":444,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["src/auth/providers/hashing.provider.ts",{"_index":517,"title":{},"body":{"injectables/HashingProvider.html":{},"coverage.html":{}}}],["src/auth/providers/hashing.provider.ts:6",{"_index":520,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/hashing.provider.ts:8",{"_index":519,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/sign",{"_index":827,"title":{},"body":{"injectables/SignInProvider.html":{},"coverage.html":{}}}],["src/auth/service/auth.service",{"_index":977,"title":{},"body":{"injectables/UserService.html":{}}}],["src/auth/service/auth.service.ts",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/service/auth.service.ts:13",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/service/auth.service.ts:18",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/service/auth.service.ts:7",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/common/pagination/dtos/pagination",{"_index":502,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["src/common/pagination/interfaces/paginated.interface",{"_index":774,"title":{},"body":{"injectables/PostService.html":{}}}],["src/common/pagination/interfaces/paginated.interface.ts",{"_index":577,"title":{},"body":{"interfaces/Paginated.html":{},"coverage.html":{}}}],["src/common/pagination/pagination.module",{"_index":758,"title":{},"body":{"modules/PostModule.html":{}}}],["src/common/pagination/pagination.module.ts",{"_index":594,"title":{},"body":{"modules/PaginationModule.html":{}}}],["src/common/pagination/providers/pagination.provider",{"_index":773,"title":{},"body":{"injectables/PostService.html":{}}}],["src/common/pagination/providers/pagination.provider.ts",{"_index":596,"title":{},"body":{"injectables/PaginationProvider.html":{},"coverage.html":{}}}],["src/common/pagination/providers/pagination.provider.ts:15",{"_index":601,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["src/common/pagination/providers/pagination.provider.ts:9",{"_index":599,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["src/main.ts",{"_index":1088,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/meta",{"_index":384,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["src/post/dtos/create",{"_index":275,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/post/dtos/get",{"_index":492,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"coverage.html":{}}}],["src/post/dtos/patch",{"_index":646,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/post/enums/posttype.enum.ts",{"_index":1124,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/post/enums/status.enum.ts",{"_index":1121,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/post/post.controller.ts",{"_index":699,"title":{},"body":{"controllers/PostController.html":{},"coverage.html":{}}}],["src/post/post.controller.ts:15",{"_index":719,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:27",{"_index":712,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:38",{"_index":726,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:43",{"_index":715,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.entity",{"_index":540,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["src/post/post.entity.ts",{"_index":661,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/post/post.entity.ts:12",{"_index":673,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:18",{"_index":690,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:25",{"_index":676,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:33",{"_index":682,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:40",{"_index":683,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:46",{"_index":668,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:52",{"_index":679,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:59",{"_index":672,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:64",{"_index":678,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:74",{"_index":675,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:79",{"_index":666,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:86",{"_index":688,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.module.ts",{"_index":754,"title":{},"body":{"modules/PostModule.html":{}}}],["src/post/services/post.service.ts",{"_index":760,"title":{},"body":{"injectables/PostService.html":{},"coverage.html":{}}}],["src/post/services/post.service.ts:14",{"_index":764,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/services/post.service.ts:25",{"_index":769,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/services/post.service.ts:44",{"_index":765,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/services/post.service.ts:65",{"_index":767,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/services/post.service.ts:85",{"_index":771,"title":{},"body":{"injectables/PostService.html":{}}}],["src/tags/dtos/create",{"_index":389,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service",{"_index":772,"title":{},"body":{"injectables/PostService.html":{}}}],["src/tags/providers/tags.service.ts",{"_index":888,"title":{},"body":{"injectables/TagsService.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service.ts:12",{"_index":896,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:18",{"_index":899,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:28",{"_index":897,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:33",{"_index":901,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:8",{"_index":893,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tag.entity",{"_index":695,"title":{},"body":{"entities/Post.html":{}}}],["src/tags/tag.entity.ts",{"_index":850,"title":{},"body":{"entities/Tag.html":{},"coverage.html":{}}}],["src/tags/tag.entity.ts:15",{"_index":858,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:23",{"_index":861,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:29",{"_index":855,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:35",{"_index":860,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:42",{"_index":856,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:45",{"_index":852,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:48",{"_index":862,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:51",{"_index":854,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:56",{"_index":859,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:7",{"_index":857,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.controller.ts",{"_index":864,"title":{},"body":{"controllers/TagsController.html":{},"coverage.html":{}}}],["src/tags/tags.controller.ts:10",{"_index":867,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:15",{"_index":868,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:19",{"_index":871,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.module",{"_index":757,"title":{},"body":{"modules/PostModule.html":{}}}],["src/tags/tags.module.ts",{"_index":884,"title":{},"body":{"modules/TagsModule.html":{}}}],["src/users/dtos/create",{"_index":251,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":508,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":657,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/providers/create",{"_index":430,"title":{},"body":{"injectables/CreateUserProvider.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/users/providers/find",{"_index":478,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"coverage.html":{}}}],["src/users/providers/user",{"_index":922,"title":{},"body":{"injectables/UserCreateManyProvider.html":{},"coverage.html":{}}}],["src/users/providers/user.service",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{},"injectables/SignInProvider.html":{}}}],["src/users/providers/user.service.ts",{"_index":952,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/users/providers/user.service.ts:19",{"_index":962,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/user.service.ts:35",{"_index":966,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/user.service.ts:67",{"_index":971,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/user.service.ts:88",{"_index":964,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/user.service.ts:92",{"_index":963,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/user.service.ts:96",{"_index":969,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/user.entity",{"_index":694,"title":{},"body":{"entities/Post.html":{}}}],["src/users/user.entity.ts",{"_index":910,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:13",{"_index":913,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:21",{"_index":915,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:28",{"_index":912,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:34",{"_index":916,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:37",{"_index":919,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:7",{"_index":914,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":1010,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:38",{"_index":1036,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:46",{"_index":1020,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:53",{"_index":1018,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:59",{"_index":1038,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":216,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostModule.html":{}}}],["src/users/users.module.ts",{"_index":1065,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":1150,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1153,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":1155,"title":{},"body":{"index.html":{}}}],["startdate",{"_index":495,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{}}}],["started",{"_index":1131,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1143,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1081,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":285,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["stay",{"_index":1219,"title":{},"body":{"index.html":{}}}],["steps",{"_index":1166,"title":{},"body":{"index.html":{}}}],["story",{"_index":1125,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["straightforward",{"_index":1180,"title":{},"body":{"index.html":{}}}],["string",{"_index":35,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/BcryptProvider.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"entities/User.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["string(error",{"_index":947,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["sub",{"_index":839,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["successfully",{"_index":744,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["successfully'})@patch",{"_index":725,"title":{},"body":{"controllers/PostController.html":{}}}],["successfully'})@post",{"_index":711,"title":{},"body":{"controllers/PostController.html":{}}}],["summary",{"_index":743,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":1201,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1249,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["t",{"_index":579,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["table",{"_index":953,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1094,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":684,"title":{"entities/Tag.html":{}},"body":{"entities/Post.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["tag.dto",{"_index":872,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tag.dto.ts",{"_index":390,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["tag.dto.ts:10",{"_index":396,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:22",{"_index":399,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:28",{"_index":392,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:33",{"_index":398,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:39",{"_index":394,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.entity",{"_index":886,"title":{},"body":{"modules/TagsModule.html":{},"injectables/TagsService.html":{}}}],["tag.posts",{"_index":686,"title":{},"body":{"entities/Post.html":{}}}],["tags",{"_index":286,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tags.controller",{"_index":885,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags.length",{"_index":800,"title":{},"body":{"injectables/PostService.html":{}}}],["tags/providers/tags.service",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["tags/tags.module",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["tagscontroller",{"_index":863,"title":{"controllers/TagsController.html":{}},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tagsmodule",{"_index":109,"title":{"modules/TagsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules.html":{},"overview.html":{}}}],["tagsrepository",{"_index":894,"title":{},"body":{"injectables/TagsService.html":{}}}],["tagsservice",{"_index":130,"title":{"injectables/TagsService.html":{}},"body":{"modules/AppModule.html":{},"injectables/PostService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{},"overview.html":{}}}],["take",{"_index":611,"title":{},"body":{"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"index.html":{}}}],["target",{"_index":469,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["test",{"_index":1158,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":1161,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1160,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1156,"title":{},"body":{"index.html":{}}}],["text",{"_index":667,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["thanks",{"_index":1232,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":92,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.isauth",{"_index":984,"title":{},"body":{"injectables/UserService.html":{}}}],["this.authservice.signin(signindto",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.configservice.get(\"s3_bucket",{"_index":987,"title":{},"body":{"injectables/UserService.html":{}}}],["this.createusersprovider.createuser(createuserdto",{"_index":1006,"title":{},"body":{"injectables/UserService.html":{}}}],["this.datasource.createqueryrunner",{"_index":933,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["this.extractrequestfromheader(request",{"_index":60,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.findoneuserbyemailprovider.findonebyemail(email",{"_index":1008,"title":{},"body":{"injectables/UserService.html":{}}}],["this.hashingprovider.comparepassword(signindto.password",{"_index":833,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.hashingprovider.hashpassword(createuserdto.password",{"_index":463,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.jwtconfiguration",{"_index":67,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.jwtconfiguration.accesstokenttl",{"_index":849,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.jwtconfiguration.audience",{"_index":843,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.jwtconfiguration.issuer",{"_index":845,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.jwtconfiguration.secret",{"_index":847,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.jwtservice.signasync",{"_index":838,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.jwtservice.verifyasync(token",{"_index":66,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.metaoptionrepository.create(createpostdto.metaoptions",{"_index":786,"title":{},"body":{"injectables/PostService.html":{}}}],["this.metaoptionrepository.create(createpostmetaoptionsdto",{"_index":572,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionrepository.delete(post.metaoptions.id",{"_index":794,"title":{},"body":{"injectables/PostService.html":{}}}],["this.metaoptionrepository.find",{"_index":796,"title":{},"body":{"injectables/PostService.html":{}}}],["this.metaoptionrepository.save(metaoption",{"_index":573,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionrepository.save(metaoptions",{"_index":790,"title":{},"body":{"injectables/PostService.html":{}}}],["this.metaoptionservice.create(createpostmetaoptiondto",{"_index":557,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["this.paginationprovider.paginatequery",{"_index":783,"title":{},"body":{"injectables/PostService.html":{}}}],["this.postrepository",{"_index":784,"title":{},"body":{"injectables/PostService.html":{}}}],["this.postrepository.create",{"_index":789,"title":{},"body":{"injectables/PostService.html":{}}}],["this.postrepository.delete(id",{"_index":793,"title":{},"body":{"injectables/PostService.html":{}}}],["this.postrepository.find",{"_index":779,"title":{},"body":{"injectables/PostService.html":{}}}],["this.postrepository.findoneby",{"_index":792,"title":{},"body":{"injectables/PostService.html":{}}}],["this.postrepository.save(post",{"_index":791,"title":{},"body":{"injectables/PostService.html":{}}}],["this.postservice.createpost(createpostdto",{"_index":746,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.delete(id",{"_index":750,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.findall(postquery",{"_index":742,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.update(patchpostdto",{"_index":748,"title":{},"body":{"controllers/PostController.html":{}}}],["this.request.headers.host",{"_index":614,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.request.protocol",{"_index":613,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.signinprovider.signin(signindto",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.tagsrepository.create(createtagdto",{"_index":903,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.delete(id",{"_index":908,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.find",{"_index":906,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.save(tag",{"_index":904,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.softdelete(id",{"_index":909,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsservice.createtags(createtagdto",{"_index":875,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.delete(id",{"_index":877,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.findmultpletags(createpostdto.tags",{"_index":787,"title":{},"body":{"injectables/PostService.html":{}}}],["this.tagsservice.findmultpletags(patchpostdto.tags",{"_index":799,"title":{},"body":{"injectables/PostService.html":{}}}],["this.tagsservice.softremove(id",{"_index":880,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.userreposiory.findoneby",{"_index":486,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["this.userrepository.create",{"_index":462,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.userrepository.findone",{"_index":449,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.userrepository.findoneby",{"_index":1005,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save(newuser",{"_index":464,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.userscreatemanyprovider.createmany(createmanyusersdto",{"_index":1007,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.createmany(createmanyusersdto",{"_index":1060,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.createuser(createuserdto",{"_index":1058,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.findall(getusersparamdto",{"_index":1056,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.findonebyemail(signindto.email",{"_index":831,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.userservice.findonebyid(+userid",{"_index":777,"title":{},"body":{"injectables/PostService.html":{}}}],["this.userservice.findonebyid(createpostdto.authorid",{"_index":788,"title":{},"body":{"injectables/PostService.html":{}}}],["throw",{"_index":61,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/PostService.html":{},"injectables/SignInProvider.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["thrown",{"_index":326,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["time",{"_index":1215,"title":{},"body":{"index.html":{}}}],["timestamp",{"_index":677,"title":{},"body":{"entities/Post.html":{}}}],["title",{"_index":287,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["token",{"_index":59,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard",{"_index":146,"title":{},"body":{"modules/AppModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["token.guard.ts",{"_index":7,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{}}}],["token.guard.ts:10",{"_index":20,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:15",{"_index":28,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:33",{"_index":34,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["totalitems",{"_index":582,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["totalpages",{"_index":584,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["touch",{"_index":1240,"title":{},"body":{"index.html":{}}}],["transaction",{"_index":946,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["transformer",{"_index":270,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{},"dependencies.html":{}}}],["true",{"_index":72,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{}}}],["true})@apipropertyoptional({description",{"_index":349,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@jointable",{"_index":687,"title":{},"body":{"entities/Post.html":{}}}],["true})@type(undefined",{"_index":262,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{}}}],["try",{"_index":63,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/PostService.html":{},"injectables/SignInProvider.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["twitter",{"_index":1245,"title":{},"body":{"index.html":{}}}],["two",{"_index":76,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["type",{"_index":24,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeof",{"_index":470,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["typeorm",{"_index":442,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"entities/MetaOption.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"entities/Post.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([metaoption",{"_index":563,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["typeormmodule.forfeature([post",{"_index":759,"title":{},"body":{"modules/PostModule.html":{}}}],["typeormmodule.forfeature([tag",{"_index":887,"title":{},"body":{"modules/TagsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":1076,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":660,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":1142,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":40,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/SignInProvider.html":{}}}],["unauthorizedexception(\"incorrect",{"_index":836,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["unauthorizedexception(\"use",{"_index":489,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["undefined",{"_index":36,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/CreatePostDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"entities/Post.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["undefined})@isnotempty()@isarray()@validatenested({each",{"_index":261,"title":{},"body":{"classes/CreateManyUsersDTO.html":{}}}],["undefined})@isoptional()@validatenested({each",{"_index":307,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unique",{"_index":681,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["unit",{"_index":1157,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostService.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["unlicensed",{"_index":1259,"title":{},"body":{"properties.html":{}}}],["update",{"_index":762,"title":{},"body":{"injectables/PostService.html":{}}}],["update(patchpostdto",{"_index":770,"title":{},"body":{"injectables/PostService.html":{}}}],["updated",{"_index":655,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostController.html":{}}}],["updated'})@isint()@isnotempty",{"_index":651,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["updatedate",{"_index":525,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatedatecolumn",{"_index":538,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatepost",{"_index":703,"title":{},"body":{"controllers/PostController.html":{}}}],["updatepost(@body",{"_index":747,"title":{},"body":{"controllers/PostController.html":{}}}],["updatepost(patchpostdto",{"_index":721,"title":{},"body":{"controllers/PostController.html":{}}}],["updates",{"_index":722,"title":{},"body":{"controllers/PostController.html":{},"index.html":{}}}],["uppercase",{"_index":419,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["url",{"_index":331,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["url'})@maxlength(256",{"_index":341,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["url(this.request.url",{"_index":616,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["useclass",{"_index":177,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["usefactory",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards",{"_index":1042,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(accesstokenguard",{"_index":1048,"title":{},"body":{"controllers/UsersController.html":{}}}],["user",{"_index":124,"title":{"entities/User.html":{}},"body":{"modules/AppModule.html":{},"classes/CreateManyUsersDTO.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"classes/GetUsersParamDto.html":{},"entities/Post.html":{},"injectables/PostService.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":269,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"injectables/CreateUserProvider.html":{},"classes/PatchUserDto.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["user.dto.ts",{"_index":253,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:14",{"_index":409,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:18",{"_index":263,"title":{},"body":{"classes/CreateManyUsersDTO.html":{}}}],["user.dto.ts:20",{"_index":405,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:28",{"_index":424,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:8",{"_index":407,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":841,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["user.entity",{"_index":443,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["user.id",{"_index":840,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["user.password",{"_index":834,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["user.posts",{"_index":664,"title":{},"body":{"entities/Post.html":{}}}],["user.provider",{"_index":981,"title":{},"body":{"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["user.provider.ts",{"_index":431,"title":{},"body":{"injectables/CreateUserProvider.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["user.provider.ts:16",{"_index":438,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.provider.ts:9",{"_index":435,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.service.ts",{"_index":999,"title":{},"body":{"injectables/UserService.html":{}}}],["usercreatemanyprovider",{"_index":921,"title":{"injectables/UserCreateManyProvider.html":{}},"body":{"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["userid",{"_index":720,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["username",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["userreposiory",{"_index":483,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["userrepository",{"_index":436,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UserService.html":{}}}],["users",{"_index":255,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/GetUsersParamDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["users.controller",{"_index":1066,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/user.entity",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.module",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":1009,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userscreatemanyprovider",{"_index":960,"title":{},"body":{"injectables/UserService.html":{}}}],["userservice",{"_index":225,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["usersmodule",{"_index":110,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["uses",{"_index":338,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["using",{"_index":974,"title":{},"body":{"injectables/UserService.html":{},"index.html":{}}}],["validatenested",{"_index":266,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{}}}],["validation",{"_index":325,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validationpipe",{"_index":1043,"title":{},"body":{"controllers/UsersController.html":{}}}],["validationschema",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":267,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/SignInDto.html":{},"dependencies.html":{}}}],["value",{"_index":632,"title":{},"body":{"classes/PaginationQueryDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":312,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["varchar",{"_index":669,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["variable",{"_index":1083,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1260,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":1257,"title":{},"body":{"properties.html":{}}}],["video",{"_index":1208,"title":{},"body":{"index.html":{}}}],["visit",{"_index":1198,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":1211,"title":{},"body":{"index.html":{}}}],["void",{"_index":474,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["want",{"_index":1035,"title":{},"body":{"controllers/UsersController.html":{}}}],["watch",{"_index":1151,"title":{},"body":{"index.html":{}}}],["website",{"_index":1243,"title":{},"body":{"index.html":{}}}],["without",{"_index":339,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["working",{"_index":1197,"title":{},"body":{"index.html":{}}}],["world",{"_index":182,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":1222,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":1236,"title":{},"body":{"index.html":{}}}],["you're",{"_index":1162,"title":{},"body":{"index.html":{}}}],["z0",{"_index":333,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["z\\d@$!%*#?&]{8",{"_index":413,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*#?&])[a",{"_index":412,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":411,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"guards/AccessTokenGuard.html":{"url":"guards/AccessTokenGuard.html","title":"guard - AccessTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/access-token.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                extractRequestFromHeader\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/access-token.guard.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/access-token.guard.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractRequestFromHeader\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractRequestFromHeader(request: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/access-token.guard.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Inject, Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { Observable } from 'rxjs';\nimport jwtConfig from '../config/jwt.config';\nimport { Request } from 'express';\nimport { REQUEST_USER_KEY } from '../constants/auth.constants';\n\n@Injectable()\nexport class AccessTokenGuard implements CanActivate {\n\n  constructor(private readonly jwtService: JwtService,\n    @Inject(jwtConfig.KEY) private readonly jwtConfiguration: ConfigType\n  ) { }\n  async canActivate(\n    context: ExecutionContext,\n  ): Promise {\n    const request = context.switchToHttp().getRequest();\n    const token = this.extractRequestFromHeader(request)\n    if (!token) {\n      throw new UnauthorizedException(\"\")\n    }\n\n    try {\n      const payload = await this.jwtService.verifyAsync(token, this.jwtConfiguration)\n      request[REQUEST_USER_KEY] = payload\n    } catch (error) {\n      throw new UnauthorizedException()\n    }\n    return true;\n  }\n\n  private extractRequestFromHeader(request: Request): string | undefined {\n    const [_, token] = request.headers.authorization?.split(' ') ?? [] //this line get the two part of the header bearer and token when split the string from the space between them\n    return token;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) { }\n\n  /* @Get()\n   getHello(): string {\n     return this.appService.getHello();\n   }*/\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nPostModule\n\nPostModule\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            MetaOptionsModule\n                        \n                        \n                            PaginationModule\n                        \n                        \n                            PostModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostModule } from './post/post.module';\nimport { PostService } from './post/services/post.service';\nimport { AuthModule } from './auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './users/user.entity';\nimport { TagsModule } from './tags/tags.module';\nimport { MetaOptionsModule } from './meta-options/meta-options.module';\nimport { TagsService } from './tags/providers/tags.service';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { PaginationModule } from './common/pagination/pagination.module';\nimport appConfig from './config/app.config';\nimport databaseConfig from './config/database.config';\nimport environmentValidation from './config/environment.validation';\nimport { JwtModule } from '@nestjs/jwt';\nimport jwtConfig from './auth/config/jwt.config';\nimport { APP_GUARD } from '@nestjs/core';\nimport { AccessTokenGuard } from './auth/guards/access-token.guard';\n\nconst ENV = process.env.NODE_ENV;\n@Module({\n  imports: [UsersModule, PostModule, AuthModule, TagsModule, ConfigModule.forRoot({\n    isGlobal: true,\n    //envFilePath: ['.env.development']\n    envFilePath: !ENV ? '.env' : `.env.${ENV}`,\n    load: [appConfig, databaseConfig],\n    validationSchema: environmentValidation\n  }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        //entities: [User],\n        autoLoadEntities: configService.get('database.autoLoadEntities'),\n        synchronize: configService.get('database.synchronize'),\n        port: +configService.get('database.port'),\n        username: configService.get('database.user'),\n        password: configService.get('database.password'),\n        host: configService.get('database.host'),\n        database: configService.get('database.name'),\n      })\n\n    }),\n\n    ConfigModule.forFeature(jwtConfig),\n    JwtModule.registerAsync(jwtConfig.asProvider()),\n    TagsModule,\n    MetaOptionsModule,\n    PaginationModule],\n  controllers: [AppController],\n  providers: [AppService,\n    {\n      provide: APP_GUARD,\n      useClass: AccessTokenGuard\n    }\n  ],\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World NestJs!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Public\n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signinDto: SignInDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('sign-in')@HttpCode(HttpStatus.OK)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signinDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, HttpCode, HttpStatus, Post } from '@nestjs/common';\nimport { AuthService } from './service/auth.service';\nimport { SignInDto } from './dtos/signin.dto';\n\n@Controller('auth')\nexport class AuthController {\n\n    constructor(private readonly authService: AuthService) { }\n\n    @Post('sign-in')\n    @HttpCode(HttpStatus.OK)\n    public async signIn(@Body() signinDto: SignInDto) {\n        return this.authService.signIn(signinDto)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nHashingProvider \n\nHashingProvider \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nSignInProvider\n\nSignInProvider\n\nAuthModule -->\n\nSignInProvider->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            SignInProvider\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            HashingProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthService } from './service/auth.service';\nimport { AuthController } from './auth.controller';\nimport { UsersModule } from 'src/users/users.module';\nimport { HashingProvider } from './providers/hashing.provider';\nimport { BcryptProvider } from './providers/bcrypt.provider';\nimport { SignInProvider } from './providers/sign-in.provider';\nimport { ConfigModule } from '@nestjs/config';\nimport jwtConfig from './config/jwt.config';\nimport { JwtModule } from '@nestjs/jwt';\n\n@Module({\n  providers: [AuthService, {\n    provide: HashingProvider,\n    useClass: BcryptProvider\n  }, SignInProvider],\n  controllers: [AuthController],\n  imports: [forwardRef(() => UsersModule), ConfigModule.forFeature(jwtConfig), JwtModule.registerAsync(jwtConfig.asProvider())],\n  exports: [AuthService, HashingProvider]\n})\nexport class AuthModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/service/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAUth\n                            \n                            \n                                    Public\n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, signInProvider: SignInProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/service/auth.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        signInProvider\n                                                  \n                                                        \n                                                                        SignInProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAUth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAUth()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/service/auth.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/service/auth.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { UserService } from 'src/users/providers/user.service';\nimport { SignInDto } from '../dtos/signin.dto';\nimport { SignInProvider } from '../providers/sign-in.provider';\n\n@Injectable()\nexport class AuthService {\n\n    constructor(@Inject(forwardRef(() => UserService)) private readonly userService: UserService,\n        private readonly signInProvider: SignInProvider\n\n    ) { }\n    public async signIn(signInDto: SignInDto) {\n        return await this.signInProvider.signIn(signInDto)\n    }\n\n\n    public isAUth() {\n        return true;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BcryptProvider.html":{"url":"injectables/BcryptProvider.html","title":"injectable - BcryptProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BcryptProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/bcrypt.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                comparePassword\n                            \n                            \n                                    Public\n                                    Async\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        comparePassword\n                        \n                    \n                \n            \n            \n                \ncomparePassword(data: string | Buffer, encrypted: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.provider.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encrypted\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(data: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.provider.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { HashingProvider } from './hashing.provider';\nimport * as bcrypt from 'bcrypt';\n@Injectable()\nexport class BcryptProvider implements HashingProvider {\n    public async hashPassword(data: string | Buffer): Promise {\n        const salt = await bcrypt.genSalt();\n        return bcrypt.hash(data, salt)\n\n    }\n    comparePassword(data: string | Buffer, encrypted: string): Promise {\n        return bcrypt.compare(data, encrypted)\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateManyUsersDTO.html":{"url":"classes/CreateManyUsersDTO.html","title":"class - CreateManyUsersDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateManyUsersDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-many-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateUserDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'array', required: true, items: undefined})@IsNotEmpty()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-many-user.dto.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsNotEmpty, ValidateNested } from \"class-validator\";\nimport { CreateUserDto } from \"./create-user.dto\";\nimport { Type } from \"class-transformer\";\nimport { ApiProperty } from \"@nestjs/swagger\";\n\nexport class CreateManyUsersDTO {\n    @ApiProperty({\n        type: 'array',\n        required: true,\n        items: {\n            type: 'User'\n        }\n    })\n    @IsNotEmpty()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CreateUserDto)\n    users: CreateUserDto[]\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dtos/create-post.dtos.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                authorId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsNotEmpty()@ApiProperty({type: 'integer', required: true, example: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:124\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({description: 'This is the content of the post', example: 'the post content'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsUrl()@MaxLength(1024)@ApiPropertyOptional({description: 'featured image for your blog post', example: 'http://localhost.com/images/image1.jpg'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionsDto | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ApiPropertyOptional({type: 'object', required: false, items: undefined})@IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:115\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(postType)@IsNotEmpty()@ApiProperty({enum: postType, description: 'Possible values, 'POST', 'PAGE','STORY','SERIES''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsISO8601()@IsOptional()@ApiPropertyOptional({description: 'The date on which the blog post is published', example: '2024-03-16T07:46:32+0000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsJSON()@ApiPropertyOptional({description: 'Serialize your JSON object else a validation error will be thrown', example: '{\n \"@context\": \"https://schema.org\",\n \"@type\": \"Person\"\n}'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty({description: 'For example - 'my-url'', example: 'my-blog-post'})@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url'})@MaxLength(256)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(postStatus)@IsNotEmpty()@ApiProperty({enum: postStatus, description: ' Possible values, 'DRAFT', 'SCHEDULED','REVIEW', 'PUBLISHED''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()@IsInt({each: true})@ApiPropertyOptional({description: 'Array of ids of tags', example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'This is a title', description: 'this is the title of the blog post'})@IsString()@MinLength(4)@MaxLength(512)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsEnum, IsInt, IsISO8601, IsJSON, IsNotEmpty, IsOptional, IsString, IsUrl, Matches, MaxLength, MinLength, ValidateNested } from \"class-validator\";\nimport { postType } from \"../enums/postType.enum\";\nimport { postStatus } from \"../enums/status.enum\";\nimport { CreatePostMetaOptionsDto } from \"../../meta-options/dtos/create-post-meta-option.dtos\";\nimport { Type } from \"class-transformer\";\nimport { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\n\nexport class CreatePostDto {\n    @ApiProperty({\n        example: \"This is a title\",\n        description: \"this is the title of the blog post\"\n    })\n    @IsString()\n    @MinLength(4)\n    @MaxLength(512)\n    @IsNotEmpty()\n    title: string;\n\n    @IsEnum(postType)\n    @IsNotEmpty()\n    @ApiProperty({\n        enum: postType,\n        description: \"Possible values, 'POST', 'PAGE','STORY','SERIES'\",\n    })\n    postType: postType;\n    @IsString()\n    @IsOptional()\n    @ApiPropertyOptional({\n        description: \"This is the content of the post\",\n        example: \"the post content\"\n    })\n    content?: string;\n\n    @IsString()\n    @IsNotEmpty()\n    @ApiProperty({\n        description: \"For example - 'my-url'\",\n        example: \"my-blog-post\"\n    })\n    @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n        message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url'\n    })\n    @MaxLength(256)\n    slug: string;\n\n\n    @IsEnum(postStatus)\n    @IsNotEmpty()\n    @ApiProperty({\n        enum: postStatus,\n        description: \" Possible values, 'DRAFT', 'SCHEDULED','REVIEW', 'PUBLISHED'\"\n    })\n    status: postStatus;\n\n    @IsOptional()\n    @IsJSON()\n    @ApiPropertyOptional({\n        description: \"Serialize your JSON object else a validation error will be thrown\",\n        example: \"{\\r\\n \\\"@context\\\": \\\"https:\\/\\/schema.org\\\",\\r\\n \\\"@type\\\": \\\"Person\\\"\\r\\n}\"\n    })\n    schema?: string;\n\n\n    @IsOptional()\n    @IsUrl()\n    @MaxLength(1024)\n    @ApiPropertyOptional({\n        description: \"featured image for your blog post\",\n        example: \"http://localhost.com/images/image1.jpg\"\n    })\n    featuredImageUrl?: string;\n\n\n    @IsISO8601()\n    @IsOptional()\n    @ApiPropertyOptional({\n        description: \"The date on which the blog post is published\",\n        example: \"2024-03-16T07:46:32+0000\",\n    })\n    publishOn?: Date;\n\n\n    @IsOptional()\n    @IsArray()\n    @IsInt({\n        each: true\n    })\n    @ApiPropertyOptional({\n        description: \"Array of ids of tags\",\n        example: [1, 2],\n    })\n    tags?: number[];\n\n\n\n    @IsOptional()\n    @ApiPropertyOptional({\n        type: 'object',\n        required: false,\n        items: {\n            type: 'object',\n            properties: {\n                metaValue: {\n                    type: 'json',\n                    description: 'The metaValue is JSON string',\n                    example: '{\"sidebarEnabled\":true}'\n                }\n            }\n        }\n    })\n\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => CreatePostMetaOptionsDto)\n    metaOptions?: CreatePostMetaOptionsDto | null;\n\n    @IsInt()\n    @IsNotEmpty()\n    @ApiProperty({\n        type: 'integer',\n        required: true,\n        example: 1\n    })\n    authorId: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto.html":{"url":"classes/CreatePostMetaOptionsDto.html","title":"class - CreatePostMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/dtos/create-post-meta-option.dtos.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                metaValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/dtos/create-post-meta-option.dtos.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsJSON, IsNotEmpty, IsString } from \"class-validator\";\n\nexport class CreatePostMetaOptionsDto {\n    @IsNotEmpty()\n    @IsJSON()\n    metaValue: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagDto.html":{"url":"classes/CreateTagDto.html","title":"class - CreateTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/dtos/create-tag.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsUrl()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@MinLength(3)@IsNotEmpty()@MaxLength(256)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty({description: 'For example - 'my-url'', example: 'my-blog-post'})@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url'})@MaxLength(256)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsJSON, IsNotEmpty, IsOptional, IsString, IsUrl, Matches, MaxLength, MinLength } from \"class-validator\";\n\nexport class CreateTagDto {\n    @ApiProperty()\n    @IsString()\n    @MinLength(3)\n    @IsNotEmpty()\n    @MaxLength(256)\n    name: string;\n\n    @IsString()\n    @IsNotEmpty()\n    @ApiProperty({\n        description: \"For example - 'my-url'\",\n        example: \"my-blog-post\"\n    })\n    @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n        message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url'\n    })\n    @MaxLength(256)\n    slug: string;\n\n\n    @ApiPropertyOptional()\n    @IsOptional()\n    @IsString()\n    description?: string;\n\n    @ApiPropertyOptional()\n    @IsOptional()\n    @IsJSON()\n    schema?: string;\n\n    @ApiPropertyOptional()\n    @IsOptional()\n    @IsUrl()\n    @MaxLength(1024)\n    featuredImageUrl?: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsEmail()@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {message: 'Password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, one number, and one special character.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsOptional, IsString, Matches, MaxLength, MinLength } from \"class-validator\";\n\nexport class CreateUserDto {\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(3)\n    @MaxLength(96)\n    firstName: string;\n\n    @IsString()\n    @IsOptional()\n    @MinLength(3)\n    @MaxLength(96)\n    lastName?: string;\n\n    @IsString()\n    @IsNotEmpty()\n    @IsEmail()\n    @MaxLength(96)\n    email: string;\n\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(8)\n    @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {\n        message: 'Password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, one number, and one special character.'\n    })\n    password: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateUserProvider.html":{"url":"injectables/CreateUserProvider.html","title":"injectable - CreateUserProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateUserProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/create-user.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, hashingProvider: HashingProvider)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/create-user.provider.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/create-user.provider.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, forwardRef, Inject, Injectable, RequestTimeoutException } from '@nestjs/common';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { HashingProvider } from 'src/auth/providers/hashing.provider';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class CreateUserProvider {\n\n    constructor(\n        @InjectRepository(User) private readonly userRepository: Repository,\n        @Inject(forwardRef(() => HashingProvider)) private readonly hashingProvider: HashingProvider\n    ) { }\n\n    public async createUser(createUserDto: CreateUserDto) {\n        let existingUser = undefined;\n        try {\n            existingUser = await this.userRepository.findOne({\n                where: {\n                    email: createUserDto.email\n                }\n            })\n\n        } catch (error) {\n            throw new RequestTimeoutException('Unable to process your request at the moment please try later', {\n                description: 'Error connectiong to the database'\n            })\n        }\n\n        if (existingUser) {\n            throw new BadRequestException('The user already exists, please check your email.')\n        }\n        let newUser = this.userRepository.create({\n            ...createUserDto,\n            password: await this.hashingProvider.hashPassword(createUserDto.password)\n        });\n\n        try {\n            newUser = await this.userRepository.save(newUser)\n        } catch (err) {\n            throw new RequestTimeoutException('Unable to process your request at the moment please try later', {\n                description: 'Error connecting to the database'\n            })\n        }\n        return newUser\n    }\n}\nfunction InejectRepository(): (target: typeof CreateUserProvider, propertyKey: undefined, parameterIndex: 0) => void {\n    throw new Error('Function not implemented.');\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindOneUserByEmailProvider.html":{"url":"injectables/FindOneUserByEmailProvider.html","title":"injectable - FindOneUserByEmailProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindOneUserByEmailProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/find-one-user-by-email.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                findOneByEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userReposiory: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/find-one-user-by-email.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userReposiory\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/find-one-user-by-email.provider.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, RequestTimeoutException, UnauthorizedException } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class FindOneUserByEmailProvider {\n\n    constructor(\n        @InjectRepository(User) private readonly userReposiory: Repository\n    ) { }\n\n    public async findOneByEmail(email: string) {\n        let user: User | undefined = undefined;\n\n        try {\n            user = await this.userReposiory.findOneBy({ email: email });\n        } catch (error) {\n            throw new RequestTimeoutException(error, {\n                description: 'could not fetch user'\n            })\n        }\n\n        if (!user) {\n            throw new UnauthorizedException(\"use does not exist\")\n        }\n        return user;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPostBaseDto.html":{"url":"classes/GetPostBaseDto.html","title":"class - GetPostBaseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPostBaseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dtos/get-posts.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                endDate\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                startDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        endDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/get-posts.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        startDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/get-posts.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IntersectionType } from \"@nestjs/swagger\";\nimport { IsDate, IsOptional } from \"class-validator\";\nimport { PaginationQueryDto } from \"src/common/pagination/dtos/pagination-query.dto\";\n\nclass GetPostBaseDto {\n    @IsDate()\n    @IsOptional()\n    startDate?: Date;\n\n    @IsDate()\n    @IsOptional()\n    endDate?: Date;\n}\n\nexport class GetPostDto extends IntersectionType(GetPostBaseDto, PaginationQueryDto) {\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPostDto.html":{"url":"classes/GetPostDto.html","title":"class - GetPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dtos/get-posts.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            IntersectionType(GetPostBaseDto, PaginationQueryDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IntersectionType } from \"@nestjs/swagger\";\nimport { IsDate, IsOptional } from \"class-validator\";\nimport { PaginationQueryDto } from \"src/common/pagination/dtos/pagination-query.dto\";\n\nclass GetPostBaseDto {\n    @IsDate()\n    @IsOptional()\n    startDate?: Date;\n\n    @IsDate()\n    @IsOptional()\n    endDate?: Date;\n}\n\nexport class GetPostDto extends IntersectionType(GetPostBaseDto, PaginationQueryDto) {\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Ger user  with a specific id', example: 1234})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-param.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsInt, IsOptional } from \"class-validator\";\n\nexport class GetUsersParamDto {\n    @ApiPropertyOptional({\n        description: \"Ger user  with a specific id\",\n        example: 1234\n    })\n    @IsOptional()\n    @IsInt()\n    @Type(() => Number)\n    id?: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HashingProvider.html":{"url":"injectables/HashingProvider.html","title":"injectable - HashingProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HashingProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/hashing.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                comparePassword\n                            \n                            \n                                    Abstract\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        comparePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePassword(data: string | Buffer, encrypted: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.provider.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encrypted\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(data: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.provider.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport abstract class HashingProvider {\n\n    abstract hashPassword(data: string | Buffer): Promise\n\n    abstract comparePassword(data: string | Buffer, encrypted: string): Promise\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/MetaOption.html":{"url":"entities/MetaOption.html","title":"entity - MetaOption","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  MetaOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-option.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                metaValue\n                            \n                            \n                                    \n                                    \n                                post\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, post => post.metaOptions, {onDelete: 'CASCADE'})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:19\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from \"src/post/post.entity\";\nimport { Column, CreateDateColumn, Entity, JoinColumn, OneToOne, PrimaryGeneratedColumn, UpdateDateColumn } from \"typeorm\";\n\n@Entity()\nexport class MetaOption {\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column({\n        type: \"json\",\n        nullable: false\n    })\n    metaValue: string;\n\n    @CreateDateColumn()\n    createDate: Date\n\n    @UpdateDateColumn()\n    updateDate: Date;\n\n\n    @OneToOne(() => Post, (post) => post.metaOptions, {\n        onDelete: 'CASCADE'\n    })\n    @JoinColumn()\n    post: Post;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MetaOptionsController.html":{"url":"controllers/MetaOptionsController.html","title":"controller - MetaOptionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MetaOptionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-options.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                meta-options\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostMetaOptionDto: CreatePostMetaOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/meta-options/meta-options.controller.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostMetaOptionDto\n                                            \n                                                            CreatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { CreatePostMetaOptionsDto } from './dtos/create-post-meta-option.dtos';\nimport { MetaOptionsService } from './providers/meta-options.service';\n\n@Controller('meta-options')\nexport class MetaOptionsController {\n\n\n    constructor(private readonly metaOptionService: MetaOptionsService) { }\n    @Post()\n    public create(@Body() createPostMetaOptionDto: CreatePostMetaOptionsDto) {\n        return this.metaOptionService.create(createPostMetaOptionDto);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MetaOptionsModule.html":{"url":"modules/MetaOptionsModule.html","title":"module - MetaOptionsModule","body":"\n                   \n\n\n\n\n    Modules\n    MetaOptionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/meta-options/meta-options.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MetaOptionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MetaOptionsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MetaOptionsController } from './meta-options.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MetaOption } from './meta-option.entity';\nimport { MetaOptionsService } from './providers/meta-options.service';\n\n@Module({\n  controllers: [MetaOptionsController],\n  imports: [TypeOrmModule.forFeature([MetaOption])],\n  providers: [MetaOptionsService]\n})\nexport class MetaOptionsModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MetaOptionsService.html":{"url":"injectables/MetaOptionsService.html","title":"injectable - MetaOptionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MetaOptionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/providers/meta-options.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(metaOptionRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/meta-options/providers/meta-options.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        metaOptionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostMetaOptionsDto: CreatePostMetaOptionsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/meta-options/providers/meta-options.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostMetaOptionsDto\n                                            \n                                                            CreatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreatePostMetaOptionsDto } from '../dtos/create-post-meta-option.dtos';\nimport { Repository } from 'typeorm';\nimport { MetaOption } from '../meta-option.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class MetaOptionsService {\n\n    constructor(@InjectRepository(MetaOption) private readonly metaOptionRepository: Repository) { }\n\n    public async create(createPostMetaOptionsDto: CreatePostMetaOptionsDto) {\n        let metaOption = this.metaOptionRepository.create(createPostMetaOptionsDto);\n        return await this.metaOptionRepository.save(metaOption);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Paginated.html":{"url":"interfaces/Paginated.html","title":"interface - Paginated","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Paginated\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/interfaces/paginated.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            links\n                                        \n                                \n                                \n                                        \n                                            meta\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        links\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        links:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        meta\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        meta:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Paginated {\n\n    data: T[];\n    meta: {\n        itemsPerPage: number;\n        totalItems: number;\n        currentPage: number;\n        totalPages: number;\n    };\n    links: {\n        first: string;\n        last: string;\n        current: string;\n        next: string;\n        previous: string;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaginationModule.html":{"url":"modules/PaginationModule.html","title":"module - PaginationModule","body":"\n                   \n\n\n\n\n    Modules\n    PaginationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_providers\n\n\n\ncluster_PaginationModule_exports\n\n\n\n\nPaginationProvider \n\nPaginationProvider \n\n\n\nPaginationModule\n\nPaginationModule\n\nPaginationProvider  -->\n\nPaginationModule->PaginationProvider \n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nPaginationModule -->\n\nPaginationProvider->PaginationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/pagination/pagination.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaginationProvider\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PaginationProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PaginationProvider } from './providers/pagination.provider';\n\n@Module({\n    providers: [PaginationProvider],\n    exports: [PaginationProvider]\n})\nexport class PaginationModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaginationProvider.html":{"url":"injectables/PaginationProvider.html","title":"injectable - PaginationProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaginationProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/providers/pagination.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                paginateQuery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: Request)\n                    \n                \n                        \n                            \n                                Defined in src/common/pagination/providers/pagination.provider.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                    Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        paginateQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    paginateQuery(paginationQuery: PaginationQueryDto, repository: Repository)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/pagination/providers/pagination.provider.ts:15\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                paginationQuery\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                repository\n                                            \n                                                        Repository\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { PaginationQueryDto } from '../dtos/pagination-query.dto';\nimport { ObjectLiteral, Repository } from 'typeorm';\nimport { Request } from 'express';\nimport { REQUEST } from '@nestjs/core';\nimport { Paginated } from '../interfaces/paginated.interface';\n\n@Injectable()\nexport class PaginationProvider {\n\n    constructor(\n        @Inject(REQUEST)\n        private readonly request: Request\n    ) { }\n    public async paginateQuery(paginationQuery: PaginationQueryDto, repository: Repository): Promise> {\n        let results = await repository.find({\n            skip: (paginationQuery.page - 1) * paginationQuery.limit,\n            take: paginationQuery.limit\n        })\n\n        const baseUrl = this.request.protocol + '://' + this.request.headers.host + '/';\n\n        const newUrl = new URL(this.request.url, baseUrl)\n        console.log(newUrl)\n\n        const totalItems = await repository.count();\n        const totalPages = Math.ceil(totalItems / paginationQuery.limit);\n        const nextPage = paginationQuery.page === totalPages ? paginationQuery.page : paginationQuery.page + 1\n        const previousPage = paginationQuery.page === 1 ? paginationQuery.page : paginationQuery.page - 1;\n        const finalResponse: Paginated = {\n            data: results,\n            meta: {\n                itemsPerPage: paginationQuery.limit,\n                totalItems: totalItems,\n                currentPage: paginationQuery.page,\n                totalPages: totalPages,\n            },\n            links: {\n                first: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&pages=1`,\n                last: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&pages=${totalPages}`,\n                current: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&pages=${paginationQuery.page}`,\n                next: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&pages=${nextPage}`,\n                previous: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&pages=${previousPage}`\n            }\n        }\n\n        return finalResponse;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationQueryDto.html":{"url":"classes/PaginationQueryDto.html","title":"class - PaginationQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/dtos/pagination-query.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/dtos/pagination-query.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/dtos/pagination-query.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport { IsOptional, IsPositive } from \"class-validator\";\n\nexport class PaginationQueryDto {\n    @IsOptional()\n    @IsPositive()\n    //@Type(() => Number) we do not need this anymore cause we already enabled the implicit conversion in the main.ts\n    limit?: number = 10;\n    @IsOptional()\n    @IsPositive()\n    //@Type(() => Number)\n    page?: number = 1;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dtos/patch-post-dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The id of the post that needs to be updated'})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/patch-post-dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from \"@nestjs/swagger\";\nimport { IsInt, IsNotEmpty } from \"class-validator\";\nimport { CreatePostDto } from \"./create-post.dtos\";\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n    @ApiProperty({\n        description: \"The id of the post that needs to be updated\"\n    })\n    @IsInt()\n    @IsNotEmpty()\n    id: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \"@nestjs/mapped-types\";\nimport { CreateUserDto } from \"./create-user.dto\";\n\nexport class PatchUserDto extends PartialType(CreateUserDto) {\n   \n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                postType\n                            \n                            \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.posts, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MetaOption\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, metaOptions => metaOptions.post, {cascade: true, eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: postType, nullable: false, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: postStatus, nullable: false, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Tag[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, tag => tag.posts, {eager: true})@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:18\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, JoinTable, ManyToMany, ManyToOne, OneToOne, PrimaryGeneratedColumn } from \"typeorm\";\nimport { CreatePostMetaOptionsDto } from \"../meta-options/dtos/create-post-meta-option.dtos\";\nimport { postType } from \"./enums/postType.enum\";\nimport { postStatus } from \"./enums/status.enum\";\nimport { MetaOption } from \"src/meta-options/meta-option.entity\";\nimport { User } from \"src/users/user.entity\";\nimport { Tag } from \"src/tags/tag.entity\";\n\n@Entity()\nexport class Post {\n    @PrimaryGeneratedColumn()\n    id: number;\n    @Column({\n        type: \"varchar\",\n        length: 512,\n        nullable: false\n    })\n    title: string;\n    @Column({\n        type: \"enum\",\n        enum: postType,\n        nullable: false,\n        default: postType.POST\n    })\n    postType: postType;\n\n    @Column({\n        type: \"varchar\",\n        length: 256,\n        nullable: false,\n        unique: true\n    })\n    slug: string;\n    @Column({\n        type: \"enum\",\n        enum: postStatus,\n        nullable: false,\n        default: postStatus.DRAFT\n    })\n    status: postStatus;\n\n    @Column({\n        type: \"text\",\n        nullable: true\n    })\n    content?: string;\n\n    @Column({\n        type: \"text\",\n        nullable: true\n    })\n    schema?: string;\n\n    @Column({\n        type: \"varchar\",\n        length: 1024,\n        nullable: true\n    })\n    featuredImageUrl?: string;\n\n    @Column({\n        type: \"timestamp\",\n    })\n    publishOn?: Date;\n\n\n\n\n    @OneToOne(() => MetaOption, (metaOptions) => metaOptions.post, {\n        cascade: true,\n        eager: true\n    })\n    //@JoinColumn()\n    metaOptions?: MetaOption;\n\n    @ManyToOne(() => User, (user) => user.posts, {\n        eager: true\n    })\n    author: User;\n\n\n    @ManyToMany(() => Tag, (tag) => tag.posts, {\n        eager: true\n    })\n    @JoinTable()\n    tags?: Tag[];\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostController.html":{"url":"controllers/PostController.html","title":"controller - PostController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                post\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    Public\n                                deletePost\n                            \n                            \n                                    \n                                    Public\n                                getPost\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new blog post'})@ApiResponse({status: 201, description: 'you get a 201 response if your post is created successfully'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPost(userId: string, postQuery: GetPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:userId?')\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                postQuery\n                                            \n                                                            GetPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Updates an existing blog post'})@ApiResponse({status: 200, description: 'A 200 response if the post is updated successfully'})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Param, ParseIntPipe, Patch, Post, Query } from '@nestjs/common';\nimport { PostService } from './services/post.service';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreatePostDto } from './dtos/create-post.dtos';\nimport { PatchPostDto } from './dtos/patch-post-dto';\nimport { GetPostDto } from './dtos/get-posts.dto';\n\n@Controller('post')\n@ApiTags('posts')\nexport class PostController {\n\n    constructor(private readonly postService: PostService) { }\n\n    @Get('/:userId?')\n    public getPost(@Param('userId') userId: string, @Query() postQuery: GetPostDto) {\n        return this.postService.findAll(postQuery, userId)\n    }\n\n    @ApiOperation({\n        summary: \"Creates a new blog post\"\n    })\n    @ApiResponse({\n        status: 201,\n        description: \"you get a 201 response if your post is created successfully\"\n    })\n    @Post()\n    public createPost(@Body() createPostDto: CreatePostDto) {\n        return this.postService.createPost(createPostDto)\n    }\n    @ApiOperation({\n        summary: \"Updates an existing blog post\"\n    })\n    @ApiResponse({\n        status: 200,\n        description: \"A 200 response if the post is updated successfully\"\n    })\n    @Patch()\n    public updatePost(@Body() patchPostDto: PatchPostDto) {\n        return this.postService.update(patchPostDto)\n    }\n\n    @Delete()\n    public deletePost(@Query(\"id\", ParseIntPipe) id: number) {\n        return this.postService.delete(id)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostModule.html":{"url":"modules/PostModule.html","title":"module - PostModule","body":"\n                   \n\n\n\n\n    Modules\n    PostModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostModule\n\n\n\ncluster_PostModule_imports\n\n\n\ncluster_PostModule_providers\n\n\n\n\nPaginationModule\n\nPaginationModule\n\n\n\nPostModule\n\nPostModule\n\nPostModule -->\n\nPaginationModule->PostModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostModule -->\n\nTagsModule->PostModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostModule -->\n\nUsersModule->PostModule\n\n\n\n\n\nPostService\n\nPostService\n\nPostModule -->\n\nPostService->PostModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/post/post.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PaginationModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostController } from './post.controller';\nimport { PostService } from './services/post.service';\nimport { UsersModule } from 'src/users/users.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Post } from './post.entity';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { TagsModule } from 'src/tags/tags.module';\nimport { PaginationModule } from 'src/common/pagination/pagination.module';\n\n@Module({\n  controllers: [PostController],\n  providers: [PostService],\n  imports: [UsersModule, TagsModule, TypeOrmModule.forFeature([Post, MetaOption]), PaginationModule]\n})\nexport class PostModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostService.html":{"url":"injectables/PostService.html","title":"injectable - PostService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/services/post.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createPost\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, postRepository: Repository, metaOptionRepository: Repository, tagsService: TagsService, paginationProvider: PaginationProvider)\n                    \n                \n                        \n                            \n                                Defined in src/post/services/post.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        metaOptionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tagsService\n                                                  \n                                                        \n                                                                        TagsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        paginationProvider\n                                                  \n                                                        \n                                                                        PaginationProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/services/post.service.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/services/post.service.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(postQuery: GetPostDto, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/services/post.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postQuery\n                                            \n                                                            GetPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(patchPostDto: PatchPostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/services/post.service.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable, RequestTimeoutException } from '@nestjs/common';\nimport { UserService } from 'src/users/providers/user.service';\nimport { CreatePostDto } from '../dtos/create-post.dtos';\nimport { Repository } from 'typeorm';\nimport { Post } from '../post.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { TagsService } from 'src/tags/providers/tags.service';\nimport { PatchPostDto } from '../dtos/patch-post-dto';\nimport { GetPostDto } from '../dtos/get-posts.dto';\nimport { PaginationProvider } from 'src/common/pagination/providers/pagination.provider';\nimport { Paginated } from 'src/common/pagination/interfaces/paginated.interface';\n@Injectable()\nexport class PostService {\n\n    constructor(private readonly userService: UserService,\n        @InjectRepository(Post) private readonly postRepository: Repository,\n\n        @InjectRepository(MetaOption) private readonly metaOptionRepository: Repository,\n\n        private readonly tagsService: TagsService,\n\n        private readonly paginationProvider: PaginationProvider\n    ) { }\n    public async findAll(postQuery: GetPostDto, userId: string): Promise> {\n        /*const user = await this.userService.findOneById(+userId);\n        let posts = await this.postRepository.find({\n            relations: {\n                metaOptions: true,\n                author: true,\n                tags: true\n            },\n            skip: (postQuery.page - 1) * postQuery.limit,\n            take: postQuery.limit,\n        })*/\n\n        let posts = await this.paginationProvider.paginateQuery({\n            limit: postQuery.limit,\n            page: postQuery.page\n        }, this.postRepository,)\n        return posts\n    }\n\n    public async createPost(createPostDto: CreatePostDto) {\n        //let metaOptions = createPostDto.metaOptions ? this.metaOptionRepository.create(createPostDto.metaOptions) : null\n\n        let tags = await this.tagsService.findMultpleTags(createPostDto.tags)\n        let author = await this.userService.findOneById(createPostDto.authorId);\n        let post = this.postRepository.create({\n            ...createPostDto,\n            author: author,\n            tags: tags\n        })\n        /*\n        if (metaOptions) {\n                    await this.metaOptionRepository.save(metaOptions);\n                }\n                if (metaOptions) {\n                    post.metaOptions = metaOptions\n                }*/\n\n        return await this.postRepository.save(post)\n    }\n\n    public async delete(id: number) {\n\n        let post = await this.postRepository.findOneBy({ id: id })\n\n        await this.postRepository.delete(id)\n\n        /*await this.metaOptionRepository.delete(post.metaOptions.id)\n*/\n        /*let inversePost = await this.metaOptionRepository.find({\n            where: {\n                id: post.metaOptions.id\n            },\n            relations: {\n                post: true\n            }\n        })*/\n        return { deleted: true, id }\n    }\n\n\n    public async update(patchPostDto: PatchPostDto) {\n        let tags = undefined;\n        let post = undefined;\n        try {\n            tags = await this.tagsService.findMultpleTags(patchPostDto.tags);\n        } catch (err) {\n            throw new RequestTimeoutException('unable to process your request please try later',);\n        }\n\n        if (!tags || tags.length !== patchPostDto.tags.length) {\n            throw new BadRequestException('please check your tag Ids and ensure they are correct')\n        }\n\n        try {\n            post = await this.postRepository.findOneBy({ id: patchPostDto.id })\n        } catch (e) {\n            throw new RequestTimeoutException('unable to process your request please try later',);\n\n        }\n\n        if (!post) {\n            throw new BadRequestException('The post id does not exist')\n        }\n\n        post.title = patchPostDto.title ?? post.title;\n        post.content = patchPostDto.content ?? post.content\n        post.status = patchPostDto.status ?? post.status\n        post.slug = patchPostDto.slug ?? post.slug\n        post.postType = patchPostDto.postType ?? post.postType\n        post.featuredImageUrl = patchPostDto.featuredImageUrl ?? post.featuredImageUrl\n        post.publishOn = patchPostDto.publishOn ?? post.publishOn\n\n        post.tags = tags\n        try {\n            await this.postRepository.save(post)\n        } catch (err) {\n            throw new RequestTimeoutException('unable to process your request please try later',);\n        }\n        return post;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInDto.html":{"url":"classes/SignInDto.html","title":"class - SignInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/signin.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/signin.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/signin.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString } from \"class-validator\";\n\nexport class SignInDto {\n    @IsEmail()\n    @IsNotEmpty()\n    email: string;\n\n    @IsString()\n    @IsNotEmpty()\n    password: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SignInProvider.html":{"url":"injectables/SignInProvider.html","title":"injectable - SignInProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SignInProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/sign-in.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, hashingProvider: HashingProvider, jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/sign-in.provider.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/sign-in.provider.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable, RequestTimeoutException, UnauthorizedException } from '@nestjs/common';\nimport { SignInDto } from '../dtos/signin.dto';\nimport { UserService } from 'src/users/providers/user.service';\nimport { HashingProvider } from './hashing.provider';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigType } from '@nestjs/config';\nimport jwtConfig from '../config/jwt.config';\n\n@Injectable()\nexport class SignInProvider {\n\n    constructor(\n        @Inject(forwardRef(() => UserService))\n        private readonly userService: UserService,\n        private readonly hashingProvider: HashingProvider,\n        private readonly jwtService: JwtService,\n        @Inject(jwtConfig.KEY) private readonly jwtConfiguration: ConfigType\n    ) {\n\n    }\n    public async signIn(signInDto: SignInDto) {\n        let user = await this.userService.findOneByEmail(signInDto.email)\n\n        let isEqual: boolean = false\n\n        try {\n            isEqual = await this.hashingProvider.comparePassword(signInDto.password, user.password)\n        } catch (error) {\n            throw new RequestTimeoutException(error, {\n                description: 'could not compare password'\n            })\n        }\n\n        if (!isEqual) {\n            throw new UnauthorizedException(\"incorrect password\")\n        }\n        const accesToken = await this.jwtService.signAsync({\n            sub: user.id,\n            email: user.email\n        }, {\n            audience: this.jwtConfiguration.audience,\n            issuer: this.jwtConfiguration.issuer,\n            secret: this.jwtConfiguration.secret,\n            expiresIn: this.jwtConfiguration.accessTokenTtl\n        })\n        return {\n            accesToken\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Tag.html":{"url":"entities/Tag.html","title":"entity - Tag","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Tag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tag.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                deleteAt\n                            \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                posts\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, post => post.tags, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:48\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from \"src/post/post.entity\";\nimport { Column, CreateDateColumn, DeleteDateColumn, Entity, ManyToMany, PrimaryGeneratedColumn, UpdateDateColumn } from \"typeorm\";\n\n@Entity()\nexport class Tag {\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column({\n        type: \"varchar\",\n        length: 256,\n        nullable: false,\n        unique: true\n    })\n    name: string;\n\n    @Column({\n        type: \"varchar\",\n        length: 256,\n        nullable: false,\n        unique: true\n    })\n    slug: string;\n\n    @Column({\n        type: \"text\",\n        nullable: true,\n    })\n    description?: string;\n\n    @Column({\n        type: \"text\",\n        nullable: true,\n    })\n    schema?: string;\n\n    @Column({\n        type: \"varchar\",\n        length: 1024,\n        nullable: true,\n    })\n    featuredImageUrl: string;\n\n    @CreateDateColumn()\n    createDate: Date;\n\n    @UpdateDateColumn()\n    updateDate: Date;\n\n    @DeleteDateColumn()\n    deleteAt: Date;\n\n    @ManyToMany(() => Post, (post) => post.tags, {\n        onDelete: \"CASCADE\"\n    })\n    posts: Post[];\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagsController.html":{"url":"controllers/TagsController.html","title":"controller - TagsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tags\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                create\n                            \n                            \n                                    \n                                    Public\n                                delete\n                            \n                            \n                                    \n                                    Public\n                                softDelete\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTagDto: CreateTagDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTagDto\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        softDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDelete(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('soft-delete')\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, ParseIntPipe, Post, Query } from '@nestjs/common';\nimport { CreateTagDto } from './dtos/create-tag.dto';\nimport { TagsService } from './providers/tags.service';\n\n@Controller('tags')\nexport class TagsController {\n\n    constructor(private readonly tagsService: TagsService) { }\n    @Post()\n    public create(@Body() createTagDto: CreateTagDto) {\n        return this.tagsService.createTags(createTagDto)\n    }\n\n    @Delete()\n    public delete(@Query('id', ParseIntPipe) id: number) {\n        return this.tagsService.delete(id);\n    }\n    @Delete(\"soft-delete\")\n    public softDelete(@Query('id', ParseIntPipe) id: number) {\n        return this.tagsService.softRemove(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagsModule.html":{"url":"modules/TagsModule.html","title":"module - TagsModule","body":"\n                   \n\n\n\n\n    Modules\n    TagsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_providers\n\n\n\ncluster_TagsModule_exports\n\n\n\n\nTagsService \n\nTagsService \n\n\n\nTagsModule\n\nTagsModule\n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tags/tags.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TagsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TagsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TagsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TagsController } from './tags.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Tag } from './tag.entity';\nimport { TagsService } from './providers/tags.service';\n\n@Module({\n  controllers: [TagsController],\n  imports: [TypeOrmModule.forFeature([Tag])],\n  providers: [TagsService],\n  exports: [TagsService]\n})\nexport class TagsModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TagsService.html":{"url":"injectables/TagsService.html","title":"injectable - TagsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TagsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/providers/tags.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createTags\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findMultpleTags\n                            \n                            \n                                    Public\n                                    Async\n                                softRemove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/tags/providers/tags.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tagsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTags(createTagDto: CreateTagDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTagDto\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findMultpleTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    findMultpleTags(tags: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tags\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        softRemove\n                        \n                    \n                \n            \n            \n                \n                        \n                    softRemove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateTagDto } from '../dtos/create-tag.dto';\nimport { In, Repository } from 'typeorm';\nimport { Tag } from '../tag.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class TagsService {\n\n    constructor(@InjectRepository(Tag) private readonly tagsRepository: Repository) { }\n\n    public async createTags(createTagDto: CreateTagDto) {\n        let tag = this.tagsRepository.create(createTagDto)\n\n        return await this.tagsRepository.save(tag)\n    }\n\n    public async findMultpleTags(tags: number[]) {\n        let result = await this.tagsRepository.find({\n            where: {\n                id: In(tags)\n            }\n        })\n\n        return result;\n    }\n\n    public async delete(id: number) {\n        await this.tagsRepository.delete(id);\n        return { deleted: true, id }\n    }\n\n    public async softRemove(id: number) {\n        await this.tagsRepository.softDelete(id);\n        return { deleted: true, id }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                posts\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, post => post.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:37\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from \"src/post/post.entity\";\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from \"typeorm\";\n\n@Entity()\nexport class User {\n    @PrimaryGeneratedColumn()\n    id: number;\n    @Column({\n        type: \"varchar\",\n        length: 96,\n        nullable: false\n    })\n    firstName: string;\n    @Column(\n        {\n            type: \"varchar\",\n            length: 96,\n            nullable: true\n        }\n    )\n    lastName: string;\n    @Column({\n        type: \"varchar\",\n        length: 96,\n        nullable: false,\n        unique: true\n    })\n    email: string;\n    @Column({\n        type: \"varchar\",\n        length: 96,\n        nullable: false\n    })\n    password: string;\n\n    @OneToMany(() => Post, (post) => post.author)\n    posts: Post[]\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserCreateManyProvider.html":{"url":"injectables/UserCreateManyProvider.html","title":"injectable - UserCreateManyProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserCreateManyProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/user-create-many.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createMany\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataSource: DataSource)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/user-create-many.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMany(createManyUsersDto: CreateManyUsersDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user-create-many.provider.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createManyUsersDto\n                                            \n                                                            CreateManyUsersDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, RequestTimeoutException } from '@nestjs/common';\nimport { User } from '../user.entity';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { DataSource } from 'typeorm';\nimport { CreateManyUsersDTO } from '../dtos/create-many-user.dto';\n\n@Injectable()\nexport class UserCreateManyProvider {\n\n    constructor(private readonly dataSource: DataSource) { }\n    public async createMany(createManyUsersDto: CreateManyUsersDTO) {\n        let newUsers: User[] = []\n\n        const queryRunner = this.dataSource.createQueryRunner();\n        try {\n            await queryRunner.connect();\n\n            await queryRunner.startTransaction();\n        } catch (error) {\n            throw new RequestTimeoutException('could not connect to the database')\n        }\n\n        try {\n            for (let user of createManyUsersDto.users) {\n                let newUser = queryRunner.manager.create(User, user)\n                let result = await queryRunner.manager.save(newUser)\n                newUsers.push(result)\n            }\n            await queryRunner.commitTransaction();\n        } catch (error) {\n            await queryRunner.rollbackTransaction();\n            throw new ConflictException('could not complete the transaction', {\n                description: String(error)\n            })\n        } finally {\n            try {\n                await queryRunner.release()\n            } catch (error) {\n                throw new RequestTimeoutException('could not release to the connection', {\n                    description: String(error)\n                })\n            }\n        }\n        return newUsers\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/user.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to connect to Users table and perform business operations\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createMany\n                            \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOneByEmail\n                            \n                            \n                                    Public\n                                    Async\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, userRepository: Repository, configService: ConfigService, profilConfiguration: ConfigType<>, usersCreateManyProvider: UserCreateManyProvider, createUsersProvider: CreateUserProvider, findOneUserByEmailProvider: FindOneUserByEmailProvider)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/user.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        profilConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersCreateManyProvider\n                                                  \n                                                        \n                                                                        UserCreateManyProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        createUsersProvider\n                                                  \n                                                        \n                                                                        CreateUserProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findOneUserByEmailProvider\n                                                  \n                                                        \n                                                                        FindOneUserByEmailProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMany(createManyUsersDto: CreateManyUsersDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user.service.ts:92\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createManyUsersDto\n                                            \n                                                            CreateManyUsersDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user.service.ts:88\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUserParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user.service.ts:35\n                        \n                    \n\n\n            \n                \n                        The method to get all the users from the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user.service.ts:96\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user.service.ts:67\n                        \n                    \n\n\n            \n                \n                        Find a single user using the ID of user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, forwardRef, HttpException, HttpStatus, Inject, Injectable, RequestTimeoutException } from \"@nestjs/common\";\nimport { GetUsersParamDto } from \"../dtos/get-users-param.dto\";\nimport { AuthService } from \"src/auth/service/auth.service\";\nimport { DataSource, Repository } from \"typeorm\";\nimport { User } from \"../user.entity\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { CreateUserDto } from \"../dtos/create-user.dto\";\nimport { ConfigService, ConfigType } from \"@nestjs/config\";\nimport profileConfig from \"../config/profile.config\";\nimport { UserCreateManyProvider } from \"./user-create-many.provider\";\nimport { CreateManyUsersDTO } from \"../dtos/create-many-user.dto\";\nimport { CreateUserProvider } from \"./create-user.provider\";\nimport { FindOneUserByEmailProvider } from \"./find-one-user-by-email.provider\";\n\n/**\n * Class to connect to Users table and perform business operations\n */\n@Injectable()\nexport class UserService {\n\n    constructor(\n        @Inject(forwardRef(() => AuthService)) private readonly authService: AuthService,\n        @InjectRepository(User) private userRepository: Repository,\n        private readonly configService: ConfigService,\n        @Inject(profileConfig.KEY) private readonly profilConfiguration: ConfigType,\n        private readonly usersCreateManyProvider: UserCreateManyProvider,\n\n        private readonly createUsersProvider: CreateUserProvider,\n        private readonly findOneUserByEmailProvider: FindOneUserByEmailProvider\n    ) { }\n\n    /**\n     * The method to get all the users from the database\n     */\n    public findAll(getUserParamDto: GetUsersParamDto, limit: number, page: number) {\n        /* const isAUth = this.authService.isAUth();\n         console.log(isAUth)\n \n         const environment = this.configService.get(\"S3_BUCKET\")\n         console.log(environment)\n         console.log(this.profilConfiguration)\n         console.log(this.profilConfiguration.apiKey)\n         return [\n             {\n                 firstName: 'John',\n                 email: 'john@doe.com'\n             },\n             {\n                 firstName: 'Alice',\n                 email: 'alice@doe.com'\n             }\n         ]*/\n\n        throw new HttpException({\n            status: HttpStatus.MOVED_PERMANENTLY,\n            error: 'The API endpoint does not exist',\n            fileName: 'user.service.ts',\n            lineNumber: 14,\n        }, HttpStatus.MOVED_PERMANENTLY, {\n            description: 'Occured because the API endpoint was permanently moved'\n        })\n    }\n    /**\n     * Find a single user using the ID of user\n     */\n\n    public async findOneById(id: number) {\n        let user = undefined;\n\n        try {\n            user = await this.userRepository.findOneBy({\n                id: id,\n            })\n        } catch (err) {\n            throw new RequestTimeoutException('Unable to process your request at the moment please try later', {\n                description: 'Error connectiong to the database'\n            })\n        }\n\n        if (!user) {\n            throw new BadRequestException('The user id does not exist')\n        }\n        return await this.userRepository.findOneBy({\n            id: id,\n        })\n    }\n\n    public async createUser(createUserDto: CreateUserDto) {\n        return this.createUsersProvider.createUser(createUserDto)\n    }\n\n    public async createMany(createManyUsersDto: CreateManyUsersDTO) {\n        return await this.usersCreateManyProvider.createMany(createManyUsersDto)\n    }\n\n    public async findOneByEmail(email: string) {\n        return await this.findOneUserByEmailProvider.findOneByEmail(email)\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Public\n                                createManyUsers\n                            \n                            \n                                    \n                                    Public\n                                createUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        createManyUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createManyUsers(createManyUsersDTO: CreateManyUsersDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create-many')@UseGuards(AccessTokenGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createManyUsersDTO\n                                            \n                                                            CreateManyUsersDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDTO: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDTO\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUsersParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/:optional?')@ApiOperation({summary: 'Fetches a list of registered users on the application'})@ApiResponse({status: 200, description: 'Users fetched successfully based on the query'})@ApiQuery({name: 'limit', type: 'number', required: false, description: 'the number of entries returned per query', example: 10})@ApiQuery({name: 'page', type: 'number', required: false, description: 'the position of the page number that you want the API to return ', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUsersParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, DefaultValuePipe, Get, Header, Headers, Ip, Param, ParseIntPipe, Patch, Post, Query, UseGuards, ValidationPipe } from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UserService } from './providers/user.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreateManyUsersDTO } from './dtos/create-many-user.dto';\nimport { AccessTokenGuard } from 'src/auth/guards/access-token.guard';\n\n@Controller('users')\n@ApiTags('Users')\n//@UseGuards(AccessTokenGuard)\nexport class UsersController {\n\n    constructor(private readonly userService: UserService) { }\n    @Get('/:id/:optional?')\n    @ApiOperation({\n        summary: \"Fetches a list of registered users on the application\",\n    })\n    @ApiResponse({\n        status: 200,\n        description: \"Users fetched successfully based on the query\"\n    })\n    @ApiQuery({\n        name: 'limit',\n        type: \"number\",\n        required: false,\n        description: \"the number of entries returned per query\",\n        example: 10\n    })\n    @ApiQuery({\n        name: 'page',\n        type: \"number\",\n        required: false,\n        description: \"the position of the page number that you want the API to return \",\n        example: 1\n    })\n    public getUsers(/*@Param('id', ParseIntPipe) id: number | undefined*/ @Param() getUsersParamDto: GetUsersParamDto,\n        @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n        @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number\n    ) {\n        return this.userService.findAll(getUsersParamDto, limit, page)\n    }\n\n    @Post()\n    public createUsers(@Body() createUserDTO: CreateUserDto,\n    ) {\n        return this.userService.createUser(createUserDTO);\n    }\n\n    @Post('create-many')\n    @UseGuards(AccessTokenGuard)\n    public createManyUsers(@Body() createManyUsersDTO: CreateManyUsersDTO\n    ) {\n        return this.userService.createMany(createManyUsersDTO);\n    }\n\n    @Patch()\n    public patchUser(@Body() patchUserDto: PatchUserDto) {\n        return patchUserDto\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nUserService \n\nUserService \n\n\n\nUsersModule\n\nUsersModule\n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUsersModule -->\n\nCreateUserProvider->UsersModule\n\n\n\n\n\nFindOneUserByEmailProvider\n\nFindOneUserByEmailProvider\n\nUsersModule -->\n\nFindOneUserByEmailProvider->UsersModule\n\n\n\n\n\nUserCreateManyProvider\n\nUserCreateManyProvider\n\nUsersModule -->\n\nUserCreateManyProvider->UsersModule\n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CreateUserProvider\n                        \n                        \n                            FindOneUserByEmailProvider\n                        \n                        \n                            UserCreateManyProvider\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UserService } from './providers/user.service';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './user.entity';\nimport { ConfigModule } from '@nestjs/config';\nimport { UserCreateManyProvider } from './providers/user-create-many.provider';\nimport { CreateUserProvider } from './providers/create-user.provider';\nimport { FindOneUserByEmailProvider } from './providers/find-one-user-by-email.provider';\nimport profileConfig from './config/profile.config';\nimport { APP_GUARD } from '@nestjs/core';\nimport { AccessTokenGuard } from 'src/auth/guards/access-token.guard';\nimport jwtConfig from 'src/auth/config/jwt.config';\nimport { JwtModule } from '@nestjs/jwt';\n\n@Module({\n    controllers: [UsersController],\n    providers: [UserService,\n        UserCreateManyProvider,\n        CreateUserProvider,\n        FindOneUserByEmailProvider,\n        {\n            provide: APP_GUARD, //when adding this contant APP_GUARD the entire application will be guarded by this.\n            useClass: AccessTokenGuard\n        }\n    ],\n    exports: [UserService],\n    imports: [\n        forwardRef(() => AuthModule),\n        TypeOrmModule.forFeature([User]),\n        ConfigModule.forFeature(profileConfig),\n        ConfigModule.forFeature(jwtConfig),\n        JwtModule.registerAsync(jwtConfig.asProvider())\n    ]\n})\nexport class UsersModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.module.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/constants/auth.constants.ts\n            \n            variable\n            REQUEST_USER_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dtos/signin.dto.ts\n            \n            class\n            SignInDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/guards/access-token.guard.ts\n            \n            guard\n            AccessTokenGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/providers/bcrypt.provider.ts\n            \n            injectable\n            BcryptProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/hashing.provider.ts\n            \n            injectable\n            HashingProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/sign-in.provider.ts\n            \n            injectable\n            SignInProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/service/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/pagination/dtos/pagination-query.dto.ts\n            \n            class\n            PaginationQueryDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/pagination/interfaces/paginated.interface.ts\n            \n            interface\n            Paginated\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/pagination/providers/pagination.provider.ts\n            \n            injectable\n            PaginationProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/dtos/create-post-meta-option.dtos.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/meta-option.entity.ts\n            \n            entity\n            MetaOption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/meta-options.controller.ts\n            \n            controller\n            MetaOptionsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/providers/meta-options.service.ts\n            \n            injectable\n            MetaOptionsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/post/dtos/create-post.dtos.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/post/dtos/get-posts.dto.ts\n            \n            class\n            GetPostBaseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/post/dtos/get-posts.dto.ts\n            \n            class\n            GetPostDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/post/dtos/patch-post-dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/post/post.controller.ts\n            \n            controller\n            PostController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/post/post.entity.ts\n            \n            entity\n            Post\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/post/services/post.service.ts\n            \n            injectable\n            PostService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/dtos/create-tag.dto.ts\n            \n            class\n            CreateTagDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/providers/tags.service.ts\n            \n            injectable\n            TagsService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/tag.entity.ts\n            \n            entity\n            Tag\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tags/tags.controller.ts\n            \n            controller\n            TagsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/dtos/create-many-user.dto.ts\n            \n            class\n            CreateManyUsersDTO\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/providers/create-user.provider.ts\n            \n            injectable\n            CreateUserProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/create-user.provider.ts\n            \n            function\n            InejectRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/providers/find-one-user-by-email.provider.ts\n            \n            injectable\n            FindOneUserByEmailProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/user-create-many.provider.ts\n            \n            injectable\n            UserCreateManyProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/user.service.ts\n            \n            injectable\n            UserService\n            \n                42 %\n                (3/7)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.23\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.2\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.3.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            joi : ^17.12.2\n        \n            pg : ^8.11.5\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            postStatus   (src/.../status.enum.ts)\n                        \n                        \n                            postType   (src/.../postType.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/post/enums/status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : DRAFT\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : SCHEDULED\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : REVIEW\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : PUBLISHED\n                            \n                        \n            \n        \n\n    src/post/enums/postType.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : POST\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : PAGE\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : STORY\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : SERIES\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            InejectRepository   (src/.../create-user.provider.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/users/providers/create-user.provider.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        InejectRepository\n                        \n                    \n                \n            \n            \n                \nInejectRepository()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MetaOptionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaginationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_exports\n\n\n\ncluster_PaginationModule_providers\n\n\n\ncluster_PostModule\n\n\n\ncluster_PostModule_providers\n\n\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nHashingProvider \n\nHashingProvider \n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\n\n\nPostModule\n\nPostModule\n\nPostModule -->\n\nPaginationModule->PostModule\n\n\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nPaginationProvider \n\nPaginationProvider \n\nPaginationProvider  -->\n\nPaginationModule->PaginationProvider \n\n\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostModule -->\n\nTagsModule->PostModule\n\n\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nTagsService \n\nTagsService \n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostModule -->\n\nUsersModule->PostModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nSignInProvider\n\nSignInProvider\n\nAuthModule -->\n\nSignInProvider->AuthModule\n\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nPaginationModule -->\n\nPaginationProvider->PaginationModule\n\n\n\n\n\nPostService\n\nPostService\n\nPostModule -->\n\nPostService->PostModule\n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUsersModule -->\n\nCreateUserProvider->UsersModule\n\n\n\n\n\nFindOneUserByEmailProvider\n\nFindOneUserByEmailProvider\n\nUsersModule -->\n\nFindOneUserByEmailProvider->UsersModule\n\n\n\n\n\nUserCreateManyProvider\n\nUserCreateManyProvider\n\nUsersModule -->\n\nUserCreateManyProvider->UsersModule\n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    13 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    12 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ENV   (src/.../app.module.ts)\n                        \n                        \n                            REQUEST_USER_KEY   (src/.../auth.constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n\n        \n    \n\n    src/auth/constants/auth.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        REQUEST_USER_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'user'\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
