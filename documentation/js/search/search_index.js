var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/guards/AccessTokenGuard.html",[0,2.991,1,2.215]],["body/guards/AccessTokenGuard.html",[1,2.761,2,2.62,3,0.139,4,0.123,5,0.123,6,4.324,7,2.92,8,0.239,9,1.111,10,1.728,11,5.569,12,2.137,13,4.804,14,1.135,15,2.62,16,4.393,17,3.672,18,3.732,19,0.582,20,3.376,21,1.348,22,0.016,23,1.241,24,0.455,25,0.916,26,2.92,27,4.728,28,3.376,29,3.728,30,1.066,31,2.942,32,4.804,33,4.098,34,3.376,35,1.405,36,2.334,37,0.382,38,1.64,39,0.589,40,3.425,41,0.528,42,1.64,43,1.729,44,2.92,45,2.62,46,1.828,47,2.217,48,2.62,49,2.62,50,2.92,51,0.139,52,0.066,53,2.396,54,1.559,55,1.258,56,2.217,57,2.555,58,3.376,59,5.569,60,3.376,61,2.112,62,1.76,63,1.559,64,4.155,65,1.135,66,3.376,67,3.376,68,2.92,69,1.559,70,1.484,71,1.066,72,1.64,73,3.376,74,3.376,75,3.376,76,3.376,77,2.92,78,2.92,79,2.92,80,3.376,81,3.376,82,3.376,83,0.01,84,0.01]],["title/interfaces/ActiveUserData.html",[85,2.531,86,1.872]],["body/interfaces/ActiveUserData.html",[3,0.22,4,0.195,5,0.195,8,0.379,22,0.015,24,0.531,35,1.765,51,0.22,83,0.013,84,0.013,85,3.515,86,3.165,87,4.154,88,3.515,89,1.778,90,4.63,91,1.778,92,3.551,93,5.318,94,2.361,95,2.245,96,3.515]],["title/controllers/AppController.html",[97,1.475,98,2.735]],["body/controllers/AppController.html",[3,0.222,4,0.197,5,0.197,22,0.016,35,1.36,37,0.364,41,0.847,51,0.222,52,0.106,54,2.5,55,1.418,71,1.201,83,0.013,84,0.013,97,2.512,98,4.656,99,2.168,100,4.683,101,4.324,102,4.683,103,4.683,104,5.413]],["title/modules/AppModule.html",[105,1.475,106,2.735]],["body/modules/AppModule.html",[1,2.445,3,0.117,4,0.104,5,0.104,22,0.016,24,0.233,37,0.426,38,1.388,41,0.447,42,1.388,43,1.464,46,1.548,51,0.117,52,0.056,57,1.199,72,1.388,83,0.009,84,0.009,89,1.161,96,1.877,98,3.608,99,1.704,101,3.867,102,2.472,105,1.946,106,5.393,107,1.388,108,1.388,109,1.548,110,1.548,111,1.388,112,2.753,113,1.548,114,2.472,115,2.472,116,2.472,117,3.867,118,4.145,119,3.867,120,4.145,121,4.205,122,3.628,123,2.305,124,1.548,125,1.464,126,2.218,127,3.114,128,2.858,129,2.858,130,2.858,131,1.642,132,2.858,133,2.858,134,1.877,135,1.094,136,2.858,137,2.858,138,1.388,139,1.548,140,2.858,141,1.464,142,2.858,143,3.302,144,4.872,145,2.858,146,4.255,147,2.858,148,4.255,149,2.858,150,4.255,151,2.858,152,2.218,153,2.858,154,3.681,155,1.877,156,2.858,157,2.028,158,3.02,159,2.858,160,1.642,161,2.858,162,2.218,163,3.945,164,2.472,165,2.858,166,2.858,167,4.255,168,2.858,169,2.858,170,2.858,171,2.858,172,2.858,173,2.858,174,2.858,175,1.751,176,2.858,177,2.858,178,2.858,179,2.858,180,2.858,181,2.858,182,2.858,183,2.858,184,1.751,185,2.858,186,2.858,187,2.858,188,2.858,189,2.218,190,2.218,191,2.472,192,2.472]],["title/injectables/AppService.html",[39,0.472,101,2.36]],["body/injectables/AppService.html",[3,0.221,4,0.196,5,0.196,8,0.381,9,1.514,19,0.562,22,0.016,30,1.197,35,1.645,37,0.299,39,0.803,41,0.844,51,0.221,52,0.106,71,1.197,83,0.013,84,0.013,101,4.009,103,6.34,193,1.666,194,4.665,195,5.393,196,5.393,197,5.393,198,4.665]],["title/controllers/AuthController.html",[97,1.475,199,2.735]],["body/controllers/AuthController.html",[3,0.163,4,0.144,5,0.144,8,0.28,9,1.242,10,2.174,19,0.559,21,1.295,22,0.016,23,1.192,24,0.496,25,0.88,30,1.192,37,0.39,41,0.62,51,0.163,52,0.078,54,1.83,55,1.038,71,1.192,83,0.011,84,0.011,97,1.517,99,1.587,199,3.811,200,3.428,201,2.427,202,3.289,203,1.92,204,3.811,205,4.168,206,3.428,207,4.309,208,1.527,209,5.37,210,3.963,211,3.963,212,1.967,213,3.076,214,4.309,215,5.37,216,3.963,217,3.963,218,2.427,219,3.963,220,3.428,221,1.175,222,3.5,223,3.428,224,3.076,225,3.963,226,2.602,227,3.428,228,3.076,229,2.602,230,3.963,231,5.37,232,4.645,233,3.963,234,3.963,235,3.963,236,3.963,237,3.963]],["title/modules/AuthModule.html",[105,1.475,117,2.36]],["body/modules/AuthModule.html",[3,0.143,4,0.127,5,0.127,22,0.016,37,0.42,41,0.546,42,1.696,43,1.788,46,1.891,47,2.292,51,0.143,52,0.068,83,0.01,84,0.01,99,1.97,105,2.181,107,1.696,108,1.696,109,1.891,110,1.891,111,1.696,112,3.085,113,3.085,117,4.693,122,2.827,123,2.664,124,1.891,125,1.788,127,2.138,143,2.709,152,2.709,189,2.709,190,2.709,191,3.02,192,3.02,199,4.042,222,4.289,223,3.02,238,3.02,239,3.02,240,3.02,241,3.844,242,3.465,243,4.143,244,4.143,245,4.143,246,3.491,247,4.042,248,2.664,249,3.491,250,3.02,251,3.491,252,3.491,253,3.491,254,3.02,255,3.02,256,3.02,257,3.23,258,3.02,259,3.491,260,3.491,261,3.491,262,3.02]],["title/injectables/AuthService.html",[39,0.472,222,2.215]],["body/injectables/AuthService.html",[3,0.154,4,0.137,5,0.137,8,0.266,9,1.198,10,2.139,12,2.078,14,1.262,19,0.617,21,1.428,22,0.016,23,1.314,24,0.482,25,0.971,30,1.149,37,0.394,38,1.824,39,0.635,41,0.588,51,0.154,52,0.074,55,1.551,65,1.74,71,1.149,83,0.01,84,0.01,193,1.16,203,1.889,204,3.674,205,4.017,206,4.478,207,4.101,212,1.896,213,4.017,214,4.101,222,2.975,224,2.915,228,2.915,229,2.466,242,1.924,244,3.91,245,4.344,248,2.034,254,3.249,255,3.249,256,3.249,257,3.399,258,3.249,263,3.249,264,2.915,265,3.119,266,5.923,267,3.756,268,3.756,269,3.756,270,2.3,271,3.756,272,3.756,273,3.756]],["title/guards/AuthenticationGuard.html",[0,2.991,158,2.735]],["body/guards/AuthenticationGuard.html",[1,4.003,2,4.438,3,0.144,4,0.128,5,0.128,8,0.249,9,1.144,10,1.767,11,6.15,12,2.293,14,1.182,19,0.515,21,1.192,22,0.016,23,1.097,24,0.466,25,0.81,26,3.042,27,4.815,29,3.837,30,0.78,31,3.028,37,0.376,39,0.606,40,3.028,41,0.55,44,3.042,45,2.729,50,3.042,51,0.144,52,0.069,53,2.496,54,1.624,55,1.775,57,2.742,61,1.546,62,1.288,65,1.182,70,2.514,71,0.78,72,2.402,83,0.01,84,0.01,91,0.96,155,2.309,157,2.496,158,3.509,226,2.309,227,3.042,274,3.042,275,4.944,276,4.944,277,4.944,278,3.516,279,6.78,280,3.516,281,3.516,282,3.516,283,2.729,284,4.944,285,3.516,286,3.516,287,3.516,288,3.042,289,3.516,290,3.516,291,3.516,292,3.516,293,3.516,294,3.516,295,3.516,296,3.516,297,3.516,298,3.516,299,3.516]],["title/injectables/BcryptProvider.html",[39,0.472,252,2.735]],["body/injectables/BcryptProvider.html",[3,0.174,4,0.155,5,0.155,8,0.3,9,1.301,10,1.948,19,0.586,21,1.356,22,0.016,23,1.248,24,0.458,25,0.921,30,1.248,31,4.111,35,1.89,37,0.35,39,0.689,41,0.664,51,0.174,52,0.083,53,3.012,57,1.78,65,1.427,71,1.248,83,0.011,84,0.011,193,1.311,203,1.72,241,3.045,252,3.99,300,3.672,301,4.863,302,4.863,303,4.863,304,6.207,305,5.806,306,4.245,307,3.99,308,4.863,309,4.245,310,3.672,311,4.863,312,5.622,313,4.245,314,4.245,315,4.245]],["title/injectables/CreateGoogleUserProvider.html",[39,0.472,316,2.36]],["body/injectables/CreateGoogleUserProvider.html",[3,0.17,4,0.151,5,0.151,8,0.292,9,1.278,10,1.923,12,1.45,14,1.857,19,0.575,21,1.332,22,0.016,23,1.226,24,0.45,25,0.905,30,0.917,37,0.384,39,0.677,41,0.647,51,0.17,52,0.081,57,1.734,61,1.818,62,2.024,63,1.909,65,1.39,69,1.909,70,1.818,71,0.917,83,0.011,84,0.011,89,1.698,135,1.583,193,1.277,203,1.698,212,1.515,316,3.384,317,4.416,318,3.37,319,2.934,320,4.779,321,3.209,322,3.067,323,4.134,324,3.921,325,4.779,326,4.545,327,4.134,328,3.209,329,1.515,330,2.376,331,2.118,332,3.576,333,3.576,334,2.715,335,4.134,336,4.134,337,3.576,338,1.515,339,1.818]],["title/classes/CreateManyUsersDTO.html",[52,0.075,340,2.36]],["body/classes/CreateManyUsersDTO.html",[3,0.189,4,0.168,5,0.168,8,0.326,19,0.48,22,0.016,24,0.584,37,0.385,51,0.189,52,0.129,72,3.189,83,0.012,84,0.012,89,1.259,91,1.62,208,1.312,339,2.028,340,3.636,341,1.69,342,4.607,343,3.898,344,3.274,345,4.31,346,3.55,347,4.613,348,5.135,349,4.607,350,5.135,351,4.613,352,3.99,353,4.613,354,5.135,355,3.041,356,5.135,357,1.847,358,2.825,359,3.029,360,4.213,361,2.241,362,3.99]],["title/classes/CreatePostDto.html",[52,0.075,363,2.215]],["body/classes/CreatePostDto.html",[3,0.084,4,0.075,5,0.075,8,0.145,19,0.664,22,0.016,24,0.579,25,1.087,29,2.55,35,1.636,36,0.994,37,0.306,51,0.084,52,0.081,70,1.445,72,2,83,0.007,84,0.007,91,1.123,94,1.384,138,1.596,208,1.812,221,1.996,338,2.468,341,0.75,348,2.842,349,3.195,350,2.842,352,1.77,354,2.842,355,2.822,356,2.842,357,0.82,359,1.344,360,3.91,361,0.994,362,2.842,363,1.888,364,5.631,365,1.77,366,5.007,367,2.921,368,2.921,369,4.67,370,3.561,371,2.921,372,3.388,373,2.703,374,3.16,375,5.007,376,2.047,377,4.707,378,2.047,379,2.047,380,3.286,381,3.286,382,4.67,383,3.286,384,2.047,385,2.708,386,2.842,387,2.047,388,5.16,389,1.888,390,2.047,391,2.047,392,2.047,393,4.076,394,4.712,395,3.286,396,2.047,397,2.886,398,2.047,399,4.076,400,3.286,401,3.286,402,3.286,403,2.047,404,2.047,405,3.286,406,4.076,407,3.286,408,3.286,409,2.047,410,2.047,411,2.047,412,1.77,413,3.561,414,1.77,415,4.076,416,4.076,417,2.55,418,2.842,419,2.842,420,2.842,421,2.842,422,2.842,423,1.77,424,2.047,425,4.004,426,2.047,427,2.842,428,3.286,429,2.047,430,2.047,431,2.047,432,2.55,433,2.047,434,2.047,435,2.047,436,2.047,437,2.047,438,3.195,439,3.286,440,2.55,441,3.458,442,2.708,443,2.842,444,1.588,445,1.588,446,1.588,447,1.77,448,1.77,449,1.453,450,1.453,451,4.492,452,2.047,453,2.047,454,2.047,455,2.842,456,1.77,457,1.77,458,2.047,459,2.047,460,2.047,461,2.047,462,1.77,463,2.158,464,1.77,465,2.55,466,2.047,467,2.047,468,2.047]],["title/classes/CreatePostMetaOptionsDto.html",[52,0.075,385,2.215]],["body/classes/CreatePostMetaOptionsDto.html",[3,0.215,4,0.191,5,0.191,8,0.37,19,0.545,22,0.016,24,0.426,35,1.616,37,0.291,51,0.215,52,0.126,83,0.013,84,0.013,91,1.754,138,3.123,208,1.489,221,1.905,341,1.918,355,3.293,357,2.097,385,3.694,440,4.989,442,3.009,449,4.562,465,5.399,469,3.293,470,4.529,471,5.236,472,5.236]],["title/injectables/CreatePostProvider.html",[39,0.472,160,2.215]],["body/injectables/CreatePostProvider.html",[3,0.132,4,0.117,5,0.117,8,0.227,9,1.07,10,1.678,12,1.905,14,1.555,19,0.482,21,1.115,22,0.016,23,1.026,24,0.377,25,0.758,30,0.711,36,2.247,37,0.385,39,0.567,41,0.501,51,0.132,52,0.063,55,1.422,61,2.388,62,1.989,63,2.136,65,1.999,69,2.136,70,2.034,71,0.711,83,0.009,84,0.009,86,2.889,88,2.103,89,1.623,135,1.226,141,3.471,160,2.658,193,0.989,203,1.482,212,1.173,221,1.609,265,2.98,270,1.962,322,2.746,328,2.485,329,1.173,331,1.64,337,4.001,338,1.173,363,3.777,368,4.22,372,2.103,374,3.643,386,2.77,432,2.485,473,4.697,474,2.77,475,3.59,476,3.202,477,3.202,478,4.001,479,4.001,480,3.202,481,2.273,482,1.479,483,2.273,484,2.485,485,2.77,486,1.962,487,2.77,488,3.202,489,3.202,490,3.905,491,3.202,492,3.202,493,3.202,494,2.77,495,3.202,496,3.202,497,1.735,498,3.202,499,3.202,500,2.77,501,2.77,502,2.485,503,2.273,504,3.202,505,3.202]],["title/classes/CreateTagDto.html",[52,0.075,506,2.531]],["body/classes/CreateTagDto.html",[3,0.148,4,0.131,5,0.131,8,0.254,19,0.687,22,0.016,23,1.284,24,0.537,25,1.119,35,1.849,37,0.279,51,0.148,52,0.098,83,0.01,84,0.01,91,1.371,208,1.874,221,1.066,338,2.295,341,1.317,355,2.965,357,1.44,360,4.107,361,1.747,367,4.107,371,4.107,372,4.328,377,4.484,382,3.898,412,3.11,413,5.006,414,3.11,415,5.419,416,5.419,417,3.898,418,4.344,419,4.344,420,4.344,421,4.344,422,4.344,423,3.11,440,3.898,441,3.6,442,3.6,443,4.344,444,2.791,445,2.791,446,2.791,451,4.862,456,3.11,457,4.344,462,3.11,506,3.298,507,5.907,508,3.11,509,3.596,510,3.596,511,3.596,512,3.596,513,3.596,514,3.596,515,3.596,516,3.596,517,3.596,518,3.11]],["title/classes/CreateUserDto.html",[52,0.075,346,1.974]],["body/classes/CreateUserDto.html",[3,0.159,4,0.141,5,0.141,8,0.274,19,0.673,22,0.016,24,0.526,25,0.865,35,1.829,37,0.215,51,0.159,52,0.103,83,0.011,84,0.011,91,1.441,92,2.922,94,1.775,184,4.144,208,1.838,341,1.417,342,5.251,344,2.744,346,2.705,355,3.31,357,1.549,417,4.099,441,3.035,442,3.888,444,3.001,445,3.001,446,3.001,518,4.568,519,3.949,520,4.268,521,3.867,522,3.867,523,3.867,524,3.867,525,3.867,526,3.867,527,3.867,528,6.463,529,5.281,530,5.281,531,5.281,532,5.281,533,5.281,534,5.281,535,4.457,536,5.281,537,6.463,538,5.281,539,5.281,540,5.281,541,3.867,542,4.568,543,6.014,544,3.867,545,3.867]],["title/injectables/CreateUserProvider.html",[39,0.472,546,2.36]],["body/injectables/CreateUserProvider.html",[3,0.134,4,0.119,5,0.119,8,0.231,9,1.084,10,1.695,12,1.644,14,1.575,19,0.488,21,1.13,22,0.016,23,1.04,24,0.382,25,0.768,30,0.724,33,2.87,36,2.276,37,0.367,38,1.584,39,0.575,41,0.51,51,0.134,52,0.064,55,1.227,61,2.637,62,2.197,63,2.769,65,1.844,69,2.164,70,2.412,71,0.724,83,0.009,84,0.009,89,1.279,92,2.276,96,3.077,135,1.248,184,1.997,193,1.007,203,1.497,212,1.195,241,3.776,248,1.766,317,3.893,319,2.314,321,2.531,322,2.769,324,3.326,329,1.195,330,1.874,331,1.67,334,2.141,338,1.717,346,3.387,358,1.997,481,2.314,482,1.506,546,3.36,547,4.053,548,3.261,549,4.053,550,3.261,551,1.997,552,3.261,553,2.141,554,5.485,555,3.261,556,3.261,557,3.637,558,3.637,559,4.053,560,3.893,561,3.637,562,2.821,563,2.531,564,2.821,565,3.261,566,2.531,567,4.257,568,3.261,569,3.261,570,3.261,571,2.531,572,3.261,573,2.821,574,2.531,575,3.261,576,3.261,577,3.261,578,3.261,579,2.821,580,2.314,581,3.261,582,3.261]],["title/injectables/FindOneByGoogleIdProvider.html",[39,0.472,583,2.36]],["body/injectables/FindOneByGoogleIdProvider.html",[3,0.181,4,0.16,5,0.16,8,0.311,9,1.332,10,1.983,12,1.544,14,1.935,19,0.6,21,1.388,22,0.016,23,1.278,24,0.469,25,0.944,30,0.977,35,1.613,37,0.378,39,0.706,41,0.689,51,0.181,52,0.086,55,1.152,71,0.977,83,0.012,84,0.012,89,1.201,135,1.685,193,1.36,203,1.751,212,1.612,318,3.476,321,3.415,322,3.143,324,4.086,329,1.612,330,2.529,331,2.254,334,2.89,535,3.931,583,3.527,584,4.981,585,3.807,586,4.981,587,4.401,588,4.981,589,4.401,590,4.214,591,3.807]],["title/injectables/FindOneUserByEmailProvider.html",[39,0.472,592,2.36]],["body/injectables/FindOneUserByEmailProvider.html",[3,0.164,4,0.145,5,0.145,8,0.282,9,1.247,10,1.887,12,1.398,14,1.812,19,0.561,21,1.3,22,0.016,23,1.196,24,0.439,25,0.883,30,0.884,35,1.535,36,2.618,37,0.363,39,0.661,40,2.441,41,0.624,51,0.164,52,0.078,55,1.044,61,2.37,62,1.975,63,1.84,65,1.339,69,1.84,70,1.752,71,0.884,83,0.011,84,0.011,89,2.049,92,2.967,135,1.526,193,1.231,203,1.667,212,1.46,322,3.021,329,1.46,330,2.29,331,2.041,334,2.617,338,1.46,535,3.741,551,2.441,584,4.74,592,3.302,593,3.447,594,4.663,595,3.985,596,3.985,597,5.39,598,4.663,599,3.985,600,3.985,601,3.447,602,3.985,603,3.985,604,3.093]],["title/injectables/GenerateTokensProvider.html",[39,0.472,242,1.974]],["body/injectables/GenerateTokensProvider.html",[3,0.142,4,0.126,5,0.126,8,0.245,9,1.132,10,2.085,12,1.717,14,1.645,16,4.554,17,3.214,18,3.776,19,0.591,21,1.486,22,0.016,23,1.259,24,0.502,25,0.93,30,1.086,37,0.374,38,1.683,39,0.6,41,0.542,42,1.683,43,1.775,46,1.877,47,2.276,51,0.142,52,0.068,55,1.282,56,2.276,57,1.453,64,5.332,65,1.645,71,1.086,83,0.01,84,0.01,86,1.683,89,1.841,92,1.683,93,2.459,94,2.268,193,1.071,203,1.841,204,3.473,212,1.793,242,2.507,486,2.123,605,4.784,606,2.69,607,4.894,608,4.894,609,3.465,610,3.465,611,4.894,612,3.465,613,4.894,614,6.164,615,4.784,616,3.465,617,3.798,618,3.465,619,2.998,620,2.69,621,3.465,622,2.998,623,2.998,624,2.998,625,2.998,626,2.998,627,2.998,628,4.894,629,3.465,630,3.465,631,3.465,632,3.465,633,3.465,634,3.465]],["title/classes/GetPostBaseDto.html",[52,0.075,635,2.735]],["body/classes/GetPostBaseDto.html",[3,0.194,4,0.172,5,0.172,8,0.334,19,0.627,22,0.016,24,0.49,25,1.145,37,0.368,51,0.194,52,0.13,83,0.012,84,0.012,91,1.644,208,1.713,341,1.729,357,1.89,361,2.292,397,4.281,441,3.813,635,4.275,636,5.15,637,3.662,638,5.739,639,5.739,640,6.024,641,4.719,642,4.719,643,4.082,644,5.739,645,3.69,646,3.349,647,3.662,648,2.891,649,3.349,650,4.082]],["title/classes/GetPostDto.html",[52,0.075,648,2.36]],["body/classes/GetPostDto.html",[3,0.212,4,0.188,5,0.188,22,0.016,37,0.384,51,0.212,52,0.135,83,0.013,84,0.013,341,1.89,357,2.067,361,2.507,397,3.903,441,3.972,635,3.662,636,4.005,637,4.005,638,4.464,639,4.464,643,4.464,644,5.979,645,4.234,646,3.662,647,4.005,648,3.903,649,4.522,650,5.511]],["title/classes/GetUsersParamDto.html",[52,0.075,651,2.531]],["body/classes/GetUsersParamDto.html",[3,0.196,4,0.174,5,0.174,8,0.338,19,0.498,22,0.016,24,0.544,25,0.995,37,0.37,51,0.196,52,0.131,83,0.012,84,0.012,89,1.658,91,1.658,94,2.244,95,3.041,208,1.36,338,1.752,341,1.752,345,3.989,357,1.915,359,3.14,361,2.323,377,3.989,438,4.715,441,3.491,451,4.715,651,3.989,652,5.255,653,4.137,654,4.782,655,6.075,656,6.075,657,4.782,658,4.782,659,4.782]],["title/controllers/GoogleAuthenticationController.html",[97,1.475,247,2.735]],["body/controllers/GoogleAuthenticationController.html",[3,0.193,4,0.171,5,0.171,8,0.333,9,1.391,19,0.49,21,1.134,22,0.016,23,1.044,24,0.383,25,0.771,30,1.044,37,0.368,41,0.736,51,0.193,52,0.092,54,2.172,55,1.232,71,1.044,83,0.012,84,0.012,97,1.801,99,1.884,201,2.881,203,1.808,208,1.338,218,2.881,221,1.964,229,3.089,243,4.058,247,4.266,262,4.069,318,2.548,660,5.2,661,4.069,662,6.011,663,5.2,664,4.069,665,4.845,666,4.704,667,4.704,668,4.069,669,4.704,670,4.704,671,4.704]],["title/injectables/GoogleAuthenticationService.html",[39,0.472,243,2.36]],["body/injectables/GoogleAuthenticationService.html",[3,0.127,4,0.112,5,0.112,8,0.218,9,1.042,10,1.643,12,2.276,14,1.037,15,2.395,16,4.261,17,3.491,18,3.58,19,0.609,21,1.086,22,0.016,23,0.999,24,0.433,25,0.738,30,0.999,37,0.381,38,1.499,39,0.552,40,1.89,41,0.483,42,1.499,43,1.58,46,1.671,51,0.127,52,0.06,53,2.19,54,1.425,55,1.53,56,2.026,57,2.721,61,1.357,62,1.649,63,1.425,65,1.787,69,1.425,70,1.357,71,0.999,83,0.009,84,0.009,89,1.229,91,1.229,92,2.582,93,2.19,193,0.953,202,1.89,203,1.451,212,1.13,229,2.026,242,3.432,243,2.758,248,1.671,257,2.026,265,3.02,270,1.89,318,1.671,519,3.491,520,3.773,553,2.026,567,2.395,580,2.19,590,3.491,605,2.395,663,3.894,664,3.894,665,4.081,668,2.669,672,5.376,673,2.669,674,5.316,675,6.489,676,4.502,677,3.085,678,3.085,679,5.316,680,2.669,681,2.669,682,3.085,683,3.085,684,4.502,685,3.085,686,3.085,687,3.085,688,3.085,689,3.085,690,3.085,691,3.085,692,3.085,693,3.085,694,3.085,695,3.085,696,2.669,697,3.085,698,3.085,699,2.669]],["title/classes/GoogleTokenDto.html",[52,0.075,665,2.531]],["body/classes/GoogleTokenDto.html",[3,0.221,4,0.196,5,0.196,8,0.38,19,0.56,22,0.016,24,0.437,35,1.641,37,0.298,51,0.221,52,0.128,59,6.087,83,0.013,84,0.013,91,1.782,208,1.528,341,1.968,355,3.345,357,2.152,442,3.753,665,4.289,700,5.649,701,4.17,702,4.648,703,4.648]],["title/classes/GoogleUser.html",[52,0.075,326,2.531]],["body/classes/GoogleUser.html",[3,0.207,4,0.183,5,0.183,8,0.356,19,0.745,22,0.015,24,0.583,35,1.934,51,0.207,52,0.099,83,0.013,84,0.013,91,1.712,92,3.32,326,4.12,341,1.844,519,4.488,520,4.851,590,4.488,704,6.369,705,4.354,706,5.034,707,5.034,708,5.034,709,5.034]],["title/injectables/HashingProvider.html",[39,0.472,241,2.087]],["body/injectables/HashingProvider.html",[3,0.188,4,0.167,5,0.167,8,0.324,9,1.368,19,0.616,21,1.426,22,0.016,23,1.312,24,0.481,25,0.969,30,1.312,31,4.235,35,1.918,37,0.254,39,0.725,41,0.717,51,0.188,52,0.09,83,0.012,84,0.012,193,1.416,241,3.202,301,5.114,302,5.114,303,5.114,304,6.339,305,5.661,307,4.196,308,5.114,710,3.965,711,7.456,712,4.583,713,4.583]],["title/entities/MetaOption.html",[714,1.974,715,2.087]],["body/entities/MetaOption.html",[3,0.163,4,0.145,5,0.145,8,0.281,19,0.711,22,0.016,24,0.573,35,1.352,37,0.299,51,0.163,52,0.078,83,0.011,84,0.011,91,1.468,94,1.808,95,2.558,139,3.813,175,2.434,208,1.942,221,2.2,329,1.456,389,3.092,397,4.003,406,4.654,465,4.734,469,3.606,500,4.654,714,2.756,715,2.914,716,3.438,717,5.276,718,5.276,719,5.276,720,3.974,721,4.329,722,3.974,723,2.82,724,3.818,725,3.974,726,3.438,727,4.654,728,3.974,729,3.974,730,5.276,731,3.974,732,3.084,733,3.818,734,4.654,735,4.654,736,3.084]],["title/controllers/MetaOptionsController.html",[97,1.475,737,2.735]],["body/controllers/MetaOptionsController.html",[3,0.191,4,0.169,5,0.169,8,0.328,9,1.379,19,0.484,21,1.12,22,0.016,23,1.03,24,0.378,25,0.761,30,1.03,37,0.365,41,0.727,51,0.191,52,0.091,54,2.144,55,1.216,71,1.03,83,0.012,84,0.012,97,1.778,99,1.859,138,2.896,139,3.229,201,2.844,203,1.797,208,1.32,218,2.844,221,2.059,339,2.621,385,3.993,450,3.295,469,3.053,482,2.144,737,4.231,738,4.016,739,5.961,740,4.643,741,4.643,742,5.961,743,3.651,744,4.016,745,4.016,746,4.643,747,4.643,748,4.016,749,4.643]],["title/modules/MetaOptionsModule.html",[105,1.475,118,2.531]],["body/modules/MetaOptionsModule.html",[3,0.194,4,0.172,5,0.172,22,0.016,37,0.401,41,0.739,51,0.194,52,0.092,83,0.012,84,0.012,99,2.412,105,2.54,107,2.292,108,2.292,109,2.556,110,2.556,111,2.292,112,3.594,113,2.556,118,4.849,123,3.263,124,2.556,125,2.417,127,2.891,134,3.099,135,1.807,138,2.926,139,2.556,469,2.417,715,2.556,737,4.709,743,4.523,744,4.082,745,4.082,750,4.082,751,4.082,752,4.719,753,4.719,754,3.099,755,4.719]],["title/injectables/MetaOptionsService.html",[39,0.472,743,2.36]],["body/injectables/MetaOptionsService.html",[3,0.178,4,0.158,5,0.158,8,0.307,9,1.319,10,1.968,12,1.52,14,1.457,19,0.594,21,1.375,22,0.016,23,1.265,24,0.464,25,0.934,30,0.962,37,0.39,39,0.699,41,0.678,51,0.178,52,0.085,55,1.135,65,1.457,71,0.962,83,0.011,84,0.011,135,1.659,138,2.769,193,1.339,203,1.738,212,1.588,221,1.285,322,3.125,329,1.588,331,2.22,339,2.507,385,4.04,450,3.076,469,3.263,482,2.001,715,3.088,743,3.492,754,2.846,756,5.51,757,3.749,758,4.334,759,4.334,760,4.931,761,5.701,762,4.334,763,4.334,764,4.334,765,4.334]],["title/interfaces/Paginated.html",[85,2.531,766,2.531]],["body/interfaces/Paginated.html",[3,0.2,4,0.177,5,0.177,8,0.344,22,0.016,24,0.615,35,1.831,51,0.2,83,0.012,84,0.012,85,3.193,87,3.774,91,1.675,94,2.375,138,3.433,307,5.016,615,5.222,766,4.032,767,4.207,768,6.113,769,7.067,770,4.207,771,4.207,772,4.207,773,4.207,774,4.207,775,4.207,776,4.207,777,4.207,778,4.207]],["title/modules/PaginationModule.html",[105,1.475,119,2.36]],["body/modules/PaginationModule.html",[3,0.204,4,0.181,5,0.181,22,0.016,37,0.345,41,0.777,51,0.204,52,0.097,83,0.012,84,0.012,105,2.6,107,2.411,108,2.411,109,2.689,110,2.689,111,2.411,112,3.679,113,3.679,119,4.65,123,3.369,124,2.689,125,2.543,779,4.294,780,4.294,781,4.294,782,4.827,783,4.964,784,4.964]],["title/injectables/PaginationProvider.html",[39,0.472,782,2.36]],["body/injectables/PaginationProvider.html",[3,0.136,4,0.121,5,0.121,8,0.234,9,1.097,10,1.71,12,1.162,14,1.593,19,0.494,21,1.335,22,0.016,23,1.052,24,0.451,25,0.777,30,0.735,31,2.903,33,4.193,37,0.369,38,1.61,39,0.581,41,0.519,48,2.572,51,0.136,52,0.065,55,0.868,57,2.871,62,1.214,65,1.593,71,0.735,83,0.012,84,0.01,138,1.61,155,2.176,193,1.024,203,1.51,307,2.351,322,3.161,329,1.214,463,3.967,615,2.572,645,3.7,647,2.572,766,3.113,768,2.866,770,2.866,771,4.788,772,2.866,773,5.225,774,2.866,775,2.866,776,2.866,777,2.866,778,2.866,782,2.903,785,2.866,786,4.74,787,3.313,788,3.313,789,4.74,790,3.313,791,3.313,792,3.313,793,3.313,794,3.313,795,3.313,796,3.313,797,2.866,798,7.001,799,6.041,800,2.572,801,4.74,802,3.313,803,3.313,804,3.313,805,3.313,806,3.313,807,3.313,808,3.313,809,3.313,810,3.313,811,4.74,812,3.313,813,3.313,814,3.313,815,3.313,816,3.313]],["title/classes/PaginationQueryDto.html",[52,0.075,645,2.36]],["body/classes/PaginationQueryDto.html",[3,0.185,4,0.164,5,0.164,8,0.319,19,0.61,22,0.016,24,0.58,25,1.126,37,0.325,51,0.185,52,0.127,83,0.012,84,0.012,91,1.597,94,2.453,208,1.664,341,1.653,357,1.807,359,2.962,441,3.733,463,3.843,564,3.902,645,3.584,646,4.609,817,3.902,818,4.609,819,4.265,820,4.542,821,4.542,822,5.062,823,5.852,824,4.511,825,4.511,826,6.495,827,3.902,828,4.511,829,4.511,830,4.511,831,4.511,832,4.511,833,4.511]],["title/classes/PatchPostDto.html",[52,0.075,834,2.531]],["body/classes/PatchPostDto.html",[3,0.199,4,0.177,5,0.177,8,0.343,19,0.505,22,0.016,24,0.395,37,0.373,51,0.199,52,0.12,83,0.012,84,0.012,91,1.672,94,2.059,95,3.053,208,1.378,221,2.092,338,1.776,339,2.131,341,1.776,355,3.138,357,1.941,360,4.348,361,2.354,363,2.785,438,4.755,483,3.44,649,4.348,834,4.023,835,5.3,836,4.192,837,6.127,838,4.847,839,6.127,840,4.847,841,4.847,842,4.192,843,4.192]],["title/classes/PatchUserDto.html",[52,0.075,844,2.735]],["body/classes/PatchUserDto.html",[3,0.228,4,0.203,5,0.203,22,0.016,37,0.37,51,0.228,52,0.109,83,0.013,84,0.013,339,2.445,341,2.037,344,3.946,346,2.848,358,3.406,649,4.732,842,4.81,844,4.732,845,4.81,846,6.667,847,4.81,848,4.81]],["title/entities/Post.html",[221,1.142,714,1.974]],["body/entities/Post.html",[3,0.098,4,0.087,5,0.087,8,0.169,19,0.718,22,0.016,24,0.603,25,1.13,35,1.675,36,1.803,37,0.341,51,0.098,52,0.047,72,3.469,83,0.007,84,0.007,89,1.606,91,1.013,94,1.247,95,1.909,138,1.803,139,1.293,175,1.462,208,1.961,221,1.349,329,0.875,366,3.937,367,3.23,368,3.946,369,4.929,370,3.937,371,3.23,372,2.989,373,2.989,374,2.788,375,3.937,385,1.372,389,3.65,397,2.273,425,4.315,447,2.065,448,2.065,449,1.694,450,1.694,455,5.493,469,1.223,490,2.989,497,3.188,503,2.633,619,2.065,714,1.901,715,2.78,721,3.23,723,4.507,724,5.017,726,2.065,733,4.629,734,3.21,735,3.21,736,2.88,754,1.568,820,3.984,849,2.065,850,2.387,851,3.711,852,5.885,853,2.387,854,4.44,855,2.387,856,4.568,857,4.568,858,3.21,859,2.387,860,2.387,861,3.711,862,2.387,863,2.387,864,3.711,865,2.387,866,2.387,867,3.21,868,2.387,869,2.387,870,2.065,871,3.711,872,2.387,873,2.387,874,3.711,875,2.387,876,3.711,877,3.21,878,3.711,879,2.387,880,2.387,881,2.387]],["title/controllers/PostController.html",[97,1.475,882,2.735]],["body/controllers/PostController.html",[3,0.118,4,0.105,5,0.105,8,0.203,9,0.987,19,0.588,21,1.361,22,0.016,23,1.252,24,0.459,25,0.925,30,1.252,35,1.281,37,0.373,41,0.449,51,0.118,52,0.056,54,1.325,55,0.751,62,1.563,71,1.252,83,0.009,84,0.009,86,2.741,88,1.884,89,1.54,94,1.713,95,1.79,97,1.099,99,1.149,131,2.928,201,1.758,203,1.961,208,1.605,218,2.614,221,2.073,338,2.067,361,1.394,363,3.763,373,2.803,382,4.379,475,3.312,482,1.325,483,2.036,486,1.758,617,3.955,648,3.456,834,4.151,843,3.692,882,3.029,883,2.482,884,4.268,885,4.268,886,4.268,887,2.869,888,4.268,889,4.268,890,4.268,891,5.643,892,5.643,893,4.268,894,2.869,895,2.869,896,2.869,897,3.616,898,2.869,899,2.869,900,4.408,901,4.268,902,2.869,903,2.869,904,3.692,905,4.268,906,4.881,907,2.869,908,2.869,909,2.482,910,3.312,911,3.692,912,3.312,913,2.869,914,2.482,915,4.408,916,4.408,917,2.482,918,2.227,919,2.482,920,2.036,921,2.482,922,2.227,923,2.227,924,2.869,925,2.869,926,2.869,927,2.869,928,2.869,929,3.692,930,3.692,931,2.869,932,2.869,933,2.869,934,2.869,935,2.869,936,2.869]],["title/modules/PostModule.html",[105,1.475,120,2.531]],["body/modules/PostModule.html",[3,0.162,4,0.144,5,0.144,22,0.016,37,0.416,41,0.617,51,0.162,52,0.077,83,0.011,84,0.011,99,2.143,105,2.325,107,1.915,108,1.915,109,2.135,110,2.135,111,1.915,112,3.29,113,2.135,119,4.302,120,5.064,121,4.302,122,4.036,123,2.898,124,2.135,125,2.019,127,3.277,131,4.036,134,2.588,135,1.509,139,2.135,160,4.036,162,3.059,221,1.168,250,3.409,469,2.019,484,3.059,715,2.898,754,2.588,882,4.31,914,3.409,937,3.409,938,3.941,939,3.409,940,3.941,941,3.941,942,3.941,943,3.941,944,3.941,945,3.941]],["title/injectables/PostService.html",[39,0.472,131,2.215]],["body/injectables/PostService.html",[3,0.084,4,0.074,5,0.074,8,0.144,9,0.758,10,2.047,12,1.93,14,1.102,19,0.537,21,1.242,22,0.016,23,1.143,24,0.419,25,0.844,30,1.044,31,2.008,33,2.516,35,1.032,36,1.592,37,0.379,39,0.402,41,0.319,51,0.084,52,0.04,55,1.441,57,0.856,61,2.266,62,1.887,63,2.54,65,2.186,69,1.897,71,1.044,72,2.503,83,0.007,84,0.007,86,2.285,88,1.34,89,1.501,94,1.381,95,2.425,131,1.884,135,0.781,139,1.105,141,2.962,160,3.323,162,1.584,193,0.631,203,1.808,212,1.505,221,1.839,264,1.584,265,2.419,270,1.25,322,2.379,329,0.748,331,1.045,339,0.897,363,2.961,368,1.448,374,3.156,432,1.584,463,1.34,469,1.045,475,2.544,478,3.554,479,2.836,481,1.448,482,0.942,483,1.448,484,1.584,485,1.765,486,1.25,487,1.765,490,1.34,494,1.765,497,1.105,501,1.765,502,1.584,551,1.25,557,3.189,558,3.189,560,2.916,561,3.189,563,1.584,566,1.584,571,2.544,604,1.584,617,3.189,648,2.881,715,1.105,754,1.34,760,1.765,766,1.34,782,3.541,797,1.765,800,1.584,818,1.448,819,1.34,834,3.383,897,2.327,900,1.765,918,1.584,919,1.765,920,1.448,921,1.765,946,1.765,947,2.836,948,3.278,949,2.041,950,2.041,951,2.544,952,2.041,953,3.278,954,2.041,955,3.278,956,2.041,957,2.041,958,2.041,959,2.041,960,2.041,961,3.189,962,2.041,963,3.278,964,3.278,965,4.108,966,2.041,967,2.041,968,2.041,969,3.278,970,2.041,971,2.041,972,2.041,973,2.041,974,2.041,975,1.765,976,2.041,977,2.041,978,2.041,979,2.041,980,2.041,981,2.041,982,3.278,983,2.041,984,3.278,985,2.041,986,3.278,987,2.041,988,3.278,989,2.041,990,3.278,991,2.041,992,3.278,993,2.041,994,3.278,995,2.041,996,1.765]],["title/classes/RefreshTokenDto.html",[52,0.075,207,2.36]],["body/classes/RefreshTokenDto.html",[3,0.221,4,0.196,5,0.196,8,0.38,19,0.56,22,0.016,24,0.437,35,1.641,37,0.298,51,0.221,52,0.128,83,0.013,84,0.013,91,1.782,204,4.994,207,4,208,1.528,341,1.968,355,3.345,357,2.152,442,3.753,701,4.17,702,4.648,703,4.648,997,5.649]],["title/injectables/RefreshTokensProvider.html",[39,0.472,244,2.36]],["body/injectables/RefreshTokensProvider.html",[3,0.147,4,0.131,5,0.131,8,0.254,9,1.16,10,1.786,12,2.195,14,1.685,15,2.784,16,4.48,17,3.795,18,3.833,19,0.522,21,1.209,22,0.016,23,1.113,24,0.408,25,0.822,30,0.796,37,0.396,38,1.742,39,0.615,40,2.197,41,0.561,42,1.742,43,1.837,46,1.943,47,2.355,51,0.147,52,0.07,55,1.639,56,2.355,57,2.102,61,1.577,62,1.314,63,1.656,65,1.943,69,1.656,70,1.577,71,0.796,83,0.01,84,0.01,86,1.742,89,1.368,93,2.545,193,1.108,203,1.577,207,4.034,212,1.314,228,2.784,229,2.355,242,3.206,244,3.071,248,1.943,257,2.355,265,3.142,270,2.197,486,2.197,553,2.355,606,2.784,620,2.784,622,3.103,623,3.103,624,3.103,625,3.103,626,3.103,627,3.103,699,3.103,998,5,999,5.013,1000,5.78,1001,3.587,1002,5.013,1003,3.587,1004,3.103,1005,3.587,1006,3.587,1007,3.587]],["title/classes/SignInDto.html",[52,0.075,214,2.36]],["body/classes/SignInDto.html",[3,0.21,4,0.187,5,0.187,8,0.362,19,0.661,22,0.016,24,0.516,35,1.809,37,0.284,51,0.21,52,0.124,83,0.013,84,0.013,91,1.731,92,3.347,184,4.22,208,1.804,214,3.885,341,1.877,355,3.529,357,2.052,442,3.645,542,5.487,1008,4.432,1009,5.124,1010,5.124,1011,5.124,1012,5.124]],["title/injectables/SignInProvider.html",[39,0.472,245,2.36]],["body/injectables/SignInProvider.html",[3,0.141,4,0.125,5,0.125,8,0.243,9,1.125,10,1.744,12,2.272,14,1.634,16,4.542,17,3.706,18,3.759,19,0.506,21,1.172,22,0.016,23,1.079,24,0.396,25,0.797,30,0.762,37,0.399,38,1.667,39,0.596,40,2.102,41,0.537,42,1.667,43,1.758,46,1.859,47,2.254,51,0.141,52,0.067,55,1.696,56,2.254,61,2.137,62,1.781,63,1.585,65,1.897,69,1.585,70,1.509,71,0.762,83,0.01,84,0.01,86,1.667,89,1.326,184,2.977,193,1.061,203,1.54,205,3.772,212,1.257,213,3.772,214,3.968,224,2.664,241,3.746,242,3.543,245,2.977,248,1.859,257,2.254,264,2.664,265,3.041,270,2.102,310,2.969,338,1.257,389,1.973,486,2.102,551,2.102,553,2.254,601,2.969,620,2.664,696,2.969,1004,2.969,1013,4.882,1014,2.969,1015,3.432,1016,3.432,1017,3.432,1018,5.644,1019,3.432,1020,3.432,1021,3.432,1022,3.432,1023,3.432]],["title/entities/Tag.html",[497,2.087,714,1.974]],["body/entities/Tag.html",[3,0.126,4,0.111,5,0.111,8,0.216,19,0.74,22,0.016,23,1.174,24,0.608,25,0.954,35,1.785,37,0.248,51,0.126,52,0.06,72,3.45,83,0.009,84,0.009,91,1.221,94,1.504,95,2.218,175,1.874,208,2.02,221,1.917,329,1.121,338,1.938,367,3.754,371,3.754,372,3.474,389,3.345,397,3.962,497,2.423,503,4.131,714,2.292,717,4.576,718,4.576,719,4.576,721,3.754,723,4.395,724,5.041,727,3.87,730,4.576,732,2.374,733,4.591,736,3.472,854,5.035,856,5.021,857,5.021,858,3.87,867,5.035,870,2.646,877,3.87,961,4.105,996,3.87,1024,2.646,1025,5.29,1026,3.059,1027,5.29,1028,3.059,1029,3.059,1030,3.059,1031,3.059,1032,3.059,1033,3.059,1034,3.059,1035,3.059,1036,3.059]],["title/controllers/TagsController.html",[97,1.475,1037,2.735]],["body/controllers/TagsController.html",[3,0.161,4,0.143,5,0.143,8,0.278,9,1.235,19,0.632,21,1.462,22,0.016,23,1.346,24,0.494,25,0.994,30,1.346,37,0.337,41,0.615,51,0.161,52,0.077,54,1.815,55,1.029,71,1.346,83,0.011,84,0.011,94,2.359,95,2.729,97,1.505,99,1.574,141,3.107,201,2.408,203,2.021,208,1.725,218,2.408,221,1.798,339,2.348,374,2.408,482,1.815,506,4.608,748,3.4,897,5.095,910,4.707,912,3.051,951,3.051,1037,3.79,1038,3.4,1039,5.34,1040,3.931,1041,3.931,1042,3.931,1043,3.931,1044,3.931,1045,3.931,1046,3.4,1047,3.4,1048,3.931,1049,3.931,1050,3.931,1051,3.931,1052,3.931,1053,3.931,1054,3.931]],["title/modules/TagsModule.html",[105,1.475,121,2.36]],["body/modules/TagsModule.html",[3,0.19,4,0.169,5,0.169,22,0.016,37,0.398,41,0.724,51,0.19,52,0.091,83,0.012,84,0.012,99,2.382,105,2.517,107,2.248,108,2.248,109,2.507,110,2.507,111,2.248,112,3.561,113,3.561,121,4.577,123,3.222,124,2.507,125,2.37,127,2.835,134,3.039,135,1.772,141,3.998,497,2.507,1037,4.666,1047,4.003,1055,4.003,1056,4.003,1057,4.003,1058,4.628,1059,4.628,1060,4.003,1061,4.628]],["title/injectables/TagsService.html",[39,0.472,141,1.974]],["body/injectables/TagsService.html",[3,0.138,4,0.122,5,0.122,8,0.238,9,1.108,10,2.29,12,1.179,14,1.129,19,0.669,21,1.55,22,0.016,23,1.426,24,0.523,25,1.053,30,1.349,37,0.357,39,0.587,41,0.526,51,0.138,52,0.066,55,0.88,65,2.043,71,1.349,72,2.326,83,0.01,84,0.01,94,2.403,95,2.695,135,1.286,141,2.452,193,1.038,203,2.023,212,2.227,322,2.807,329,1.231,331,1.721,374,2.058,482,1.551,497,2.593,506,4.22,897,3.398,951,3.716,975,4.141,1046,2.906,1060,2.906,1062,2.906,1063,4.788,1064,4.788,1065,4.788,1066,3.36,1067,3.36,1068,4.788,1069,4.788,1070,3.36,1071,3.36,1072,4.788,1073,3.36,1074,4.788,1075,3.36,1076,3.36,1077,3.36,1078,3.36,1079,4.141,1080,3.36,1081,3.36,1082,3.36,1083,3.36]],["title/entities/User.html",[89,1.052,714,1.974]],["body/entities/User.html",[3,0.138,4,0.122,5,0.122,8,0.238,19,0.716,22,0.016,24,0.603,25,0.996,35,1.823,37,0.266,51,0.138,52,0.066,72,3.414,83,0.01,84,0.01,89,1.306,91,1.306,92,2.71,94,1.609,95,2.339,175,2.058,184,3.416,208,1.955,221,1.98,329,1.231,389,3.494,503,3.398,519,3.663,520,3.958,590,3.663,714,2.452,721,3.958,723,4.56,724,5.148,732,2.608,733,4.741,856,5.629,857,5.629,961,4.329,1084,2.906,1085,7.253,1086,3.36,1087,3.36,1088,3.36,1089,3.36,1090,3.36,1091,3.36,1092,3.36,1093,4.788,1094,3.36,1095,4.788]],["title/injectables/UserCreateManyProvider.html",[39,0.472,1096,2.36]],["body/injectables/UserCreateManyProvider.html",[3,0.145,4,0.129,5,0.129,8,0.251,9,1.15,10,1.774,14,1.191,19,0.518,21,1.198,22,0.016,23,1.103,24,0.405,25,0.814,30,0.786,37,0.364,39,0.609,41,0.555,51,0.145,52,0.069,54,1.636,55,0.928,57,1.486,61,2.524,62,2.103,63,2.651,65,2.284,69,2.651,70,2.524,71,0.786,83,0.01,84,0.01,89,1.699,96,2.326,193,1.095,203,1.567,212,1.298,328,2.749,329,1.298,330,2.036,338,1.821,339,2.524,340,4.015,343,2.326,346,1.815,358,3.044,482,2.295,551,2.17,567,2.749,1079,3.064,1096,3.044,1097,4.966,1098,3.064,1099,4.299,1100,3.542,1101,5.879,1102,3.542,1103,4.299,1104,3.542,1105,4.97,1106,3.542,1107,3.542,1108,3.542,1109,3.542,1110,4.97,1111,3.064,1112,3.542,1113,3.542,1114,3.542,1115,3.542,1116,3.542,1117,3.542,1118,3.542,1119,3.542,1120,3.542,1121,4.97,1122,3.542,1123,3.542,1124,3.542,1125,3.542]],["title/injectables/UserService.html",[39,0.472,265,1.695]],["body/injectables/UserService.html",[3,0.076,4,0.067,5,0.067,8,0.13,9,0.697,10,2.151,12,2.098,14,1.013,18,2.71,19,0.602,21,1.393,22,0.016,23,1.282,24,0.47,25,0.947,30,1.229,33,1.127,35,1.318,36,0.894,37,0.379,38,0.894,39,0.369,41,0.288,42,0.894,51,0.076,52,0.075,55,1.513,57,1.264,61,1.683,62,1.402,63,1.391,65,1.641,69,0.849,70,1.325,71,1.229,83,0.006,84,0.006,89,1.72,92,1.859,94,2.011,95,2.423,96,2.513,135,0.704,144,4.789,193,0.568,203,1.945,212,1.921,220,1.591,222,3.182,248,0.996,265,1.325,316,3.391,318,1.632,320,2.606,322,2.043,324,2.716,325,2.606,326,3.206,329,0.674,330,1.057,331,0.942,332,1.591,333,1.591,334,1.208,338,1.402,339,1.683,340,2.99,343,1.208,345,3.206,346,2.501,358,1.846,373,1.208,481,1.305,482,1.391,519,1.979,535,1.846,546,2.71,547,2.606,549,2.606,551,1.127,553,1.208,557,1.428,558,1.428,559,1.591,560,1.305,561,1.428,562,1.591,563,1.428,571,1.428,580,1.305,583,2.71,586,2.606,588,2.606,590,1.208,591,2.606,592,3.391,594,2.606,598,2.606,604,2.339,651,2.906,818,2.716,819,2.513,920,1.305,947,2.606,1096,2.71,1099,2.606,1101,1.591,1103,2.606,1111,2.606,1126,1.591,1127,2.606,1128,3.013,1129,3.013,1130,3.013,1131,3.013,1132,1.839,1133,3.827,1134,3.827,1135,3.827,1136,3.827,1137,1.839,1138,1.839,1139,1.839,1140,1.839,1141,3.013,1142,1.839,1143,3.013,1144,1.839,1145,1.839,1146,1.839,1147,3.013,1148,1.839,1149,4.425,1150,3.013,1151,2.606,1152,3.013,1153,1.591,1154,1.839,1155,1.591,1156,1.591,1157,1.591,1158,2.606,1159,1.591,1160,1.591,1161,1.839,1162,1.839,1163,1.839,1164,1.839,1165,1.839,1166,1.839,1167,1.839,1168,1.839,1169,1.839,1170,1.839,1171,1.839,1172,1.839,1173,1.839,1174,3.013,1175,2.606,1176,3.013,1177,1.839,1178,1.839,1179,1.839,1180,1.839,1181,1.839,1182,1.839,1183,1.839,1184,1.839,1185,1.839,1186,1.839,1187,1.839,1188,1.839]],["title/controllers/UsersController.html",[97,1.475,1189,2.735]],["body/controllers/UsersController.html",[1,1.427,3,0.102,4,0.09,5,0.09,6,1.762,8,0.176,9,0.885,19,0.546,21,1.264,22,0.016,23,1.327,24,0.537,25,0.859,30,1.163,36,1.206,37,0.374,41,0.389,51,0.102,52,0.049,54,1.146,55,0.65,62,1.401,71,1.327,78,2.147,83,0.008,84,0.008,94,2.419,95,1.041,97,0.95,99,0.994,157,1.762,201,1.52,202,1.52,203,1.899,208,1.49,218,1.52,221,1.133,226,1.63,232,2.147,265,2.051,338,2.19,340,3.662,343,2.511,345,3.926,346,3.063,349,4.068,358,2.857,361,1.206,373,1.63,377,3.442,389,3.012,463,2.511,482,1.766,651,3.926,818,4.244,819,4.224,822,2.147,844,4.565,906,3.308,909,3.308,910,4.068,911,4.035,912,4.068,915,3.308,916,3.308,917,2.147,918,1.926,920,1.762,929,2.147,930,3.308,1153,2.147,1175,3.308,1189,2.714,1190,2.147,1191,3.824,1192,3.824,1193,3.824,1194,3.824,1195,2.482,1196,3.824,1197,2.482,1198,2.482,1199,2.482,1200,2.482,1201,2.482,1202,2.482,1203,2.482,1204,3.824,1205,3.824,1206,3.824,1207,2.482,1208,3.824,1209,3.308,1210,2.482,1211,3.824,1212,3.824,1213,3.824,1214,2.482,1215,3.824,1216,3.824,1217,2.482,1218,2.482,1219,2.482,1220,2.482,1221,2.482,1222,2.482,1223,2.482,1224,2.482,1225,2.482,1226,2.147,1227,4.665,1228,2.482,1229,2.147,1230,2.482,1231,2.482,1232,3.824,1233,2.482,1234,2.147,1235,2.482,1236,2.482,1237,2.482,1238,2.482,1239,2.482,1240,2.482,1241,2.482,1242,2.147,1243,2.482,1244,2.482,1245,2.482,1246,2.482,1247,2.482,1248,2.482,1249,2.482]],["title/modules/UsersModule.html",[105,1.475,122,2.215]],["body/modules/UsersModule.html",[1,1.926,3,0.138,4,0.122,5,0.122,6,2.379,22,0.016,37,0.425,41,0.525,42,1.628,43,1.717,46,1.816,51,0.138,52,0.066,83,0.01,84,0.01,89,1.304,99,1.914,105,2.133,107,1.628,108,1.628,109,1.816,110,1.816,111,1.628,112,3.017,113,3.017,117,2.928,122,4.4,123,2.589,124,1.816,125,1.717,127,2.053,134,2.201,135,1.283,143,2.602,152,2.602,154,2.9,155,2.201,157,2.379,189,2.602,190,2.602,248,2.589,265,3.258,316,4.088,318,2.589,330,1.926,339,1.474,535,2.928,546,4.088,583,4.088,592,4.088,681,2.9,1096,4.088,1155,2.9,1156,2.9,1157,2.9,1158,4.134,1159,2.9,1160,2.9,1189,3.953,1226,2.9,1250,2.9,1251,2.9,1252,2.9,1253,3.352,1254,3.352,1255,3.352,1256,3.352,1257,4.78,1258,4.78,1259,3.352,1260,3.352]],["title/coverage.html",[1261,4.089]],["body/coverage.html",[0,2.8,1,1.324,5,0.084,6,1.634,7,1.992,22,0.016,24,0.187,39,0.897,49,1.787,52,0.139,62,0.844,83,0.007,84,0.007,85,2.369,86,1.119,88,1.512,89,1.214,90,1.992,97,2.321,98,1.634,100,1.992,101,1.411,111,1.119,126,1.787,131,1.324,138,1.119,139,1.954,141,1.18,158,1.634,160,1.324,163,1.787,194,1.992,199,1.634,200,1.992,202,1.411,207,1.411,214,1.411,221,1.318,222,1.324,241,1.247,242,1.18,243,1.411,244,1.411,245,1.411,247,1.634,252,1.634,263,1.992,265,1.013,274,1.992,283,1.787,300,1.992,316,1.411,317,3.157,318,1.954,319,3.157,326,1.512,339,1.013,340,1.411,342,2.8,343,1.512,344,3.157,345,1.512,346,1.18,363,1.324,364,1.992,365,1.992,385,1.324,449,1.634,469,2.579,470,1.992,473,1.992,474,1.992,497,1.247,506,1.512,507,1.992,508,1.992,535,2.21,546,1.411,573,3.121,574,1.787,579,6.875,583,1.411,584,2.8,585,1.992,592,1.411,593,1.992,605,1.787,606,2.8,635,1.634,636,2.8,637,2.8,645,1.411,646,1.634,648,1.411,651,1.512,652,1.992,653,1.992,660,1.992,661,1.992,665,1.512,672,1.992,673,1.992,700,1.992,701,2.8,704,1.992,705,1.992,710,1.992,714,2.579,715,1.247,716,1.992,737,1.634,738,1.992,743,1.411,756,1.992,757,1.992,766,1.512,767,1.992,782,1.411,785,1.992,817,1.992,834,1.512,835,1.992,836,1.992,844,1.634,845,1.992,849,1.992,882,1.634,883,1.992,922,1.787,923,1.787,946,1.992,997,1.992,998,1.992,1008,1.992,1013,1.992,1014,1.992,1024,1.992,1037,1.634,1038,1.992,1062,1.992,1084,1.992,1096,1.411,1097,1.992,1098,1.992,1126,1.992,1127,1.992,1189,1.634,1190,1.992,1261,1.787,1262,1.992,1263,2.303,1264,2.303,1265,7.015,1266,5.466,1267,6.451,1268,7.215,1269,3.121,1270,1.992,1271,1.992,1272,5.466,1273,5.798,1274,1.992,1275,2.303,1276,4.448,1277,2.303,1278,2.303,1279,2.303]],["title/dependencies.html",[108,2.253,1280,2.78]],["body/dependencies.html",[22,0.016,41,0.769,42,2.387,43,2.517,45,3.813,48,3.813,52,0.121,83,0.012,84,0.012,108,2.387,135,1.881,155,3.226,202,3.009,311,4.25,318,2.661,329,1.8,357,1.968,359,3.226,361,2.387,680,4.25,847,4.25,848,4.25,1281,4.913,1282,4.913,1283,6.76,1284,4.913,1285,4.913,1286,4.913,1287,4.913,1288,4.913,1289,4.913,1290,4.913,1291,4.913,1292,4.913,1293,4.913,1294,4.913,1295,4.913,1296,4.913,1297,4.913,1298,4.913,1299,4.913,1300,4.913,1301,4.913,1302,4.913]],["title/miscellaneous/enumerations.html",[1303,1.968,1304,4.011]],["body/miscellaneous/enumerations.html",[8,0.361,22,0.016,79,4.416,83,0.013,84,0.013,221,1.876,226,4.156,369,4.912,399,5.475,425,4.912,427,5.475,819,4.156,821,5.989,1229,4.416,1242,4.416,1303,3.127,1304,4.416,1305,5.105,1306,6.329,1307,5.105,1308,5.105,1309,5.105,1310,6.329,1311,6.329,1312,5.105,1313,6.329,1314,6.329]],["title/miscellaneous/functions.html",[1303,1.968,1315,4.011]],["body/miscellaneous/functions.html",[8,0.409,22,0.015,30,1.284,83,0.014,84,0.014,111,3.528,317,4.105,319,4.844,574,5.636,580,4.105,1274,5.004,1303,3.543,1315,5.004,1316,5.784,1317,5.784]],["title/index.html",[8,0.227,1318,3.214,1319,3.214]],["body/index.html",[4,0.111,22,0.015,77,2.641,83,0.009,84,0.009,125,3.311,198,5.923,322,1.41,338,1.118,377,3.818,393,2.641,490,2.005,502,2.369,560,3.17,566,5.017,800,2.369,827,2.641,904,2.641,1151,2.641,1209,2.641,1234,5.592,1261,2.369,1262,3.864,1320,3.053,1321,3.053,1322,5.283,1323,4.467,1324,3.053,1325,3.053,1326,3.053,1327,3.053,1328,4.467,1329,5.283,1330,3.053,1331,3.053,1332,5.814,1333,3.053,1334,6.847,1335,3.053,1336,6.678,1337,3.053,1338,3.053,1339,3.053,1340,4.467,1341,3.053,1342,4.467,1343,3.053,1344,5.283,1345,3.053,1346,4.467,1347,3.053,1348,3.053,1349,3.053,1350,3.053,1351,3.053,1352,5.814,1353,3.053,1354,4.467,1355,3.053,1356,3.053,1357,4.467,1358,5.814,1359,3.053,1360,4.467,1361,3.053,1362,4.467,1363,6.464,1364,5.814,1365,3.053,1366,4.467,1367,3.053,1368,3.053,1369,3.053,1370,3.053,1371,5.814,1372,3.053,1373,3.053,1374,3.053,1375,3.053,1376,4.467,1377,3.053,1378,3.053,1379,3.053,1380,3.053,1381,3.053,1382,4.467,1383,3.053,1384,3.053,1385,3.053,1386,4.467,1387,3.053,1388,3.053,1389,5.03,1390,3.053,1391,3.053,1392,3.053,1393,3.053,1394,3.053,1395,3.053,1396,3.053,1397,3.053,1398,4.467,1399,3.053,1400,3.053,1401,3.053,1402,3.053,1403,5.283,1404,3.053,1405,3.053,1406,3.053,1407,4.467,1408,3.053,1409,3.053,1410,3.053,1411,3.053,1412,4.467,1413,3.053,1414,3.053,1415,3.053,1416,4.467,1417,4.467,1418,3.053,1419,3.053,1420,3.053,1421,3.053,1422,3.053,1423,3.053,1424,3.053,1425,3.053,1426,3.053,1427,3.053,1428,3.053,1429,3.053,1430,3.053,1431,3.053,1432,3.053,1433,3.053,1434,3.053,1435,2.641]],["title/modules.html",[107,2.559]],["body/modules.html",[22,0.013,83,0.013,84,0.013,106,3.827,107,2.62,117,3.303,118,3.541,119,3.303,120,3.541,121,3.303,122,3.099,1389,6.682,1436,7.725,1437,7.725,1438,7.725]],["title/overview.html",[1439,4.557]],["body/overview.html",[2,2.415,22,0.016,83,0.009,84,0.009,87,2.415,99,1.246,101,3.272,105,1.192,106,5.405,107,1.512,108,1.512,109,1.686,110,1.686,111,1.512,112,1.686,113,1.686,114,2.692,115,2.692,116,2.692,117,4.587,118,4.095,119,4.115,120,4.843,121,4.216,122,4.355,123,2.454,124,1.686,125,1.594,131,3.07,141,3.441,160,3.07,175,1.906,193,0.962,222,3.861,238,2.692,239,2.692,240,2.692,241,3.178,242,2.736,243,3.272,244,3.272,245,3.272,265,2.954,316,3.272,341,1.14,464,3.919,546,3.272,583,3.272,592,3.272,743,3.272,750,2.692,751,2.692,779,2.692,780,2.692,781,2.692,782,4.115,937,2.692,939,2.692,1055,2.692,1056,2.692,1057,2.692,1096,3.272,1250,2.692,1251,2.692,1252,2.692,1439,2.692,1440,4.531,1441,3.112,1442,3.112,1443,3.112]],["title/properties.html",[91,1.265,1280,2.78]],["body/properties.html",[22,0.016,83,0.014,84,0.014,91,1.624,338,2.181,490,3.909,1435,5.149,1444,5.952,1445,5.952,1446,5.952]],["title/miscellaneous/variables.html",[1303,1.968,1447,4.011]],["body/miscellaneous/variables.html",[8,0.327,22,0.016,24,0.484,27,3.592,33,2.835,35,1.495,36,2.248,49,4.617,57,2.495,68,4.003,71,1.027,83,0.012,84,0.012,86,2.89,89,1.794,126,3.592,163,4.617,164,4.003,202,3.644,226,3.906,283,4.617,288,5.146,820,5.571,821,5.571,922,4.617,923,3.592,1269,4.003,1270,5.146,1271,4.003,1303,2.835,1447,4.003,1448,4.628,1449,4.628,1450,5.949,1451,4.628,1452,4.628,1453,5.949,1454,4.628,1455,4.628,1456,4.628,1457,4.628,1458,4.628]]],"invertedIndex":[["",{"_index":22,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":579,"title":{},"body":{"injectables/CreateUserProvider.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1445,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1292,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1300,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":1302,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1291,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1265,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1275,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1267,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1268,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1272,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1273,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1276,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":401,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":463,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"injectables/PostService.html":{},"controllers/UsersController.html":{}}}],["1.1.23",{"_index":1282,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":822,"title":{},"body":{"classes/PaginationQueryDto.html":{},"controllers/UsersController.html":{}}}],["10.0.0",{"_index":1283,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":1289,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":1285,"title":{},"body":{"dependencies.html":{}}}],["1024",{"_index":858,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["10})@apiquery({name",{"_index":1214,"title":{},"body":{"controllers/UsersController.html":{}}}],["1234",{"_index":659,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["1234})@isoptional()@isint()@type(undefined",{"_index":657,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["14",{"_index":1180,"title":{},"body":{"injectables/UserService.html":{}}}],["15",{"_index":1443,"title":{},"body":{"overview.html":{}}}],["16t07:46:32+0000",{"_index":402,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["17.12.2",{"_index":1295,"title":{},"body":{"dependencies.html":{}}}],["19",{"_index":1442,"title":{},"body":{"overview.html":{}}}],["2",{"_index":464,"title":{},"body":{"classes/CreatePostDto.html":{},"overview.html":{}}}],["2.0.5",{"_index":1286,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":906,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":891,"title":{},"body":{"controllers/PostController.html":{}}}],["2024",{"_index":400,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["256",{"_index":867,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["3.2.2",{"_index":1284,"title":{},"body":{"dependencies.html":{}}}],["3/9",{"_index":1278,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":1277,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":1441,"title":{},"body":{"overview.html":{}}}],["5.1.1",{"_index":1290,"title":{},"body":{"dependencies.html":{}}}],["512",{"_index":874,"title":{},"body":{"entities/Post.html":{}}}],["7",{"_index":1440,"title":{},"body":{"overview.html":{}}}],["7.3.0",{"_index":1288,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1301,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":531,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["8.11.5",{"_index":1297,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":416,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["9.11.0",{"_index":1293,"title":{},"body":{"dependencies.html":{}}}],["96",{"_index":1085,"title":{},"body":{"entities/User.html":{}}}],["_",{"_index":73,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["abstract",{"_index":711,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["access",{"_index":282,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["accesstoken",{"_index":628,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["accesstokenguard",{"_index":1,"title":{"guards/AccessTokenGuard.html":{}},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["activeuser",{"_index":922,"title":{},"body":{"controllers/PostController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["activeuserdata",{"_index":86,"title":{"interfaces/ActiveUserData.html":{}},"body":{"interfaces/ActiveUserData.html":{},"injectables/CreatePostProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["alice",{"_index":1172,"title":{},"body":{"injectables/UserService.html":{}}}],["alice@doe.com",{"_index":1173,"title":{},"body":{"injectables/UserService.html":{}}}],["allowing",{"_index":1377,"title":{},"body":{"index.html":{}}}],["already",{"_index":564,"title":{},"body":{"injectables/CreateUserProvider.html":{},"classes/PaginationQueryDto.html":{}}}],["amazing",{"_index":1422,"title":{},"body":{"index.html":{}}}],["anymore",{"_index":828,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["api",{"_index":1175,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["apioperation",{"_index":915,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":888,"title":{},"body":{"controllers/PostController.html":{}}}],["apiproperty",{"_index":360,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty()@isstring()@minlength(3)@isnotempty()@maxlength(256",{"_index":513,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apiproperty({description",{"_index":838,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["apiproperty({example",{"_index":434,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({type",{"_index":347,"title":{},"body":{"classes/CreateManyUsersDTO.html":{}}}],["apipropertyoptional",{"_index":451,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional()@isoptional()@isjson",{"_index":515,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional()@isoptional()@isstring",{"_index":509,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional()@isoptional()@isurl()@maxlength(1024",{"_index":511,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional({description",{"_index":654,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["apiquery",{"_index":1227,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":916,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":917,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["apitags('posts",{"_index":926,"title":{},"body":{"controllers/PostController.html":{}}}],["apitags('users",{"_index":1231,"title":{},"body":{"controllers/UsersController.html":{}}}],["app.controller",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":102,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":154,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["appconfig",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":98,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":1234,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["application'})@apiresponse({status",{"_index":1207,"title":{},"body":{"controllers/UsersController.html":{}}}],["applications",{"_index":1328,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":106,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":101,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":348,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{}}}],["async",{"_index":10,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["audience",{"_index":622,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["auth",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/UsersController.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["auth(authtype.none",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["auth.controller",{"_index":249,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/config/jwt.config",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guards/access",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guards/authentication.guard",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["auth_type_key",{"_index":283,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authcontroller",{"_index":199,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":663,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["authenticate(@body",{"_index":670,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authenticate(googletokendto",{"_index":664,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["authentication",{"_index":662,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authentication.controller",{"_index":260,"title":{},"body":{"modules/AuthModule.html":{}}}],["authentication.controller.ts",{"_index":661,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"coverage.html":{}}}],["authentication.controller.ts:12",{"_index":666,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authentication.service",{"_index":262,"title":{},"body":{"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["authentication.service.ts",{"_index":673,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["authentication.service.ts:13",{"_index":676,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:21",{"_index":678,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:27",{"_index":677,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authenticationguard",{"_index":158,"title":{"guards/AuthenticationGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["authenticationguard.defaultauthtype",{"_index":292,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authmodule",{"_index":117,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":490,"title":{},"body":{"injectables/CreatePostProvider.html":{},"entities/Post.html":{},"injectables/PostService.html":{},"index.html":{},"properties.html":{}}}],["authorid",{"_index":468,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["authservice",{"_index":222,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["authtype",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["authtype.bearer",{"_index":284,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtype.none",{"_index":287,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtypeguardmap",{"_index":275,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtypes",{"_index":288,"title":{},"body":{"guards/AuthenticationGuard.html":{},"miscellaneous/variables.html":{}}}],["authtypes.map((type",{"_index":293,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["autoloadentities",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["await",{"_index":65,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["aws",{"_index":1366,"title":{},"body":{"index.html":{}}}],["backers",{"_index":1423,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":481,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["badrequestexception(\"please",{"_index":495,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["badrequestexception('please",{"_index":978,"title":{},"body":{"injectables/PostService.html":{}}}],["badrequestexception('the",{"_index":563,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["based",{"_index":1209,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["baseurl",{"_index":801,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["bcrypt",{"_index":311,"title":{},"body":{"injectables/BcryptProvider.html":{},"dependencies.html":{}}}],["bcrypt.compare(data",{"_index":315,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.gensalt",{"_index":313,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.hash(data",{"_index":314,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcryptprovider",{"_index":252,"title":{"injectables/BcryptProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["bearer",{"_index":79,"title":{},"body":{"guards/AccessTokenGuard.html":{},"miscellaneous/enumerations.html":{}}}],["between",{"_index":82,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["blog",{"_index":382,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"controllers/PostController.html":{}}}],["board",{"_index":1415,"title":{},"body":{"index.html":{}}}],["body",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":1019,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["bootstrap",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1438,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1436,"title":{},"body":{"modules.html":{}}}],["buffer",{"_index":304,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["building",{"_index":1323,"title":{},"body":{"index.html":{}}}],["business",{"_index":1129,"title":{},"body":{"injectables/UserService.html":{}}}],["canactivate",{"_index":11,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["canactivate(context",{"_index":26,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["cascade",{"_index":736,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["cascade'})@joincolumn",{"_index":728,"title":{},"body":{"entities/MetaOption.html":{}}}],["catch",{"_index":69,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["catch((error",{"_index":298,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["cause",{"_index":829,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["channel",{"_index":1391,"title":{},"body":{"index.html":{}}}],["character",{"_index":540,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":532,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["check",{"_index":566,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostService.html":{},"index.html":{}}}],["checks",{"_index":496,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["class",{"_index":52,"title":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{}},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":341,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"overview.html":{}}}],["clicks",{"_index":1376,"title":{},"body":{"index.html":{}}}],["clientid",{"_index":682,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["clientsecret",{"_index":684,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["cloud",{"_index":1361,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":238,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":239,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":240,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule",{"_index":750,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_providers",{"_index":751,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_paginationmodule",{"_index":779,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_exports",{"_index":781,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_providers",{"_index":780,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_postmodule",{"_index":937,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_postmodule_imports",{"_index":938,"title":{},"body":{"modules/PostModule.html":{}}}],["cluster_postmodule_providers",{"_index":939,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_tagsmodule",{"_index":1055,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_exports",{"_index":1056,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_providers",{"_index":1057,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1250,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1251,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":1252,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":733,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["column({type",{"_index":723,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["come",{"_index":1383,"title":{},"body":{"index.html":{}}}],["common/pagination/pagination.module",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["compare",{"_index":1022,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["comparepassword",{"_index":301,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["comparepassword(data",{"_index":303,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["complete",{"_index":1119,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["compodoc/compodoc",{"_index":1281,"title":{},"body":{"dependencies.html":{}}}],["config/app.config",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database.config",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["config/environment.validation",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["config/jwt.config",{"_index":47,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["config/profile.config",{"_index":1156,"title":{},"body":{"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["configmodule",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["configmodule.forfeature(jwtconfig",{"_index":189,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["configmodule.forfeature(profileconfig",{"_index":1260,"title":{},"body":{"modules/UsersModule.html":{}}}],["configmodule.forroot",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserService.html":{}}}],["configservice.get('database.autoloadentities",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.host",{"_index":187,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.name",{"_index":188,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.password",{"_index":185,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.port",{"_index":181,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.synchronize",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.user",{"_index":183,"title":{},"body":{"modules/AppModule.html":{}}}],["configtype",{"_index":18,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{}}}],["conflictexception",{"_index":328,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/UserCreateManyProvider.html":{}}}],["conflictexception('could",{"_index":1118,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["conflictexception(error",{"_index":337,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{}}}],["connect",{"_index":1111,"title":{},"body":{"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["connecting",{"_index":572,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["connection",{"_index":1125,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["connectiong",{"_index":562,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UserService.html":{}}}],["console.log(environment",{"_index":1167,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(isauth",{"_index":1164,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(newurl",{"_index":806,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["console.log(this.profilconfiguration",{"_index":1168,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(this.profilconfiguration.apikey",{"_index":1169,"title":{},"body":{"injectables/UserService.html":{}}}],["const",{"_index":57,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["constants/auth.constants",{"_index":50,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["constructor",{"_index":14,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["constructor(@inject(forwardref",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(@injectrepository(metaoption",{"_index":763,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["constructor(@injectrepository(tag",{"_index":1076,"title":{},"body":{"injectables/TagsService.html":{}}}],["constructor(authservice",{"_index":1132,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(datasource",{"_index":1100,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["constructor(jwtconfiguration",{"_index":609,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["constructor(jwtservice",{"_index":15,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["constructor(metaoptionrepository",{"_index":758,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["constructor(postrepository",{"_index":476,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["constructor(private",{"_index":54,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"controllers/TagsController.html":{},"injectables/UserCreateManyProvider.html":{},"controllers/UsersController.html":{}}}],["constructor(reflector",{"_index":278,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["constructor(request",{"_index":787,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["constructor(tagsrepository",{"_index":1066,"title":{},"body":{"injectables/TagsService.html":{}}}],["constructor(userreposiory",{"_index":595,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["constructor(userrepository",{"_index":321,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{}}}],["constructor(userservice",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{},"injectables/SignInProvider.html":{}}}],["contain",{"_index":534,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["content",{"_index":366,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["context",{"_index":29,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"classes/CreatePostDto.html":{}}}],["context.getclass",{"_index":291,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["context.gethandler",{"_index":290,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":58,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["controller",{"_index":97,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":230,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('google",{"_index":669,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["controller('meta",{"_index":746,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["controller('post",{"_index":925,"title":{},"body":{"controllers/PostController.html":{}}}],["controller('tags",{"_index":1048,"title":{},"body":{"controllers/TagsController.html":{}}}],["controller('users",{"_index":1230,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":99,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["conversion",{"_index":832,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["correct",{"_index":979,"title":{},"body":{"injectables/PostService.html":{}}}],["courses",{"_index":1397,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":1261,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":339,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDTO.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"injectables/PostService.html":{},"controllers/TagsController.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["create(@body",{"_index":748,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/TagsController.html":{}}}],["create(createpostmetaoptiondto",{"_index":740,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["create(createpostmetaoptionsdto",{"_index":761,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["create(createtagdto",{"_index":1040,"title":{},"body":{"controllers/TagsController.html":{}}}],["created",{"_index":893,"title":{},"body":{"controllers/PostController.html":{}}}],["createdate",{"_index":717,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createdatecolumn",{"_index":719,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["creategoogleuser",{"_index":320,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/UserService.html":{}}}],["creategoogleuser(googleuser",{"_index":325,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/UserService.html":{}}}],["creategoogleuserprovider",{"_index":316,"title":{"injectables/CreateGoogleUserProvider.html":{}},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["createmany",{"_index":1099,"title":{},"body":{"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["createmany(createmanyusersdto",{"_index":1103,"title":{},"body":{"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["createmanyusers",{"_index":1191,"title":{},"body":{"controllers/UsersController.html":{}}}],["createmanyusers(@body",{"_index":1247,"title":{},"body":{"controllers/UsersController.html":{}}}],["createmanyusers(createmanyusersdto",{"_index":1195,"title":{},"body":{"controllers/UsersController.html":{}}}],["createmanyusersdto",{"_index":340,"title":{"classes/CreateManyUsersDTO.html":{}},"body":{"classes/CreateManyUsersDTO.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["createmanyusersdto.users",{"_index":1112,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["createparamdecorator",{"_index":1452,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createpost",{"_index":475,"title":{},"body":{"injectables/CreatePostProvider.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["createpost(@activeuser",{"_index":931,"title":{},"body":{"controllers/PostController.html":{}}}],["createpost(createpostdto",{"_index":479,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostService.html":{}}}],["createpost(user",{"_index":887,"title":{},"body":{"controllers/PostController.html":{}}}],["createpostdto",{"_index":363,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["createpostdto.metaoptions",{"_index":488,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["createpostdto.tags.length",{"_index":493,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["createpostmetaoptiondto",{"_index":742,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createpostmetaoptionsdto",{"_index":385,"title":{"classes/CreatePostMetaOptionsDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"coverage.html":{}}}],["createpostprovider",{"_index":160,"title":{"injectables/CreatePostProvider.html":{}},"body":{"modules/AppModule.html":{},"injectables/CreatePostProvider.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"coverage.html":{},"overview.html":{}}}],["creates",{"_index":889,"title":{},"body":{"controllers/PostController.html":{}}}],["createtagdto",{"_index":506,"title":{"classes/CreateTagDto.html":{}},"body":{"classes/CreateTagDto.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["createtags",{"_index":1063,"title":{},"body":{"injectables/TagsService.html":{}}}],["createtags(createtagdto",{"_index":1069,"title":{},"body":{"injectables/TagsService.html":{}}}],["createuser",{"_index":547,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UserService.html":{}}}],["createuser(createuserdto",{"_index":549,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UserService.html":{}}}],["createuserdto",{"_index":346,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"classes/PatchUserDto.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":556,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["createuserprovider",{"_index":546,"title":{"injectables/CreateUserProvider.html":{}},"body":{"injectables/CreateUserProvider.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["createusers",{"_index":1192,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(@body",{"_index":1245,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(createuserdto",{"_index":1199,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusersprovider",{"_index":1135,"title":{},"body":{"injectables/UserService.html":{}}}],["ctx",{"_index":1455,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1456,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current",{"_index":776,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["currentpage",{"_index":772,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["custom",{"_index":1243,"title":{},"body":{"controllers/UsersController.html":{}}}],["data",{"_index":307,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["data.interface",{"_index":486,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["data.interface.ts",{"_index":90,"title":{},"body":{"interfaces/ActiveUserData.html":{},"coverage.html":{}}}],["database",{"_index":96,"title":{},"body":{"interfaces/ActiveUserData.html":{},"modules/AppModule.html":{},"injectables/CreateUserProvider.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["databaseconfig",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["datasource",{"_index":1101,"title":{},"body":{"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["date",{"_index":397,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["declarations",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorator",{"_index":1244,"title":{},"body":{"controllers/UsersController.html":{}}}],["decorators",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"classes/GoogleTokenDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["decorators/auth.decorator",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{}}}],["deeper",{"_index":1393,"title":{},"body":{"index.html":{}}}],["default",{"_index":820,"title":{},"body":{"classes/PaginationQueryDto.html":{},"entities/Post.html":{},"miscellaneous/variables.html":{}}}],["defaultauthtype",{"_index":277,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["defaultvaluepipe",{"_index":1220,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":1239,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":1237,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":19,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["delete",{"_index":897,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["delete(\"soft",{"_index":1052,"title":{},"body":{"controllers/TagsController.html":{}}}],["delete('soft",{"_index":1044,"title":{},"body":{"controllers/TagsController.html":{}}}],["delete(@query('id",{"_index":1050,"title":{},"body":{"controllers/TagsController.html":{}}}],["delete(id",{"_index":951,"title":{},"body":{"injectables/PostService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["deleteat",{"_index":1025,"title":{},"body":{"entities/Tag.html":{}}}],["deleted",{"_index":975,"title":{},"body":{"injectables/PostService.html":{},"injectables/TagsService.html":{}}}],["deletedatecolumn",{"_index":1027,"title":{},"body":{"entities/Tag.html":{}}}],["deletepost",{"_index":884,"title":{},"body":{"controllers/PostController.html":{}}}],["deletepost(@query(\"id",{"_index":935,"title":{},"body":{"controllers/PostController.html":{}}}],["deletepost(id",{"_index":896,"title":{},"body":{"controllers/PostController.html":{}}}],["dependencies",{"_index":108,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":1352,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":1365,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":1357,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":1375,"title":{},"body":{"index.html":{}}}],["description",{"_index":338,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":1337,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":1404,"title":{},"body":{"index.html":{}}}],["discord",{"_index":1390,"title":{},"body":{"index.html":{}}}],["dive",{"_index":1392,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":1262,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["draft",{"_index":427,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["dto",{"_index":919,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["dto.ts",{"_index":836,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["dto.ts:12",{"_index":841,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["dtos/create",{"_index":482,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["dtos/get",{"_index":920,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["dtos/google",{"_index":668,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["dtos/pagination",{"_index":792,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["dtos/patch",{"_index":918,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/UsersController.html":{}}}],["dtos/refresh",{"_index":228,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["dtos/signin.dto",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["duplicate",{"_index":505,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["e",{"_index":981,"title":{},"body":{"injectables/PostService.html":{}}}],["e2e",{"_index":1347,"title":{},"body":{"index.html":{}}}],["each",{"_index":362,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{}}}],["eager",{"_index":852,"title":{},"body":{"entities/Post.html":{}}}],["efficient",{"_index":1324,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":1356,"title":{},"body":{"index.html":{}}}],["email",{"_index":92,"title":{},"body":{"interfaces/ActiveUserData.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleUser.html":{},"classes/SignInDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["email.provider",{"_index":1159,"title":{},"body":{"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["email.provider.ts",{"_index":593,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"coverage.html":{}}}],["email.provider.ts:13",{"_index":599,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["email.provider.ts:7",{"_index":596,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["enabled",{"_index":830,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["encrypted",{"_index":305,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["enddate",{"_index":638,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{}}}],["endpoint",{"_index":1176,"title":{},"body":{"injectables/UserService.html":{}}}],["ensure",{"_index":502,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostService.html":{},"index.html":{}}}],["enterprise",{"_index":1406,"title":{},"body":{"index.html":{}}}],["entities",{"_index":175,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":714,"title":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"coverage.html":{}}}],["entries",{"_index":1211,"title":{},"body":{"controllers/UsersController.html":{}}}],["enum",{"_index":455,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enumerations",{"_index":1304,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/auth",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{}}}],["enums/posttype.enum",{"_index":447,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enums/status.enum",{"_index":448,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["env",{"_index":163,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["env.${env",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["env.development",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["environment",{"_index":1165,"title":{},"body":{"injectables/UserService.html":{}}}],["environmentvalidation",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["eror",{"_index":299,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["err",{"_index":571,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["error",{"_index":70,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["error('function",{"_index":581,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["example",{"_index":377,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["executioncontext",{"_index":27,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":604,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["existing",{"_index":905,"title":{},"body":{"controllers/PostController.html":{}}}],["existinguser",{"_index":554,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["exists",{"_index":565,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["experience",{"_index":1395,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":614,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["export",{"_index":51,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["exports",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":48,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/PaginationProvider.html":{},"dependencies.html":{}}}],["extends",{"_index":649,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["extractrequestfromheader",{"_index":13,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["extractrequestfromheader(request",{"_index":32,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["false",{"_index":389,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["family_name",{"_index":693,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["fast",{"_index":1369,"title":{},"body":{"index.html":{}}}],["featured",{"_index":380,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["featuredimageurl",{"_index":367,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["features",{"_index":1379,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":602,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["fetched",{"_index":1208,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetches",{"_index":1204,"title":{},"body":{"controllers/UsersController.html":{}}}],["few",{"_index":1371,"title":{},"body":{"index.html":{}}}],["field",{"_index":1453,"title":{},"body":{"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["filename",{"_index":1177,"title":{},"body":{"injectables/UserService.html":{}}}],["finally",{"_index":1122,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["finalresponse",{"_index":811,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["find",{"_index":1149,"title":{},"body":{"injectables/UserService.html":{}}}],["findall",{"_index":947,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["findall(getuserparamdto",{"_index":1141,"title":{},"body":{"injectables/UserService.html":{}}}],["findall(postquery",{"_index":953,"title":{},"body":{"injectables/PostService.html":{}}}],["findmultpletags",{"_index":1064,"title":{},"body":{"injectables/TagsService.html":{}}}],["findmultpletags(tags",{"_index":1072,"title":{},"body":{"injectables/TagsService.html":{}}}],["findonebyemail",{"_index":594,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"injectables/UserService.html":{}}}],["findonebyemail(email",{"_index":598,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"injectables/UserService.html":{}}}],["findonebygoogleid",{"_index":586,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"injectables/UserService.html":{}}}],["findonebygoogleid(googleid",{"_index":588,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"injectables/UserService.html":{}}}],["findonebygoogleidprovider",{"_index":583,"title":{"injectables/FindOneByGoogleIdProvider.html":{}},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["findonebygoogleidprvider",{"_index":1136,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid",{"_index":1131,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid(id",{"_index":1147,"title":{},"body":{"injectables/UserService.html":{}}}],["findoneuserbyemailprovider",{"_index":592,"title":{"injectables/FindOneUserByEmailProvider.html":{}},"body":{"injectables/FindOneUserByEmailProvider.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["first",{"_index":774,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["firstname",{"_index":519,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleUser.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["focus",{"_index":1378,"title":{},"body":{"index.html":{}}}],["follow",{"_index":1409,"title":{},"body":{"index.html":{}}}],["forwardref",{"_index":248,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["framework",{"_index":1322,"title":{},"body":{"index.html":{}}}],["full",{"_index":1405,"title":{},"body":{"index.html":{}}}],["function",{"_index":573,"title":{},"body":{"injectables/CreateUserProvider.html":{},"coverage.html":{}}}],["functions",{"_index":1315,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":1374,"title":{},"body":{"index.html":{}}}],["generate",{"_index":1004,"title":{},"body":{"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["generatetoken",{"_index":607,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["generatetoken(user",{"_index":611,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["generatetokenprovider",{"_index":1000,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["generatetokensprovider",{"_index":242,"title":{"injectables/GenerateTokensProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["ger",{"_index":655,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["get('/:id/:optional",{"_index":1233,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id/:optional?')@apioperation({summary",{"_index":1203,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:userid",{"_index":901,"title":{},"body":{"controllers/PostController.html":{}}}],["gethello",{"_index":103,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getpost",{"_index":885,"title":{},"body":{"controllers/PostController.html":{}}}],["getpost(@param('userid",{"_index":927,"title":{},"body":{"controllers/PostController.html":{}}}],["getpost(userid",{"_index":899,"title":{},"body":{"controllers/PostController.html":{}}}],["getpostbasedto",{"_index":635,"title":{"classes/GetPostBaseDto.html":{}},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"coverage.html":{}}}],["getpostdto",{"_index":648,"title":{"classes/GetPostDto.html":{}},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["getting",{"_index":1318,"title":{"index.html":{}},"body":{}}],["getuserparamdto",{"_index":1144,"title":{},"body":{"injectables/UserService.html":{}}}],["getusers",{"_index":1193,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(/*@param('id",{"_index":1235,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getusersparamdto",{"_index":1202,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersparamdto",{"_index":651,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["given_name",{"_index":692,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["google",{"_index":318,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{}}}],["googleauthenticationcontroller",{"_index":247,"title":{"controllers/GoogleAuthenticationController.html":{}},"body":{"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{},"coverage.html":{}}}],["googleauthenticationservice",{"_index":243,"title":{"injectables/GoogleAuthenticationService.html":{}},"body":{"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"coverage.html":{},"overview.html":{}}}],["googleid",{"_index":590,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleUser.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["googletokendto",{"_index":665,"title":{"classes/GoogleTokenDto.html":{}},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"coverage.html":{}}}],["googletokendto.token",{"_index":691,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["googleuser",{"_index":326,"title":{"classes/GoogleUser.html":{}},"body":{"injectables/CreateGoogleUserProvider.html":{},"classes/GoogleUser.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["graph",{"_index":1400,"title":{},"body":{"index.html":{}}}],["grow",{"_index":1419,"title":{},"body":{"index.html":{}}}],["guard",{"_index":0,"title":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}},"body":{"coverage.html":{}}}],["guards",{"_index":2,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"overview.html":{}}}],["hands",{"_index":1394,"title":{},"body":{"index.html":{}}}],["handy",{"_index":1384,"title":{},"body":{"index.html":{}}}],["hashing.provider",{"_index":310,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/SignInProvider.html":{}}}],["hashingprovider",{"_index":241,"title":{"injectables/HashingProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["hashpassword",{"_index":302,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["hashpassword(data",{"_index":308,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["header",{"_index":78,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/UsersController.html":{}}}],["headers",{"_index":1221,"title":{},"body":{"controllers/UsersController.html":{}}}],["hello",{"_index":196,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":1398,"title":{},"body":{"index.html":{}}}],["here",{"_index":1427,"title":{},"body":{"index.html":{}}}],["host",{"_index":186,"title":{},"body":{"modules/AppModule.html":{}}}],["http://localhost.com/images/image1.jpg",{"_index":383,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["httpcode",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpexception",{"_index":1152,"title":{},"body":{"injectables/UserService.html":{}}}],["https://nestjs.com",{"_index":1432,"title":{},"body":{"index.html":{}}}],["https://schema.org",{"_index":409,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https:\\/\\/schema.org\\\",\\r\\n",{"_index":460,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["httpstatus",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["httpstatus.moved_permanently",{"_index":1174,"title":{},"body":{"injectables/UserService.html":{}}}],["id",{"_index":95,"title":{},"body":{"interfaces/ActiveUserData.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["id.provider",{"_index":1160,"title":{},"body":{"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["id.provider.ts",{"_index":585,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"coverage.html":{}}}],["id.provider.ts:12",{"_index":589,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{}}}],["id.provider.ts:7",{"_index":587,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{}}}],["identifier",{"_index":1263,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":432,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"injectables/PostService.html":{}}}],["idtoken",{"_index":690,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["image",{"_index":381,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["implemented",{"_index":582,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["implements",{"_index":53,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["implicit",{"_index":831,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["import",{"_index":37,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["imports",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["in')@httpcode(httpstatus.ok)@auth(authtype.none",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{}}}],["in(tags",{"_index":1081,"title":{},"body":{"injectables/TagsService.html":{}}}],["in.provider",{"_index":255,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["in.provider.ts",{"_index":1014,"title":{},"body":{"injectables/SignInProvider.html":{},"coverage.html":{}}}],["in.provider.ts:12",{"_index":1015,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["in.provider.ts:24",{"_index":1016,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["inejectrepository",{"_index":574,"title":{},"body":{"injectables/CreateUserProvider.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["information",{"_index":1359,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":1381,"title":{},"body":{"index.html":{}}}],["inject",{"_index":38,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{}}}],["inject(forwardref",{"_index":553,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{}}}],["inject(jwtconfig.key",{"_index":56,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["inject(profileconfig.key",{"_index":1161,"title":{},"body":{"injectables/UserService.html":{}}}],["inject(request",{"_index":795,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["injectable",{"_index":39,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":193,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":331,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["injectrepository(metaoption",{"_index":959,"title":{},"body":{"injectables/PostService.html":{}}}],["injectrepository(post",{"_index":487,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostService.html":{}}}],["injectrepository(user",{"_index":334,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/UserService.html":{}}}],["inside",{"_index":504,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["install",{"_index":1373,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":1335,"title":{},"body":{"index.html":{}}}],["instance",{"_index":295,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["instance.canactivate(context",{"_index":297,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["integer",{"_index":467,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["interact",{"_index":1401,"title":{},"body":{"index.html":{}}}],["interface",{"_index":85,"title":{"interfaces/ActiveUserData.html":{},"interfaces/Paginated.html":{}},"body":{"interfaces/ActiveUserData.html":{},"interfaces/Paginated.html":{},"coverage.html":{}}}],["interfaces",{"_index":87,"title":{},"body":{"interfaces/ActiveUserData.html":{},"interfaces/Paginated.html":{},"overview.html":{}}}],["interfaces/active",{"_index":620,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["interfaces/google",{"_index":332,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/UserService.html":{}}}],["interfaces/paginated.interface",{"_index":794,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["intersectiontype",{"_index":643,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{}}}],["intersectiontype(getpostbasedto",{"_index":650,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{}}}],["inversepost",{"_index":972,"title":{},"body":{"injectables/PostService.html":{}}}],["ip",{"_index":1222,"title":{},"body":{"controllers/UsersController.html":{}}}],["isarray",{"_index":354,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{}}}],["isauth",{"_index":1162,"title":{},"body":{"injectables/UserService.html":{}}}],["isdate",{"_index":644,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{}}}],["isdate()@isoptional",{"_index":640,"title":{},"body":{"classes/GetPostBaseDto.html":{}}}],["isemail",{"_index":542,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["isemail()@isnotempty",{"_index":1009,"title":{},"body":{"classes/SignInDto.html":{}}}],["isenum",{"_index":437,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":458,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus)@isnotempty()@apiproperty({enum",{"_index":426,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":454,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype)@isnotempty()@apiproperty({enum",{"_index":392,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isequal",{"_index":1018,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["isglobal",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":438,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["isiso8601",{"_index":439,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isiso8601()@isoptional()@apipropertyoptional({description",{"_index":398,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":440,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{}}}],["isnotempty",{"_index":355,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GoogleTokenDto.html":{},"classes/PatchPostDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{}}}],["isnotempty()@isjson",{"_index":471,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["isnotempty()@isstring",{"_index":702,"title":{},"body":{"classes/GoogleTokenDto.html":{},"classes/RefreshTokenDto.html":{}}}],["isoptional",{"_index":441,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{}}}],["isoptional()@apipropertyoptional({type",{"_index":387,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional()@isarray()@isint({each",{"_index":430,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional()@isjson()@apipropertyoptional({description",{"_index":404,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional()@ispositive",{"_index":823,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["isoptional()@isurl()@maxlength(1024)@apipropertyoptional({description",{"_index":379,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["ispositive",{"_index":826,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["isstring",{"_index":442,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GoogleTokenDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{}}}],["isstring()@isnotempty",{"_index":1011,"title":{},"body":{"classes/SignInDto.html":{}}}],["isstring()@isnotempty()@apiproperty({description",{"_index":412,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["isstring()@isnotempty()@isemail()@maxlength(96",{"_index":521,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":523,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(8)@matches(/^(?=.*[a",{"_index":527,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@apipropertyoptional({description",{"_index":376,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":525,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["issuer",{"_index":624,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["isurl",{"_index":443,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["items",{"_index":350,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{}}}],["itemsperpage",{"_index":770,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["job",{"_index":1412,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":1414,"title":{},"body":{"index.html":{}}}],["john",{"_index":1170,"title":{},"body":{"injectables/UserService.html":{}}}],["john@doe.com",{"_index":1171,"title":{},"body":{"injectables/UserService.html":{}}}],["joi",{"_index":1294,"title":{},"body":{"dependencies.html":{}}}],["join",{"_index":1425,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":734,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["jointable",{"_index":876,"title":{},"body":{"entities/Post.html":{}}}],["json",{"_index":406,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{}}}],["jwtconfig",{"_index":46,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"modules/UsersModule.html":{}}}],["jwtconfiguration",{"_index":17,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["jwtmodule",{"_index":152,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["jwtmodule.registerasync(jwtconfig.asprovider",{"_index":190,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["jwtservice",{"_index":16,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["kamil",{"_index":1429,"title":{},"body":{"index.html":{}}}],["key",{"_index":1353,"title":{},"body":{"index.html":{}}}],["keyof",{"_index":1454,"title":{},"body":{"miscellaneous/variables.html":{}}}],["last",{"_index":775,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["lastname",{"_index":520,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleUser.html":{},"entities/User.html":{}}}],["later",{"_index":561,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["learn",{"_index":1387,"title":{},"body":{"index.html":{}}}],["legend",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":857,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["letter",{"_index":537,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letters",{"_index":419,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["library",{"_index":680,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"dependencies.html":{}}}],["license",{"_index":1435,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1417,"title":{},"body":{"index.html":{}}}],["limit",{"_index":818,"title":{},"body":{"classes/PaginationQueryDto.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["line",{"_index":75,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["linenumber",{"_index":1179,"title":{},"body":{"injectables/UserService.html":{}}}],["linkedin",{"_index":1411,"title":{},"body":{"index.html":{}}}],["links",{"_index":768,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["list",{"_index":1205,"title":{},"body":{"controllers/UsersController.html":{}}}],["literal",{"_index":769,"title":{},"body":{"interfaces/Paginated.html":{}}}],["load",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["loginticket",{"_index":688,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["loginticket.getpayload",{"_index":694,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["long",{"_index":533,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["looking",{"_index":1360,"title":{},"body":{"index.html":{}}}],["loop",{"_index":1408,"title":{},"body":{"index.html":{}}}],["lowercase",{"_index":538,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["main.ts",{"_index":833,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["makes",{"_index":1367,"title":{},"body":{"index.html":{}}}],["managing",{"_index":1380,"title":{},"body":{"index.html":{}}}],["many",{"_index":343,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["many')@useguards(accesstokenguard",{"_index":1197,"title":{},"body":{"controllers/UsersController.html":{}}}],["many.provider",{"_index":1157,"title":{},"body":{"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["many.provider.ts",{"_index":1098,"title":{},"body":{"injectables/UserCreateManyProvider.html":{},"coverage.html":{}}}],["many.provider.ts:11",{"_index":1104,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["many.provider.ts:8",{"_index":1102,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["manytomany",{"_index":877,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytomany(undefined",{"_index":870,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytoone",{"_index":878,"title":{},"body":{"entities/Post.html":{}}}],["manytoone(undefined",{"_index":850,"title":{},"body":{"entities/Post.html":{}}}],["matches",{"_index":444,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":545,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":456,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["matching",{"_index":84,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(totalitems",{"_index":808,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["mau",{"_index":1363,"title":{},"body":{"index.html":{}}}],["maxlength",{"_index":445,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(1024",{"_index":462,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(256",{"_index":457,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(512",{"_index":453,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["maxlength(96",{"_index":543,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":417,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["meta",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"entities/Post.html":{},"coverage.html":{}}}],["metadata",{"_index":1299,"title":{},"body":{"dependencies.html":{}}}],["metaoption",{"_index":715,"title":{"entities/MetaOption.html":{}},"body":{"entities/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["metaoptionrepository",{"_index":760,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostService.html":{}}}],["metaoptions",{"_index":368,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"entities/Post.html":{},"injectables/PostService.html":{}}}],["metaoptions.post",{"_index":861,"title":{},"body":{"entities/Post.html":{}}}],["metaoptionscontroller",{"_index":737,"title":{"controllers/MetaOptionsController.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"coverage.html":{}}}],["metaoptionservice",{"_index":747,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["metaoptionsmodule",{"_index":118,"title":{"modules/MetaOptionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules.html":{},"overview.html":{}}}],["metaoptionsservice",{"_index":743,"title":{"injectables/MetaOptionsService.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{},"overview.html":{}}}],["metavalue",{"_index":465,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{}}}],["method",{"_index":1143,"title":{},"body":{"injectables/UserService.html":{}}}],["methods",{"_index":9,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["minlength",{"_index":446,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":518,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":452,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":544,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":1303,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1416,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1340,"title":{},"body":{"index.html":{}}}],["module",{"_index":105,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":107,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":559,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UserService.html":{}}}],["more",{"_index":1358,"title":{},"body":{"index.html":{}}}],["moved",{"_index":1183,"title":{},"body":{"injectables/UserService.html":{}}}],["myśliwiec",{"_index":1430,"title":{},"body":{"index.html":{}}}],["name",{"_index":23,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["need",{"_index":827,"title":{},"body":{"classes/PaginationQueryDto.html":{},"index.html":{}}}],["needs",{"_index":839,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["nest",{"_index":1329,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1434,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":198,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["nestjs/common",{"_index":41,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":42,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":155,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/PaginationProvider.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":43,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":847,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1287,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":361,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["new",{"_index":62,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["newurl",{"_index":804,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&pages=${nextpage",{"_index":815,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&pages=${paginationquery.page",{"_index":814,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&pages=${previouspage",{"_index":816,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&pages=${totalpages",{"_index":813,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&pages=1",{"_index":812,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newuser",{"_index":567,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/UserCreateManyProvider.html":{}}}],["newusers",{"_index":1105,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["newusers.push(result",{"_index":1115,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["next",{"_index":777,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["nextpage",{"_index":809,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["node.js",{"_index":1321,"title":{},"body":{"index.html":{}}}],["none",{"_index":1242,"title":{},"body":{"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["npm",{"_index":1334,"title":{},"body":{"index.html":{}}}],["null",{"_index":386,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{}}}],["nullable",{"_index":724,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["number",{"_index":94,"title":{},"body":{"interfaces/ActiveUserData.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["oauth2client",{"_index":679,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["oauth2client(clientid",{"_index":687,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["oauthclient",{"_index":674,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["object",{"_index":388,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["objectliteral",{"_index":793,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["observable",{"_index":44,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["occured",{"_index":1181,"title":{},"body":{"injectables/UserService.html":{}}}],["offer",{"_index":1413,"title":{},"body":{"index.html":{}}}],["official",{"_index":1364,"title":{},"body":{"index.html":{}}}],["ondelete",{"_index":727,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["one",{"_index":535,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["onetomany",{"_index":1095,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":1092,"title":{},"body":{"entities/User.html":{}}}],["onetoone",{"_index":735,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["onetoone(undefined",{"_index":726,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["onmoduleinit",{"_index":675,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["open",{"_index":1418,"title":{},"body":{"index.html":{}}}],["operations",{"_index":1130,"title":{},"body":{"injectables/UserService.html":{}}}],["option.dtos",{"_index":450,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{}}}],["option.dtos.ts",{"_index":470,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["option.dtos.ts:6",{"_index":472,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["option.entity",{"_index":754,"title":{},"body":{"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{}}}],["option.entity.ts",{"_index":716,"title":{},"body":{"entities/MetaOption.html":{},"coverage.html":{}}}],["option.entity.ts:13",{"_index":725,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:16",{"_index":720,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:19",{"_index":731,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:26",{"_index":729,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:7",{"_index":722,"title":{},"body":{"entities/MetaOption.html":{}}}],["optional",{"_index":25,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["options",{"_index":739,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options.controller",{"_index":753,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.controller.ts",{"_index":738,"title":{},"body":{"controllers/MetaOptionsController.html":{},"coverage.html":{}}}],["options.controller.ts:11",{"_index":741,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options.module",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["options.module.ts",{"_index":752,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.service",{"_index":745,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["options.service.ts",{"_index":757,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["options.service.ts:12",{"_index":762,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options.service.ts:8",{"_index":759,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options/dtos/create",{"_index":449,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/Post.html":{},"coverage.html":{}}}],["options/meta",{"_index":139,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"entities/Post.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["options/providers/meta",{"_index":756,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["out",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":1439,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1280,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":819,"title":{},"body":{"classes/PaginationQueryDto.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["page','story','series",{"_index":395,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["paginated",{"_index":766,"title":{"interfaces/Paginated.html":{}},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["paginatequery",{"_index":786,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginatequery(paginationquery",{"_index":789,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationmodule",{"_index":119,"title":{"modules/PaginationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules.html":{},"overview.html":{}}}],["paginationprovider",{"_index":782,"title":{"injectables/PaginationProvider.html":{}},"body":{"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"coverage.html":{},"overview.html":{}}}],["paginationquery",{"_index":791,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquery.limit",{"_index":799,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquery.page",{"_index":798,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquerydto",{"_index":645,"title":{"classes/PaginationQueryDto.html":{}},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["param",{"_index":909,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["param.dto",{"_index":1153,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["param.dto.ts",{"_index":653,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:13",{"_index":658,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parameterindex",{"_index":578,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["parameters",{"_index":21,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["parseintpipe",{"_index":910,"title":{},"body":{"controllers/PostController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["part",{"_index":77,"title":{},"body":{"guards/AccessTokenGuard.html":{},"index.html":{}}}],["partialtype",{"_index":842,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":837,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":846,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["password",{"_index":184,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{}}}],["patch",{"_index":911,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["patchpostdto",{"_index":834,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["patchpostdto.content",{"_index":985,"title":{},"body":{"injectables/PostService.html":{}}}],["patchpostdto.featuredimageurl",{"_index":993,"title":{},"body":{"injectables/PostService.html":{}}}],["patchpostdto.id",{"_index":980,"title":{},"body":{"injectables/PostService.html":{}}}],["patchpostdto.posttype",{"_index":991,"title":{},"body":{"injectables/PostService.html":{}}}],["patchpostdto.publishon",{"_index":995,"title":{},"body":{"injectables/PostService.html":{}}}],["patchpostdto.slug",{"_index":989,"title":{},"body":{"injectables/PostService.html":{}}}],["patchpostdto.status",{"_index":987,"title":{},"body":{"injectables/PostService.html":{}}}],["patchpostdto.tags.length",{"_index":977,"title":{},"body":{"injectables/PostService.html":{}}}],["patchpostdto.title",{"_index":983,"title":{},"body":{"injectables/PostService.html":{}}}],["patchuser",{"_index":1194,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":1249,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(patchuserdto",{"_index":1218,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":844,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["payload",{"_index":64,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{}}}],["per",{"_index":1213,"title":{},"body":{"controllers/UsersController.html":{}}}],["perform",{"_index":1128,"title":{},"body":{"injectables/UserService.html":{}}}],["permanently",{"_index":1182,"title":{},"body":{"injectables/UserService.html":{}}}],["person",{"_index":410,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["person\\\"\\r\\n",{"_index":461,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["pg",{"_index":1296,"title":{},"body":{"dependencies.html":{}}}],["platform",{"_index":1362,"title":{},"body":{"index.html":{}}}],["please",{"_index":560,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["port",{"_index":180,"title":{},"body":{"modules/AppModule.html":{}}}],["position",{"_index":1215,"title":{},"body":{"controllers/UsersController.html":{}}}],["possible",{"_index":393,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["post",{"_index":221,"title":{"entities/Post.html":{}},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"controllers/GoogleAuthenticationController.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":890,"title":{},"body":{"controllers/PostController.html":{}}}],["post'})@isstring()@minlength(4)@maxlength(512)@isnotempty",{"_index":435,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@matches(/^[a",{"_index":414,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["post('create",{"_index":1196,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('refresh",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('sign",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@auth(authtype.none",{"_index":1200,"title":{},"body":{"controllers/UsersController.html":{}}}],["post.author",{"_index":1093,"title":{},"body":{"entities/User.html":{}}}],["post.content",{"_index":984,"title":{},"body":{"injectables/PostService.html":{}}}],["post.controller",{"_index":941,"title":{},"body":{"modules/PostModule.html":{}}}],["post.dtos",{"_index":483,"title":{},"body":{"injectables/CreatePostProvider.html":{},"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["post.dtos.ts",{"_index":365,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["post.dtos.ts:115",{"_index":391,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:17",{"_index":436,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:25",{"_index":396,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:32",{"_index":378,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:44",{"_index":424,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:53",{"_index":429,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:61",{"_index":411,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:71",{"_index":384,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:80",{"_index":403,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:92",{"_index":433,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.entity",{"_index":484,"title":{},"body":{"injectables/CreatePostProvider.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{}}}],["post.featuredimageurl",{"_index":992,"title":{},"body":{"injectables/PostService.html":{}}}],["post.metaoptions",{"_index":500,"title":{},"body":{"injectables/CreatePostProvider.html":{},"entities/MetaOption.html":{}}}],["post.metaoptions.id",{"_index":974,"title":{},"body":{"injectables/PostService.html":{}}}],["post.posttype",{"_index":990,"title":{},"body":{"injectables/PostService.html":{}}}],["post.provider",{"_index":162,"title":{},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{}}}],["post.provider.ts",{"_index":474,"title":{},"body":{"injectables/CreatePostProvider.html":{},"coverage.html":{}}}],["post.provider.ts:11",{"_index":477,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["post.provider.ts:20",{"_index":480,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["post.publishon",{"_index":994,"title":{},"body":{"injectables/PostService.html":{}}}],["post.slug",{"_index":988,"title":{},"body":{"injectables/PostService.html":{}}}],["post.status",{"_index":986,"title":{},"body":{"injectables/PostService.html":{}}}],["post.tags",{"_index":996,"title":{},"body":{"injectables/PostService.html":{},"entities/Tag.html":{}}}],["post.title",{"_index":982,"title":{},"body":{"injectables/PostService.html":{}}}],["post/post.module",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["post/services/create",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["post/services/post.service",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["postcontroller",{"_index":882,"title":{"controllers/PostController.html":{}},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{},"coverage.html":{}}}],["postgres",{"_index":174,"title":{},"body":{"modules/AppModule.html":{}}}],["postmodule",{"_index":120,"title":{"modules/PostModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"modules.html":{},"overview.html":{}}}],["postquery",{"_index":900,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["postquery.limit",{"_index":965,"title":{},"body":{"injectables/PostService.html":{}}}],["postquery.page",{"_index":964,"title":{},"body":{"injectables/PostService.html":{}}}],["postrepository",{"_index":478,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostService.html":{}}}],["posts",{"_index":961,"title":{},"body":{"injectables/PostService.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["posts.dto",{"_index":921,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["posts.dto.ts",{"_index":637,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"coverage.html":{}}}],["posts.dto.ts:12",{"_index":641,"title":{},"body":{"classes/GetPostBaseDto.html":{}}}],["posts.dto.ts:8",{"_index":642,"title":{},"body":{"classes/GetPostBaseDto.html":{}}}],["postservice",{"_index":131,"title":{"injectables/PostService.html":{}},"body":{"modules/AppModule.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":425,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["poststatus.draft",{"_index":881,"title":{},"body":{"entities/Post.html":{}}}],["posttype",{"_index":369,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["posttype.post",{"_index":880,"title":{},"body":{"entities/Post.html":{}}}],["prefix",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["previous",{"_index":778,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["previouspage",{"_index":810,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["primarygeneratedcolumn",{"_index":721,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["private",{"_index":12,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["process",{"_index":558,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["process.env.node_env",{"_index":164,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["production",{"_index":1342,"title":{},"body":{"index.html":{}}}],["profilconfiguration",{"_index":1133,"title":{},"body":{"injectables/UserService.html":{}}}],["profileconfig",{"_index":1155,"title":{},"body":{"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["progressive",{"_index":1320,"title":{},"body":{"index.html":{}}}],["project",{"_index":1332,"title":{},"body":{"index.html":{}}}],["promise",{"_index":31,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{}}}],["promise.all",{"_index":629,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["promise.resolve",{"_index":296,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["properties",{"_index":91,"title":{"properties.html":{}},"body":{"interfaces/ActiveUserData.html":{},"guards/AuthenticationGuard.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"entities/User.html":{},"properties.html":{}}}],["propertykey",{"_index":577,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["provide",{"_index":191,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["providers",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/bcrypt.provider",{"_index":253,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/create",{"_index":1257,"title":{},"body":{"modules/UsersModule.html":{}}}],["providers/find",{"_index":1258,"title":{},"body":{"modules/UsersModule.html":{}}}],["providers/generate",{"_index":256,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["providers/google",{"_index":667,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["providers/hashing.provider",{"_index":251,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/meta",{"_index":744,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["providers/pagination.provider",{"_index":784,"title":{},"body":{"modules/PaginationModule.html":{}}}],["providers/refresh",{"_index":258,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["providers/sign",{"_index":254,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["providers/tags.service",{"_index":1047,"title":{},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{}}}],["providers/user",{"_index":1256,"title":{},"body":{"modules/UsersModule.html":{}}}],["providers/user.service",{"_index":1226,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["published",{"_index":399,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["publishon",{"_index":370,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["query",{"_index":912,"title":{},"body":{"controllers/PostController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["query'})@apiquery({name",{"_index":1210,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit",{"_index":1236,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":1238,"title":{},"body":{"controllers/UsersController.html":{}}}],["query.dto",{"_index":647,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"injectables/PaginationProvider.html":{}}}],["query.dto.ts",{"_index":817,"title":{},"body":{"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["query.dto.ts:12",{"_index":825,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["query.dto.ts:8",{"_index":824,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["queryrunner",{"_index":1106,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["queryrunner.committransaction",{"_index":1116,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["queryrunner.connect",{"_index":1108,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["queryrunner.manager.create(user",{"_index":1113,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["queryrunner.manager.save(newuser",{"_index":1114,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["queryrunner.release",{"_index":1123,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["queryrunner.rollbacktransaction",{"_index":1117,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["queryrunner.starttransaction",{"_index":1109,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["questions",{"_index":1388,"title":{},"body":{"index.html":{}}}],["r\\n",{"_index":459,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["read",{"_index":1426,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":55,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["ready",{"_index":1351,"title":{},"body":{"index.html":{}}}],["real",{"_index":1402,"title":{},"body":{"index.html":{}}}],["record",{"_index":285,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["reflect",{"_index":1298,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":279,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["refreshtoken",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokensProvider.html":{},"classes/RefreshTokenDto.html":{}}}],["refreshtoken(@body",{"_index":236,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtoken(refreshtokendto",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["refreshtokendto",{"_index":207,"title":{"classes/RefreshTokenDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"coverage.html":{}}}],["refreshtokenprovider",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokens",{"_index":999,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["refreshtokens(refreshtokendto",{"_index":1002,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["refreshtokensprovider",{"_index":244,"title":{"injectables/RefreshTokensProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokensProvider.html":{},"coverage.html":{},"overview.html":{}}}],["registered",{"_index":1206,"title":{},"body":{"controllers/UsersController.html":{}}}],["relations",{"_index":963,"title":{},"body":{"injectables/PostService.html":{}}}],["release",{"_index":1124,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["repository",{"_index":322,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["repository.count",{"_index":807,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["repository.find",{"_index":796,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["req",{"_index":913,"title":{},"body":{"controllers/PostController.html":{}}}],["request",{"_index":33,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["request.headers.authorization?.split",{"_index":74,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["request[request_user_key",{"_index":68,"title":{},"body":{"guards/AccessTokenGuard.html":{},"miscellaneous/variables.html":{}}}],["request_user_key",{"_index":49,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["requesttimeoutexception",{"_index":551,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/PostService.html":{},"injectables/SignInProvider.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["requesttimeoutexception('could",{"_index":1110,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["requesttimeoutexception('unable",{"_index":557,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["requesttimeoutexception(error",{"_index":601,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"injectables/SignInProvider.html":{}}}],["required",{"_index":349,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["requiring",{"_index":1370,"title":{},"body":{"index.html":{}}}],["reset",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":1382,"title":{},"body":{"index.html":{}}}],["response",{"_index":892,"title":{},"body":{"controllers/PostController.html":{}}}],["result",{"_index":1079,"title":{},"body":{"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{}}}],["results",{"_index":83,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":71,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":1212,"title":{},"body":{"controllers/UsersController.html":{}}}],["returns",{"_index":30,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["review",{"_index":1311,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["run",{"_index":1336,"title":{},"body":{"index.html":{}}}],["runs",{"_index":1355,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":45,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"dependencies.html":{}}}],["salt",{"_index":312,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["scalable",{"_index":1325,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":1310,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["scheduled','review",{"_index":428,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["schema",{"_index":371,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["secret",{"_index":626,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["serialize",{"_index":405,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":1314,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["server",{"_index":1326,"title":{},"body":{"index.html":{}}}],["service/auth.service",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["services/create",{"_index":944,"title":{},"body":{"modules/PostModule.html":{}}}],["services/post.service",{"_index":914,"title":{},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{}}}],["setmetadata",{"_index":1223,"title":{},"body":{"controllers/UsersController.html":{}}}],["setmetadata('authtype",{"_index":1241,"title":{},"body":{"controllers/UsersController.html":{}}}],["setmetadata(auth_type_key",{"_index":1458,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":1333,"title":{},"body":{"index.html":{}}}],["side",{"_index":1327,"title":{},"body":{"index.html":{}}}],["sidebarenabled\":true",{"_index":466,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["signin",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["signin(@body",{"_index":233,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(signindto",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["signindto",{"_index":214,"title":{"classes/SignInDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"coverage.html":{}}}],["signinprovider",{"_index":245,"title":{"injectables/SignInProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["signtoken",{"_index":608,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["signtoken(userid",{"_index":613,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["simple",{"_index":1372,"title":{},"body":{"index.html":{}}}],["single",{"_index":1150,"title":{},"body":{"injectables/UserService.html":{}}}],["skip",{"_index":797,"title":{},"body":{"injectables/PaginationProvider.html":{},"injectables/PostService.html":{}}}],["slug",{"_index":372,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["small",{"_index":418,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["social/google",{"_index":259,"title":{},"body":{"modules/AuthModule.html":{}}}],["social/providers/google",{"_index":261,"title":{},"body":{"modules/AuthModule.html":{}}}],["softdelete",{"_index":1039,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdelete(@query('id",{"_index":1053,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdelete(id",{"_index":1043,"title":{},"body":{"controllers/TagsController.html":{}}}],["softremove",{"_index":1065,"title":{},"body":{"injectables/TagsService.html":{}}}],["softremove(id",{"_index":1074,"title":{},"body":{"injectables/TagsService.html":{}}}],["source",{"_index":4,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["space",{"_index":81,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["spaces",{"_index":422,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["special",{"_index":539,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":656,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["split",{"_index":80,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["sponsors",{"_index":1421,"title":{},"body":{"index.html":{}}}],["src/.../active",{"_index":1448,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../app.module.ts",{"_index":1451,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth",{"_index":1305,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../auth.constants.ts",{"_index":1450,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.decorator.ts",{"_index":1449,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../create",{"_index":1317,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":1316,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../posttype.enum.ts",{"_index":1308,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../status.enum.ts",{"_index":1307,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":100,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":194,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":195,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:16",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:23",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":1255,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":246,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/config/jwt.config",{"_index":681,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"modules/UsersModule.html":{}}}],["src/auth/constants/auth.constants.ts",{"_index":1269,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/active",{"_index":923,"title":{},"body":{"controllers/PostController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/auth.decorator",{"_index":1228,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/auth/decorators/auth.decorator.ts",{"_index":1271,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dtos/refresh",{"_index":997,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["src/auth/dtos/signin.dto.ts",{"_index":1008,"title":{},"body":{"classes/SignInDto.html":{},"coverage.html":{}}}],["src/auth/dtos/signin.dto.ts:10",{"_index":1012,"title":{},"body":{"classes/SignInDto.html":{}}}],["src/auth/dtos/signin.dto.ts:6",{"_index":1010,"title":{},"body":{"classes/SignInDto.html":{}}}],["src/auth/enums/auth",{"_index":1229,"title":{},"body":{"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["src/auth/guards/access",{"_index":6,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["src/auth/guards/authentication.guard.ts",{"_index":274,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["src/auth/guards/authentication.guard.ts:16",{"_index":280,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/auth/guards/authentication.guard.ts:20",{"_index":281,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/auth/interfaces/active",{"_index":88,"title":{},"body":{"interfaces/ActiveUserData.html":{},"injectables/CreatePostProvider.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["src/auth/providers/bcrypt.provider.ts",{"_index":300,"title":{},"body":{"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["src/auth/providers/bcrypt.provider.ts:11",{"_index":306,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/bcrypt.provider.ts:6",{"_index":309,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/generate",{"_index":605,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["src/auth/providers/hashing.provider",{"_index":552,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["src/auth/providers/hashing.provider.ts",{"_index":710,"title":{},"body":{"injectables/HashingProvider.html":{},"coverage.html":{}}}],["src/auth/providers/hashing.provider.ts:6",{"_index":713,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/hashing.provider.ts:8",{"_index":712,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/refresh",{"_index":998,"title":{},"body":{"injectables/RefreshTokensProvider.html":{},"coverage.html":{}}}],["src/auth/providers/sign",{"_index":1013,"title":{},"body":{"injectables/SignInProvider.html":{},"coverage.html":{}}}],["src/auth/service/auth.service",{"_index":1154,"title":{},"body":{"injectables/UserService.html":{}}}],["src/auth/service/auth.service.ts",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/service/auth.service.ts:10",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/service/auth.service.ts:17",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/service/auth.service.ts:22",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/social/dtos/google",{"_index":700,"title":{},"body":{"classes/GoogleTokenDto.html":{},"coverage.html":{}}}],["src/auth/social/google",{"_index":660,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"coverage.html":{}}}],["src/auth/social/providers/google",{"_index":672,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["src/common/pagination/dtos/pagination",{"_index":646,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["src/common/pagination/interfaces/paginated.interface",{"_index":958,"title":{},"body":{"injectables/PostService.html":{}}}],["src/common/pagination/interfaces/paginated.interface.ts",{"_index":767,"title":{},"body":{"interfaces/Paginated.html":{},"coverage.html":{}}}],["src/common/pagination/pagination.module",{"_index":943,"title":{},"body":{"modules/PostModule.html":{}}}],["src/common/pagination/pagination.module.ts",{"_index":783,"title":{},"body":{"modules/PaginationModule.html":{}}}],["src/common/pagination/providers/pagination.provider",{"_index":957,"title":{},"body":{"injectables/PostService.html":{}}}],["src/common/pagination/providers/pagination.provider.ts",{"_index":785,"title":{},"body":{"injectables/PaginationProvider.html":{},"coverage.html":{}}}],["src/common/pagination/providers/pagination.provider.ts:15",{"_index":790,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["src/common/pagination/providers/pagination.provider.ts:9",{"_index":788,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["src/main.ts",{"_index":1274,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/meta",{"_index":469,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["src/post/dtos/create",{"_index":364,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/post/dtos/get",{"_index":636,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"coverage.html":{}}}],["src/post/dtos/patch",{"_index":835,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/post/enums/posttype.enum.ts",{"_index":1312,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/post/enums/status.enum.ts",{"_index":1309,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/post/post.controller.ts",{"_index":883,"title":{},"body":{"controllers/PostController.html":{},"coverage.html":{}}}],["src/post/post.controller.ts:17",{"_index":902,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:29",{"_index":895,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:41",{"_index":908,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:46",{"_index":898,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.entity",{"_index":732,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["src/post/post.entity.ts",{"_index":849,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/post/post.entity.ts:12",{"_index":860,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:18",{"_index":875,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:25",{"_index":863,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:33",{"_index":868,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:40",{"_index":869,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:46",{"_index":855,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:52",{"_index":866,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:59",{"_index":859,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:64",{"_index":865,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:74",{"_index":862,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:79",{"_index":853,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:86",{"_index":873,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.module.ts",{"_index":940,"title":{},"body":{"modules/PostModule.html":{}}}],["src/post/services/create",{"_index":473,"title":{},"body":{"injectables/CreatePostProvider.html":{},"coverage.html":{}}}],["src/post/services/post.service.ts",{"_index":946,"title":{},"body":{"injectables/PostService.html":{},"coverage.html":{}}}],["src/post/services/post.service.ts:16",{"_index":949,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/services/post.service.ts:31",{"_index":954,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/services/post.service.ts:50",{"_index":950,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/services/post.service.ts:54",{"_index":952,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/services/post.service.ts:74",{"_index":956,"title":{},"body":{"injectables/PostService.html":{}}}],["src/tags/dtos/create",{"_index":507,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service",{"_index":485,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostService.html":{}}}],["src/tags/providers/tags.service.ts",{"_index":1062,"title":{},"body":{"injectables/TagsService.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service.ts:12",{"_index":1070,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:18",{"_index":1073,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:28",{"_index":1071,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:33",{"_index":1075,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:8",{"_index":1067,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tag.entity",{"_index":879,"title":{},"body":{"entities/Post.html":{}}}],["src/tags/tag.entity.ts",{"_index":1024,"title":{},"body":{"entities/Tag.html":{},"coverage.html":{}}}],["src/tags/tag.entity.ts:15",{"_index":1032,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:23",{"_index":1035,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:29",{"_index":1029,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:35",{"_index":1034,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:42",{"_index":1030,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:45",{"_index":1026,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:48",{"_index":1036,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:51",{"_index":1028,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:56",{"_index":1033,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:7",{"_index":1031,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.controller.ts",{"_index":1038,"title":{},"body":{"controllers/TagsController.html":{},"coverage.html":{}}}],["src/tags/tags.controller.ts:10",{"_index":1041,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:15",{"_index":1042,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:19",{"_index":1045,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.module",{"_index":942,"title":{},"body":{"modules/PostModule.html":{}}}],["src/tags/tags.module.ts",{"_index":1058,"title":{},"body":{"modules/TagsModule.html":{}}}],["src/users/dtos/create",{"_index":342,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":652,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":845,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/interfaces/google",{"_index":704,"title":{},"body":{"classes/GoogleUser.html":{},"coverage.html":{}}}],["src/users/providers/create",{"_index":317,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/users/providers/find",{"_index":584,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"coverage.html":{}}}],["src/users/providers/user",{"_index":1097,"title":{},"body":{"injectables/UserCreateManyProvider.html":{},"coverage.html":{}}}],["src/users/providers/user.service",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreatePostProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["src/users/providers/user.service.ts",{"_index":1126,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/users/providers/user.service.ts:100",{"_index":1145,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/user.service.ts:104",{"_index":1146,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/user.service.ts:108",{"_index":1138,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/user.service.ts:22",{"_index":1137,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/user.service.ts:39",{"_index":1142,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/user.service.ts:71",{"_index":1148,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/user.service.ts:92",{"_index":1140,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/user.service.ts:96",{"_index":1139,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/user.entity",{"_index":619,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"entities/Post.html":{}}}],["src/users/user.entity.ts",{"_index":1084,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:13",{"_index":1087,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:21",{"_index":1090,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:28",{"_index":1086,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:34",{"_index":1091,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:41",{"_index":1088,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:45",{"_index":1094,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:7",{"_index":1089,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":1190,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:40",{"_index":1217,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:50",{"_index":1201,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:57",{"_index":1198,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:63",{"_index":1219,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":250,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostModule.html":{}}}],["src/users/users.module.ts",{"_index":1253,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":1338,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1341,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":1343,"title":{},"body":{"index.html":{}}}],["startdate",{"_index":639,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{}}}],["started",{"_index":1319,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1331,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1264,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":276,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["status",{"_index":373,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["stay",{"_index":1407,"title":{},"body":{"index.html":{}}}],["steps",{"_index":1354,"title":{},"body":{"index.html":{}}}],["story",{"_index":1313,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["straightforward",{"_index":1368,"title":{},"body":{"index.html":{}}}],["string",{"_index":35,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/BcryptProvider.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"entities/User.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["string(error",{"_index":1121,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["sub",{"_index":93,"title":{},"body":{"interfaces/ActiveUserData.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["successfully",{"_index":930,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["successfully'})@patch",{"_index":907,"title":{},"body":{"controllers/PostController.html":{}}}],["successfully'})@post",{"_index":894,"title":{},"body":{"controllers/PostController.html":{}}}],["summary",{"_index":929,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":1389,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1437,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["t",{"_index":615,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["table",{"_index":1127,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1279,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":497,"title":{"entities/Tag.html":{}},"body":{"injectables/CreatePostProvider.html":{},"entities/Post.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["tag.dto",{"_index":1046,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tag.dto.ts",{"_index":508,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["tag.dto.ts:10",{"_index":514,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:22",{"_index":517,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:28",{"_index":510,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:33",{"_index":516,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:39",{"_index":512,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.entity",{"_index":1060,"title":{},"body":{"modules/TagsModule.html":{},"injectables/TagsService.html":{}}}],["tag.posts",{"_index":871,"title":{},"body":{"entities/Post.html":{}}}],["tags",{"_index":374,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"entities/Post.html":{},"injectables/PostService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tags.controller",{"_index":1059,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags.length",{"_index":494,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostService.html":{}}}],["tags/providers/tags.service",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["tags/tags.module",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["tagscontroller",{"_index":1037,"title":{"controllers/TagsController.html":{}},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tagsmodule",{"_index":121,"title":{"modules/TagsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules.html":{},"overview.html":{}}}],["tagsrepository",{"_index":1068,"title":{},"body":{"injectables/TagsService.html":{}}}],["tagsservice",{"_index":141,"title":{"injectables/TagsService.html":{}},"body":{"modules/AppModule.html":{},"injectables/CreatePostProvider.html":{},"injectables/PostService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{},"overview.html":{}}}],["take",{"_index":800,"title":{},"body":{"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"index.html":{}}}],["target",{"_index":575,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["test",{"_index":1346,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":1349,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1348,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1344,"title":{},"body":{"index.html":{}}}],["text",{"_index":854,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["thanks",{"_index":1420,"title":{},"body":{"index.html":{}}}],["this.accesstokenguard",{"_index":286,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.appservice.gethello",{"_index":104,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.isauth",{"_index":1163,"title":{},"body":{"injectables/UserService.html":{}}}],["this.authservice.refreshtoken(refreshtokendto",{"_index":237,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signin(signindto",{"_index":234,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authtypeguardmap[type]).flat",{"_index":294,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.configservice.get(\"s3_bucket",{"_index":1166,"title":{},"body":{"injectables/UserService.html":{}}}],["this.creategoogleuserprovider.creategoogleuser(googleuser",{"_index":1188,"title":{},"body":{"injectables/UserService.html":{}}}],["this.createpostprovider.createpost(createpostdto",{"_index":968,"title":{},"body":{"injectables/PostService.html":{}}}],["this.createusersprovider.createuser(createuserdto",{"_index":1184,"title":{},"body":{"injectables/UserService.html":{}}}],["this.datasource.createqueryrunner",{"_index":1107,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["this.extractrequestfromheader(request",{"_index":60,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.findonebygoogleidprvider.findonebygoogleid(googleid",{"_index":1187,"title":{},"body":{"injectables/UserService.html":{}}}],["this.findoneuserbyemailprovider.findonebyemail(email",{"_index":1186,"title":{},"body":{"injectables/UserService.html":{}}}],["this.generatetokenprovider.generatetoken(user",{"_index":1007,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["this.generatetokensprovider.generatetoken(newuser",{"_index":698,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.generatetokensprovider.generatetoken(user",{"_index":696,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/SignInProvider.html":{}}}],["this.googleauthenticationservice.authenticate(googletokendto",{"_index":671,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["this.hashingprovider.comparepassword(signindto.password",{"_index":1020,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.hashingprovider.hashpassword(createuserdto.password",{"_index":569,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.jwtconfiguration",{"_index":67,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.jwtconfiguration.accesstokenttl",{"_index":631,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtconfiguration.audience",{"_index":623,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["this.jwtconfiguration.googleclientid",{"_index":683,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.jwtconfiguration.googleclientsecret",{"_index":685,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.jwtconfiguration.issuer",{"_index":625,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["this.jwtconfiguration.refreshtokenttl",{"_index":634,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtconfiguration.secret",{"_index":627,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["this.jwtservice.signasync",{"_index":621,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtservice.verifyasync(token",{"_index":66,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.jwtservice.verifyasync>(refreshtokendto.refreshtoken",{"_index":1005,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["this.metaoptionrepository.create(createpostdto.metaoptions",{"_index":489,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["this.metaoptionrepository.create(createpostmetaoptionsdto",{"_index":764,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionrepository.delete(post.metaoptions.id",{"_index":971,"title":{},"body":{"injectables/PostService.html":{}}}],["this.metaoptionrepository.find",{"_index":973,"title":{},"body":{"injectables/PostService.html":{}}}],["this.metaoptionrepository.save(metaoption",{"_index":765,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionrepository.save(metaoptions",{"_index":499,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["this.metaoptionservice.create(createpostmetaoptiondto",{"_index":749,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["this.oauthclient",{"_index":686,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.oauthclient.verifyidtoken",{"_index":689,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.paginationprovider.paginatequery",{"_index":966,"title":{},"body":{"injectables/PostService.html":{}}}],["this.postrepository",{"_index":967,"title":{},"body":{"injectables/PostService.html":{}}}],["this.postrepository.create",{"_index":498,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["this.postrepository.delete(id",{"_index":970,"title":{},"body":{"injectables/PostService.html":{}}}],["this.postrepository.find",{"_index":962,"title":{},"body":{"injectables/PostService.html":{}}}],["this.postrepository.findoneby",{"_index":969,"title":{},"body":{"injectables/PostService.html":{}}}],["this.postrepository.save(post",{"_index":501,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostService.html":{}}}],["this.postservice.createpost(createpostdto",{"_index":932,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.delete(id",{"_index":936,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.findall(postquery",{"_index":928,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.update(patchpostdto",{"_index":934,"title":{},"body":{"controllers/PostController.html":{}}}],["this.reflector.getallandoverride(auth_type_key",{"_index":289,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.refreshtokenprovider.refreshtokens(refreshtokendto",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.request.headers.host",{"_index":803,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.request.protocol",{"_index":802,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.signinprovider.signin(signindto",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.signtoken(user.id",{"_index":633,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.signtoken>(user.id",{"_index":630,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.tagsrepository.create(createtagdto",{"_index":1077,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.delete(id",{"_index":1082,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.find",{"_index":1080,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.save(tag",{"_index":1078,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.softdelete(id",{"_index":1083,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsservice.createtags(createtagdto",{"_index":1049,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.delete(id",{"_index":1051,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.findmultpletags(createpostdto.tags",{"_index":491,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["this.tagsservice.findmultpletags(patchpostdto.tags",{"_index":976,"title":{},"body":{"injectables/PostService.html":{}}}],["this.tagsservice.softremove(id",{"_index":1054,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.userreposiory.findoneby",{"_index":600,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["this.userrepository.create",{"_index":568,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.userrepository.create(googleuser",{"_index":335,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["this.userrepository.findone",{"_index":555,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.userrepository.findoneby",{"_index":591,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"injectables/UserService.html":{}}}],["this.userrepository.save(newuser",{"_index":570,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.userrepository.save(user",{"_index":336,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["this.userscreatemanyprovider.createmany(createmanyusersdto",{"_index":1185,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.creategoogleuser",{"_index":697,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.userservice.createmany(createmanyusersdto",{"_index":1248,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.createuser(createuserdto",{"_index":1246,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.findall(getusersparamdto",{"_index":1240,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.findonebyemail(signindto.email",{"_index":1017,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.userservice.findonebygoogleid(googleid",{"_index":695,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.userservice.findonebyid(+userid",{"_index":960,"title":{},"body":{"injectables/PostService.html":{}}}],["this.userservice.findonebyid(sub",{"_index":1006,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["this.userservice.findonebyid(user.sub",{"_index":492,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["throw",{"_index":61,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["thrown",{"_index":408,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["time",{"_index":1403,"title":{},"body":{"index.html":{}}}],["timestamp",{"_index":864,"title":{},"body":{"entities/Post.html":{}}}],["title",{"_index":375,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["token",{"_index":59,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/GoogleTokenDto.html":{}}}],["token.dto",{"_index":229,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["token.dto.ts",{"_index":701,"title":{},"body":{"classes/GoogleTokenDto.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["token.dto.ts:6",{"_index":703,"title":{},"body":{"classes/GoogleTokenDto.html":{},"classes/RefreshTokenDto.html":{}}}],["token.guard",{"_index":157,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["token.guard.ts",{"_index":7,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{}}}],["token.guard.ts:10",{"_index":20,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:15",{"_index":28,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:33",{"_index":34,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["tokens",{"_index":235,"title":{},"body":{"controllers/AuthController.html":{}}}],["tokens')@httpcode(httpstatus.ok)@auth(authtype.none",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{}}}],["tokens.provider",{"_index":257,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["tokens.provider.ts",{"_index":606,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{},"coverage.html":{}}}],["tokens.provider.ts:11",{"_index":1001,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["tokens.provider.ts:17",{"_index":616,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["tokens.provider.ts:20",{"_index":1003,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["tokens.provider.ts:30",{"_index":612,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["tokens.provider.ts:9",{"_index":610,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["totalitems",{"_index":771,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["totalpages",{"_index":773,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["touch",{"_index":1428,"title":{},"body":{"index.html":{}}}],["transaction",{"_index":1120,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["transformer",{"_index":359,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{},"dependencies.html":{}}}],["true",{"_index":72,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{}}}],["true})@apipropertyoptional({description",{"_index":431,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@jointable",{"_index":872,"title":{},"body":{"entities/Post.html":{}}}],["true})@type(undefined",{"_index":352,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{}}}],["try",{"_index":63,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["twitter",{"_index":1433,"title":{},"body":{"index.html":{}}}],["two",{"_index":76,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["type",{"_index":24,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["type.ts",{"_index":1306,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typeof",{"_index":576,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["typeorm",{"_index":329,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"entities/MetaOption.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"entities/Post.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([metaoption",{"_index":755,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["typeormmodule.forfeature([post",{"_index":945,"title":{},"body":{"modules/PostModule.html":{}}}],["typeormmodule.forfeature([tag",{"_index":1061,"title":{},"body":{"modules/TagsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":1259,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":848,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":1330,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":40,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["unauthorizedexception(\"incorrect",{"_index":1023,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["unauthorizedexception(\"use",{"_index":603,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["unauthorizedexception(error",{"_index":699,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["undefined",{"_index":36,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"entities/Post.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["undefined})@isnotempty()@isarray()@validatenested({each",{"_index":351,"title":{},"body":{"classes/CreateManyUsersDTO.html":{}}}],["undefined})@isoptional()@validatenested({each",{"_index":390,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unique",{"_index":503,"title":{},"body":{"injectables/CreatePostProvider.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["unit",{"_index":1345,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["unlicensed",{"_index":1446,"title":{},"body":{"properties.html":{}}}],["update",{"_index":948,"title":{},"body":{"injectables/PostService.html":{}}}],["update(patchpostdto",{"_index":955,"title":{},"body":{"injectables/PostService.html":{}}}],["updated",{"_index":843,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostController.html":{}}}],["updated'})@isint()@isnotempty",{"_index":840,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["updatedate",{"_index":718,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatedatecolumn",{"_index":730,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatepost",{"_index":886,"title":{},"body":{"controllers/PostController.html":{}}}],["updatepost(@body",{"_index":933,"title":{},"body":{"controllers/PostController.html":{}}}],["updatepost(patchpostdto",{"_index":903,"title":{},"body":{"controllers/PostController.html":{}}}],["updates",{"_index":904,"title":{},"body":{"controllers/PostController.html":{},"index.html":{}}}],["uppercase",{"_index":536,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["url",{"_index":413,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["url'})@maxlength(256",{"_index":423,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["url(this.request.url",{"_index":805,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["useclass",{"_index":192,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["usefactory",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards",{"_index":1224,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(accesstokenguard",{"_index":1232,"title":{},"body":{"controllers/UsersController.html":{}}}],["user",{"_index":89,"title":{"entities/User.html":{}},"body":{"interfaces/ActiveUserData.html":{},"modules/AppModule.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDTO.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetUsersParamDto.html":{},"injectables/GoogleAuthenticationService.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.decorator",{"_index":924,"title":{},"body":{"controllers/PostController.html":{}}}],["user.decorator.ts",{"_index":1270,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":358,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"injectables/CreateUserProvider.html":{},"classes/PatchUserDto.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["user.dto.ts",{"_index":344,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:14",{"_index":526,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:18",{"_index":353,"title":{},"body":{"classes/CreateManyUsersDTO.html":{}}}],["user.dto.ts:20",{"_index":522,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:28",{"_index":541,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:8",{"_index":524,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":632,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["user.entity",{"_index":330,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["user.interface",{"_index":333,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/UserService.html":{}}}],["user.interface.ts",{"_index":705,"title":{},"body":{"classes/GoogleUser.html":{},"coverage.html":{}}}],["user.interface.ts:2",{"_index":706,"title":{},"body":{"classes/GoogleUser.html":{}}}],["user.interface.ts:3",{"_index":707,"title":{},"body":{"classes/GoogleUser.html":{}}}],["user.interface.ts:4",{"_index":709,"title":{},"body":{"classes/GoogleUser.html":{}}}],["user.interface.ts:5",{"_index":708,"title":{},"body":{"classes/GoogleUser.html":{}}}],["user.password",{"_index":1021,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["user.posts",{"_index":851,"title":{},"body":{"entities/Post.html":{}}}],["user.provider",{"_index":1158,"title":{},"body":{"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["user.provider.ts",{"_index":319,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["user.provider.ts:14",{"_index":327,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["user.provider.ts:16",{"_index":550,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.provider.ts:8",{"_index":323,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["user.provider.ts:9",{"_index":548,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.service.ts",{"_index":1178,"title":{},"body":{"injectables/UserService.html":{}}}],["user?.[field",{"_index":1457,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usercreatemanyprovider",{"_index":1096,"title":{"injectables/UserCreateManyProvider.html":{}},"body":{"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["userid",{"_index":617,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["username",{"_index":182,"title":{},"body":{"modules/AppModule.html":{}}}],["userreposiory",{"_index":597,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["userrepository",{"_index":324,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/UserService.html":{}}}],["users",{"_index":345,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/GetUsersParamDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["users.controller",{"_index":1254,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/user.entity",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.module",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":1189,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userscreatemanyprovider",{"_index":1134,"title":{},"body":{"injectables/UserService.html":{}}}],["userservice",{"_index":265,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/CreatePostProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["usersmodule",{"_index":122,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["uses",{"_index":420,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["using",{"_index":1151,"title":{},"body":{"injectables/UserService.html":{},"index.html":{}}}],["validatenested",{"_index":356,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{}}}],["validation",{"_index":407,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validationpipe",{"_index":1225,"title":{},"body":{"controllers/UsersController.html":{}}}],["validationschema",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":357,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GoogleTokenDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"dependencies.html":{}}}],["value",{"_index":821,"title":{},"body":{"classes/PaginationQueryDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":394,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["varchar",{"_index":856,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["variable",{"_index":1266,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1447,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":1444,"title":{},"body":{"properties.html":{}}}],["video",{"_index":1396,"title":{},"body":{"index.html":{}}}],["visit",{"_index":1386,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":1399,"title":{},"body":{"index.html":{}}}],["void",{"_index":580,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["want",{"_index":1216,"title":{},"body":{"controllers/UsersController.html":{}}}],["watch",{"_index":1339,"title":{},"body":{"index.html":{}}}],["website",{"_index":1431,"title":{},"body":{"index.html":{}}}],["without",{"_index":421,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["working",{"_index":1385,"title":{},"body":{"index.html":{}}}],["world",{"_index":197,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":1410,"title":{},"body":{"index.html":{}}}],["yes",{"_index":618,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["you'd",{"_index":1424,"title":{},"body":{"index.html":{}}}],["you're",{"_index":1350,"title":{},"body":{"index.html":{}}}],["z0",{"_index":415,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["z\\d@$!%*#?&]{8",{"_index":530,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*#?&])[a",{"_index":529,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":528,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"guards/AccessTokenGuard.html":{"url":"guards/AccessTokenGuard.html","title":"guard - AccessTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/access-token.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                extractRequestFromHeader\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/access-token.guard.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/access-token.guard.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractRequestFromHeader\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractRequestFromHeader(request: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/access-token.guard.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Inject, Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { Observable } from 'rxjs';\nimport jwtConfig from '../config/jwt.config';\nimport { Request } from 'express';\nimport { REQUEST_USER_KEY } from '../constants/auth.constants';\n\n@Injectable()\nexport class AccessTokenGuard implements CanActivate {\n\n  constructor(private readonly jwtService: JwtService,\n    @Inject(jwtConfig.KEY) private readonly jwtConfiguration: ConfigType\n  ) { }\n  async canActivate(\n    context: ExecutionContext,\n  ): Promise {\n    const request = context.switchToHttp().getRequest();\n    const token = this.extractRequestFromHeader(request)\n    if (!token) {\n      throw new UnauthorizedException(\"\")\n    }\n\n    try {\n      const payload = await this.jwtService.verifyAsync(token, this.jwtConfiguration)\n      request[REQUEST_USER_KEY] = payload\n    } catch (error) {\n      throw new UnauthorizedException()\n    }\n    return true;\n  }\n\n  private extractRequestFromHeader(request: Request): string | undefined {\n    const [_, token] = request.headers.authorization?.split(' ') ?? [] //this line get the two part of the header bearer and token when split the string from the space between them\n    return token;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ActiveUserData.html":{"url":"interfaces/ActiveUserData.html","title":"interface - ActiveUserData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ActiveUserData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/active-user-data.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ActiveUserData {\n\n    //sub is the id of the user in the database\n    sub: number;\n    email: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) { }\n\n  /* @Get()\n   getHello(): string {\n     return this.appService.getHello();\n   }*/\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nPostModule\n\nPostModule\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            MetaOptionsModule\n                        \n                        \n                            PaginationModule\n                        \n                        \n                            PostModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostModule } from './post/post.module';\nimport { PostService } from './post/services/post.service';\nimport { AuthModule } from './auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './users/user.entity';\nimport { TagsModule } from './tags/tags.module';\nimport { MetaOptionsModule } from './meta-options/meta-options.module';\nimport { TagsService } from './tags/providers/tags.service';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { PaginationModule } from './common/pagination/pagination.module';\nimport appConfig from './config/app.config';\nimport databaseConfig from './config/database.config';\nimport environmentValidation from './config/environment.validation';\nimport { JwtModule } from '@nestjs/jwt';\nimport jwtConfig from './auth/config/jwt.config';\nimport { APP_GUARD } from '@nestjs/core';\nimport { AccessTokenGuard } from './auth/guards/access-token.guard';\nimport { AuthenticationGuard } from './auth/guards/authentication.guard';\nimport { CreatePostProvider } from './post/services/create-post.provider';\n\nconst ENV = process.env.NODE_ENV;\n@Module({\n  imports: [UsersModule, PostModule, AuthModule, TagsModule, ConfigModule.forRoot({\n    isGlobal: true,\n    //envFilePath: ['.env.development']\n    envFilePath: !ENV ? '.env' : `.env.${ENV}`,\n    load: [appConfig, databaseConfig],\n    validationSchema: environmentValidation\n  }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        //entities: [User],\n        autoLoadEntities: configService.get('database.autoLoadEntities'),\n        synchronize: configService.get('database.synchronize'),\n        port: +configService.get('database.port'),\n        username: configService.get('database.user'),\n        password: configService.get('database.password'),\n        host: configService.get('database.host'),\n        database: configService.get('database.name'),\n      })\n\n    }),\n\n    ConfigModule.forFeature(jwtConfig),\n    JwtModule.registerAsync(jwtConfig.asProvider()),\n    TagsModule,\n    MetaOptionsModule,\n    PaginationModule],\n  controllers: [AppController],\n  providers: [AppService,\n    {\n      provide: APP_GUARD,\n      useClass: AuthenticationGuard\n    },\n    AccessTokenGuard,\n\n  ],\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World NestJs!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                refreshToken\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                            Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshToken(refreshTokenDto: RefreshTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('refresh-tokens')@HttpCode(HttpStatus.OK)@Auth(AuthType.none)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshTokenDto\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signinDto: SignInDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('sign-in')@HttpCode(HttpStatus.OK)@Auth(AuthType.none)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signinDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, HttpCode, HttpStatus, Post } from '@nestjs/common';\nimport { AuthService } from './service/auth.service';\nimport { SignInDto } from './dtos/signin.dto';\nimport { Auth } from './decorators/auth.decorator';\nimport { AuthType } from './enums/auth-type';\nimport { RefreshTokenDto } from './dtos/refresh-token.dto';\n\n@Controller('auth')\nexport class AuthController {\n\n    constructor(private readonly authService: AuthService) { }\n\n    @Post('sign-in')\n    @HttpCode(HttpStatus.OK)\n    @Auth(AuthType.none)\n    public async signIn(@Body() signinDto: SignInDto) {\n        return this.authService.signIn(signinDto)\n    }\n\n    @Post('refresh-tokens')\n    @HttpCode(HttpStatus.OK)\n    @Auth(AuthType.none)\n    public async refreshToken(@Body() refreshTokenDto: RefreshTokenDto) {\n        return this.authService.refreshToken(refreshTokenDto)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nHashingProvider \n\nHashingProvider \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGenerateTokensProvider\n\nGenerateTokensProvider\n\nAuthModule -->\n\nGenerateTokensProvider->AuthModule\n\n\n\n\n\nGoogleAuthenticationService\n\nGoogleAuthenticationService\n\nAuthModule -->\n\nGoogleAuthenticationService->AuthModule\n\n\n\n\n\nRefreshTokensProvider\n\nRefreshTokensProvider\n\nAuthModule -->\n\nRefreshTokensProvider->AuthModule\n\n\n\n\n\nSignInProvider\n\nSignInProvider\n\nAuthModule -->\n\nSignInProvider->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            GenerateTokensProvider\n                        \n                        \n                            GoogleAuthenticationService\n                        \n                        \n                            RefreshTokensProvider\n                        \n                        \n                            SignInProvider\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                        \n                            GoogleAuthenticationController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            HashingProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthService } from './service/auth.service';\nimport { AuthController } from './auth.controller';\nimport { UsersModule } from 'src/users/users.module';\nimport { HashingProvider } from './providers/hashing.provider';\nimport { BcryptProvider } from './providers/bcrypt.provider';\nimport { SignInProvider } from './providers/sign-in.provider';\nimport { ConfigModule } from '@nestjs/config';\nimport jwtConfig from './config/jwt.config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { GenerateTokensProvider } from './providers/generate-tokens.provider';\nimport { RefreshTokensProvider } from './providers/refresh-tokens.provider';\nimport { GoogleAuthenticationController } from './social/google-authentication.controller';\nimport { GoogleAuthenticationService } from './social/providers/google-authentication.service';\n\n@Module({\n  providers: [AuthService, {\n    provide: HashingProvider,\n    useClass: BcryptProvider\n  }, SignInProvider, GenerateTokensProvider, RefreshTokensProvider, GoogleAuthenticationService],\n  controllers: [AuthController, GoogleAuthenticationController],\n  imports: [forwardRef(() => UsersModule),\n  ConfigModule.forFeature(jwtConfig),\n  JwtModule.registerAsync(jwtConfig.asProvider())],\n  exports: [AuthService, HashingProvider]\n})\nexport class AuthModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/service/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                refreshToken\n                            \n                            \n                                    Public\n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, signInProvider: SignInProvider, refreshTokenProvider: RefreshTokensProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/service/auth.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        signInProvider\n                                                  \n                                                        \n                                                                        SignInProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        refreshTokenProvider\n                                                  \n                                                        \n                                                                        RefreshTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshToken(refreshTokenDto: RefreshTokenDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/service/auth.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshTokenDto\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/service/auth.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { UserService } from 'src/users/providers/user.service';\nimport { SignInDto } from '../dtos/signin.dto';\nimport { SignInProvider } from '../providers/sign-in.provider';\nimport { RefreshTokenDto } from '../dtos/refresh-token.dto';\nimport { GenerateTokensProvider } from '../providers/generate-tokens.provider';\nimport { RefreshTokensProvider } from '../providers/refresh-tokens.provider';\n\n@Injectable()\nexport class AuthService {\n\n    constructor(@Inject(forwardRef(() => UserService)) private readonly userService: UserService,\n        private readonly signInProvider: SignInProvider,\n        private readonly refreshTokenProvider: RefreshTokensProvider\n\n    ) { }\n    public async signIn(signInDto: SignInDto) {\n        return await this.signInProvider.signIn(signInDto)\n    }\n\n\n    public async refreshToken(refreshTokenDto: RefreshTokenDto) {\n        return await this.refreshTokenProvider.refreshTokens(refreshTokenDto)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthenticationGuard.html":{"url":"guards/AuthenticationGuard.html","title":"guard - AuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/authentication.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                authTypeGuardMap\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                defaultAuthType\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, accessTokenGuard: AccessTokenGuard)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/authentication.guard.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accessTokenGuard\n                                                  \n                                                        \n                                                                        AccessTokenGuard\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/authentication.guard.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable, UnauthorizedException } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Observable } from 'rxjs';\nimport { AccessTokenGuard } from './access-token.guard';\nimport { AuthType } from '../enums/auth-type';\nimport { AUTH_TYPE_KEY } from '../constants/auth.constants';\n\n@Injectable()\nexport class AuthenticationGuard implements CanActivate {\n\n  private static readonly defaultAuthType = AuthType.Bearer;\n\n  private readonly authTypeGuardMap: Record = {\n    [AuthType.Bearer]: this.accessTokenGuard,\n    [AuthType.none]: { canActivate: () => true }\n  }\n  constructor(private readonly reflector: Reflector,\n    private readonly accessTokenGuard: AccessTokenGuard\n  ) { }\n  async canActivate(\n    context: ExecutionContext,\n  ): Promise {\n\n    const authTypes = this.reflector.getAllAndOverride(AUTH_TYPE_KEY, [context.getHandler(), context.getClass()]) ?? [AuthenticationGuard.defaultAuthType]\n    const guards = authTypes.map((type) => this.authTypeGuardMap[type]).flat()\n    const error = new UnauthorizedException()\n\n    for (const instance of guards) {\n      const canActivate = await Promise.resolve(\n\n        instance.canActivate(context)\n      ).catch((error) => {\n        eror: error;\n      })\n\n      if (canActivate) {\n        return true;\n      }\n    }\n    throw error;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BcryptProvider.html":{"url":"injectables/BcryptProvider.html","title":"injectable - BcryptProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BcryptProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/bcrypt.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                comparePassword\n                            \n                            \n                                    Public\n                                    Async\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        comparePassword\n                        \n                    \n                \n            \n            \n                \ncomparePassword(data: string | Buffer, encrypted: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.provider.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encrypted\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(data: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.provider.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { HashingProvider } from './hashing.provider';\nimport * as bcrypt from 'bcrypt';\n@Injectable()\nexport class BcryptProvider implements HashingProvider {\n    public async hashPassword(data: string | Buffer): Promise {\n        const salt = await bcrypt.genSalt();\n        return bcrypt.hash(data, salt)\n\n    }\n    comparePassword(data: string | Buffer, encrypted: string): Promise {\n        return bcrypt.compare(data, encrypted)\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateGoogleUserProvider.html":{"url":"injectables/CreateGoogleUserProvider.html","title":"injectable - CreateGoogleUserProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateGoogleUserProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/create-google-user.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createGoogleUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/create-google-user.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createGoogleUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createGoogleUser(googleUser: GoogleUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/create-google-user.provider.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleUser\n                                            \n                                                            GoogleUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { GoogleUser } from '../interfaces/google-user.interface';\n\n@Injectable()\nexport class CreateGoogleUserProvider {\n\n    constructor(\n        @InjectRepository(User) private userRepository: Repository\n    ) { }\n\n    public async createGoogleUser(googleUser: GoogleUser) {\n        try {\n            const user = this.userRepository.create(googleUser);\n            return await this.userRepository.save(user)\n        } catch (error) {\n            throw new ConflictException(error, {\n                description: 'could not create a new user'\n            })\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateManyUsersDTO.html":{"url":"classes/CreateManyUsersDTO.html","title":"class - CreateManyUsersDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateManyUsersDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-many-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateUserDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'array', required: true, items: undefined})@IsNotEmpty()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-many-user.dto.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsNotEmpty, ValidateNested } from \"class-validator\";\nimport { CreateUserDto } from \"./create-user.dto\";\nimport { Type } from \"class-transformer\";\nimport { ApiProperty } from \"@nestjs/swagger\";\n\nexport class CreateManyUsersDTO {\n    @ApiProperty({\n        type: 'array',\n        required: true,\n        items: {\n            type: 'User'\n        }\n    })\n    @IsNotEmpty()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CreateUserDto)\n    users: CreateUserDto[]\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dtos/create-post.dtos.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({description: 'This is the content of the post', example: 'the post content'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsUrl()@MaxLength(1024)@ApiPropertyOptional({description: 'featured image for your blog post', example: 'http://localhost.com/images/image1.jpg'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionsDto | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ApiPropertyOptional({type: 'object', required: false, items: undefined})@IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:115\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(postType)@IsNotEmpty()@ApiProperty({enum: postType, description: 'Possible values, 'POST', 'PAGE','STORY','SERIES''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsISO8601()@IsOptional()@ApiPropertyOptional({description: 'The date on which the blog post is published', example: '2024-03-16T07:46:32+0000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsJSON()@ApiPropertyOptional({description: 'Serialize your JSON object else a validation error will be thrown', example: '{\n \"@context\": \"https://schema.org\",\n \"@type\": \"Person\"\n}'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty({description: 'For example - 'my-url'', example: 'my-blog-post'})@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url'})@MaxLength(256)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(postStatus)@IsNotEmpty()@ApiProperty({enum: postStatus, description: ' Possible values, 'DRAFT', 'SCHEDULED','REVIEW', 'PUBLISHED''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()@IsInt({each: true})@ApiPropertyOptional({description: 'Array of ids of tags', example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'This is a title', description: 'this is the title of the blog post'})@IsString()@MinLength(4)@MaxLength(512)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsEnum, IsInt, IsISO8601, IsJSON, IsNotEmpty, IsOptional, IsString, IsUrl, Matches, MaxLength, MinLength, ValidateNested } from \"class-validator\";\nimport { postType } from \"../enums/postType.enum\";\nimport { postStatus } from \"../enums/status.enum\";\nimport { CreatePostMetaOptionsDto } from \"../../meta-options/dtos/create-post-meta-option.dtos\";\nimport { Type } from \"class-transformer\";\nimport { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\n\nexport class CreatePostDto {\n    @ApiProperty({\n        example: \"This is a title\",\n        description: \"this is the title of the blog post\"\n    })\n    @IsString()\n    @MinLength(4)\n    @MaxLength(512)\n    @IsNotEmpty()\n    title: string;\n\n    @IsEnum(postType)\n    @IsNotEmpty()\n    @ApiProperty({\n        enum: postType,\n        description: \"Possible values, 'POST', 'PAGE','STORY','SERIES'\",\n    })\n    postType: postType;\n    @IsString()\n    @IsOptional()\n    @ApiPropertyOptional({\n        description: \"This is the content of the post\",\n        example: \"the post content\"\n    })\n    content?: string;\n\n    @IsString()\n    @IsNotEmpty()\n    @ApiProperty({\n        description: \"For example - 'my-url'\",\n        example: \"my-blog-post\"\n    })\n    @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n        message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url'\n    })\n    @MaxLength(256)\n    slug: string;\n\n\n    @IsEnum(postStatus)\n    @IsNotEmpty()\n    @ApiProperty({\n        enum: postStatus,\n        description: \" Possible values, 'DRAFT', 'SCHEDULED','REVIEW', 'PUBLISHED'\"\n    })\n    status: postStatus;\n\n    @IsOptional()\n    @IsJSON()\n    @ApiPropertyOptional({\n        description: \"Serialize your JSON object else a validation error will be thrown\",\n        example: \"{\\r\\n \\\"@context\\\": \\\"https:\\/\\/schema.org\\\",\\r\\n \\\"@type\\\": \\\"Person\\\"\\r\\n}\"\n    })\n    schema?: string;\n\n\n    @IsOptional()\n    @IsUrl()\n    @MaxLength(1024)\n    @ApiPropertyOptional({\n        description: \"featured image for your blog post\",\n        example: \"http://localhost.com/images/image1.jpg\"\n    })\n    featuredImageUrl?: string;\n\n\n    @IsISO8601()\n    @IsOptional()\n    @ApiPropertyOptional({\n        description: \"The date on which the blog post is published\",\n        example: \"2024-03-16T07:46:32+0000\",\n    })\n    publishOn?: Date;\n\n\n    @IsOptional()\n    @IsArray()\n    @IsInt({\n        each: true\n    })\n    @ApiPropertyOptional({\n        description: \"Array of ids of tags\",\n        example: [1, 2],\n    })\n    tags?: number[];\n\n\n\n    @IsOptional()\n    @ApiPropertyOptional({\n        type: 'object',\n        required: false,\n        items: {\n            type: 'object',\n            properties: {\n                metaValue: {\n                    type: 'json',\n                    description: 'The metaValue is JSON string',\n                    example: '{\"sidebarEnabled\":true}'\n                }\n            }\n        }\n    })\n\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => CreatePostMetaOptionsDto)\n    metaOptions?: CreatePostMetaOptionsDto | null;\n\n    /*@IsInt()\n    @IsNotEmpty()\n    @ApiProperty({\n        type: 'integer',\n        required: true,\n        example: 1\n    })\n    authorId: number;*/\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto.html":{"url":"classes/CreatePostMetaOptionsDto.html","title":"class - CreatePostMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/dtos/create-post-meta-option.dtos.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                metaValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/dtos/create-post-meta-option.dtos.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsJSON, IsNotEmpty, IsString } from \"class-validator\";\n\nexport class CreatePostMetaOptionsDto {\n    @IsNotEmpty()\n    @IsJSON()\n    metaValue: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreatePostProvider.html":{"url":"injectables/CreatePostProvider.html","title":"injectable - CreatePostProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreatePostProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/services/create-post.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createPost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postRepository: Repository, tagsService: TagsService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/post/services/create-post.provider.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tagsService\n                                                  \n                                                        \n                                                                        TagsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto, user: ActiveUserData)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/services/create-post.provider.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            ActiveUserData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, ConflictException, Injectable } from '@nestjs/common';\nimport { CreatePostDto } from '../dtos/create-post.dtos';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Post } from '../post.entity';\nimport { TagsService } from 'src/tags/providers/tags.service';\nimport { UserService } from 'src/users/providers/user.service';\nimport { ActiveUserData } from 'src/auth/interfaces/active-user-data.interface';\n\n@Injectable()\nexport class CreatePostProvider {\n\n    constructor(\n        @InjectRepository(Post) private readonly postRepository: Repository,\n        private readonly tagsService: TagsService,\n        private readonly userService: UserService,\n\n\n    ) { }\n    public async createPost(createPostDto: CreatePostDto, user: ActiveUserData) {\n        //let metaOptions = createPostDto.metaOptions ? this.metaOptionRepository.create(createPostDto.metaOptions) : null\n        let author = undefined;\n        let tags = undefined;\n        try {\n            tags = await this.tagsService.findMultpleTags(createPostDto.tags)\n            author = await this.userService.findOneById(user.sub);\n        } catch (error) {\n            throw new ConflictException(error)\n        }\n\n        if (createPostDto.tags.length === tags.length) {\n            throw new BadRequestException(\"please checks your tag  ids\")\n        }\n        let post = this.postRepository.create({\n            ...createPostDto,\n            author: author,\n            tags: tags\n        })\n        /*\n        if (metaOptions) {\n                    await this.metaOptionRepository.save(metaOptions);\n                }\n                if (metaOptions) {\n                    post.metaOptions = metaOptions\n                }*/\n        try {\n\n            return await this.postRepository.save(post)\n        } catch (error) {\n            throw new ConflictException(error, {\n                description: \" ensure post slug is unique inside and not duplicate\"\n            })\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagDto.html":{"url":"classes/CreateTagDto.html","title":"class - CreateTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/dtos/create-tag.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsUrl()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@MinLength(3)@IsNotEmpty()@MaxLength(256)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty({description: 'For example - 'my-url'', example: 'my-blog-post'})@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url'})@MaxLength(256)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsJSON, IsNotEmpty, IsOptional, IsString, IsUrl, Matches, MaxLength, MinLength } from \"class-validator\";\n\nexport class CreateTagDto {\n    @ApiProperty()\n    @IsString()\n    @MinLength(3)\n    @IsNotEmpty()\n    @MaxLength(256)\n    name: string;\n\n    @IsString()\n    @IsNotEmpty()\n    @ApiProperty({\n        description: \"For example - 'my-url'\",\n        example: \"my-blog-post\"\n    })\n    @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n        message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url'\n    })\n    @MaxLength(256)\n    slug: string;\n\n\n    @ApiPropertyOptional()\n    @IsOptional()\n    @IsString()\n    description?: string;\n\n    @ApiPropertyOptional()\n    @IsOptional()\n    @IsJSON()\n    schema?: string;\n\n    @ApiPropertyOptional()\n    @IsOptional()\n    @IsUrl()\n    @MaxLength(1024)\n    featuredImageUrl?: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsEmail()@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {message: 'Password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, one number, and one special character.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsOptional, IsString, Matches, MaxLength, MinLength } from \"class-validator\";\n\nexport class CreateUserDto {\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(3)\n    @MaxLength(96)\n    firstName: string;\n\n    @IsString()\n    @IsOptional()\n    @MinLength(3)\n    @MaxLength(96)\n    lastName?: string;\n\n    @IsString()\n    @IsNotEmpty()\n    @IsEmail()\n    @MaxLength(96)\n    email: string;\n\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(8)\n    @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {\n        message: 'Password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, one number, and one special character.'\n    })\n    password: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateUserProvider.html":{"url":"injectables/CreateUserProvider.html","title":"injectable - CreateUserProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateUserProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/create-user.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, hashingProvider: HashingProvider)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/create-user.provider.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/create-user.provider.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, forwardRef, Inject, Injectable, RequestTimeoutException } from '@nestjs/common';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { HashingProvider } from 'src/auth/providers/hashing.provider';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class CreateUserProvider {\n\n    constructor(\n        @InjectRepository(User) private readonly userRepository: Repository,\n        @Inject(forwardRef(() => HashingProvider)) private readonly hashingProvider: HashingProvider\n    ) { }\n\n    public async createUser(createUserDto: CreateUserDto) {\n        let existingUser = undefined;\n        try {\n            existingUser = await this.userRepository.findOne({\n                where: {\n                    email: createUserDto.email\n                }\n            })\n\n        } catch (error) {\n            throw new RequestTimeoutException('Unable to process your request at the moment please try later', {\n                description: 'Error connectiong to the database'\n            })\n        }\n\n        if (existingUser) {\n            throw new BadRequestException('The user already exists, please check your email.')\n        }\n        let newUser = this.userRepository.create({\n            ...createUserDto,\n            password: await this.hashingProvider.hashPassword(createUserDto.password)\n        });\n\n        try {\n            newUser = await this.userRepository.save(newUser)\n        } catch (err) {\n            throw new RequestTimeoutException('Unable to process your request at the moment please try later', {\n                description: 'Error connecting to the database'\n            })\n        }\n        return newUser\n    }\n}\nfunction InejectRepository(): (target: typeof CreateUserProvider, propertyKey: undefined, parameterIndex: 0) => void {\n    throw new Error('Function not implemented.');\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindOneByGoogleIdProvider.html":{"url":"injectables/FindOneByGoogleIdProvider.html","title":"injectable - FindOneByGoogleIdProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindOneByGoogleIdProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/find-one-by-google-id.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                findOneByGoogleId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/find-one-by-google-id.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByGoogleId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByGoogleId(googleId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/find-one-by-google-id.provider.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class FindOneByGoogleIdProvider {\n    constructor(\n        @InjectRepository(User) private readonly userRepository: Repository\n    ) { }\n\n    public async findOneByGoogleId(googleId: string) {\n        return this.userRepository.findOneBy({ googleId: googleId })\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindOneUserByEmailProvider.html":{"url":"injectables/FindOneUserByEmailProvider.html","title":"injectable - FindOneUserByEmailProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindOneUserByEmailProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/find-one-user-by-email.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                findOneByEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userReposiory: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/find-one-user-by-email.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userReposiory\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/find-one-user-by-email.provider.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, RequestTimeoutException, UnauthorizedException } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class FindOneUserByEmailProvider {\n\n    constructor(\n        @InjectRepository(User) private readonly userReposiory: Repository\n    ) { }\n\n    public async findOneByEmail(email: string) {\n        let user: User | undefined = undefined;\n\n        try {\n            user = await this.userReposiory.findOneBy({ email: email });\n        } catch (error) {\n            throw new RequestTimeoutException(error, {\n                description: 'could not fetch user'\n            })\n        }\n\n        if (!user) {\n            throw new UnauthorizedException(\"use does not exist\")\n        }\n        return user;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GenerateTokensProvider.html":{"url":"injectables/GenerateTokensProvider.html","title":"injectable - GenerateTokensProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GenerateTokensProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/generate-tokens.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                generateToken\n                            \n                            \n                                    Public\n                                    Async\n                                signToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtConfiguration: ConfigType<>, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/generate-tokens.provider.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        generateToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateToken(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/generate-tokens.provider.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    signToken(userId: number, expiresIn: number, payload?: T)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/generate-tokens.provider.ts:17\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                expiresIn\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport jwtConfig from '../config/jwt.config';\nimport { JwtService } from '@nestjs/jwt';\nimport { User } from 'src/users/user.entity';\nimport { ActiveUserData } from '../interfaces/active-user-data.interface';\n\n@Injectable()\nexport class GenerateTokensProvider {\n\n    constructor(\n        @Inject(jwtConfig.KEY) private readonly jwtConfiguration: ConfigType,\n        private readonly jwtService: JwtService\n    ) { }\n\n\n    public async signToken(userId: number, expiresIn: number, payload?: T) {\n        return await this.jwtService.signAsync({\n            sub: userId,\n            ...payload\n        }, {\n            audience: this.jwtConfiguration.audience,\n            issuer: this.jwtConfiguration.issuer,\n            secret: this.jwtConfiguration.secret,\n            expiresIn\n        })\n\n    }\n\n    public async generateToken(user: User) {\n        const [accessToken, refreshToken] = await Promise.all([\n            this.signToken>(user.id, this.jwtConfiguration.accessTokenTtl, { email: user.email }),\n\n            this.signToken(user.id, this.jwtConfiguration.refreshTokenTtl)\n        ])\n\n        return {\n            accessToken,\n            refreshToken\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPostBaseDto.html":{"url":"classes/GetPostBaseDto.html","title":"class - GetPostBaseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPostBaseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dtos/get-posts.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                endDate\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                startDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        endDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/get-posts.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        startDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/get-posts.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IntersectionType } from \"@nestjs/swagger\";\nimport { IsDate, IsOptional } from \"class-validator\";\nimport { PaginationQueryDto } from \"src/common/pagination/dtos/pagination-query.dto\";\n\nclass GetPostBaseDto {\n    @IsDate()\n    @IsOptional()\n    startDate?: Date;\n\n    @IsDate()\n    @IsOptional()\n    endDate?: Date;\n}\n\nexport class GetPostDto extends IntersectionType(GetPostBaseDto, PaginationQueryDto) {\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPostDto.html":{"url":"classes/GetPostDto.html","title":"class - GetPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dtos/get-posts.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            IntersectionType(GetPostBaseDto, PaginationQueryDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IntersectionType } from \"@nestjs/swagger\";\nimport { IsDate, IsOptional } from \"class-validator\";\nimport { PaginationQueryDto } from \"src/common/pagination/dtos/pagination-query.dto\";\n\nclass GetPostBaseDto {\n    @IsDate()\n    @IsOptional()\n    startDate?: Date;\n\n    @IsDate()\n    @IsOptional()\n    endDate?: Date;\n}\n\nexport class GetPostDto extends IntersectionType(GetPostBaseDto, PaginationQueryDto) {\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Ger user  with a specific id', example: 1234})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-param.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsInt, IsOptional } from \"class-validator\";\n\nexport class GetUsersParamDto {\n    @ApiPropertyOptional({\n        description: \"Ger user  with a specific id\",\n        example: 1234\n    })\n    @IsOptional()\n    @IsInt()\n    @Type(() => Number)\n    id?: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GoogleAuthenticationController.html":{"url":"controllers/GoogleAuthenticationController.html","title":"controller - GoogleAuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GoogleAuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/google-authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                google-authentication\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                authenticate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                        \n                    authenticate(googleTokenDto: GoogleTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/auth/social/google-authentication.controller.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleTokenDto\n                                            \n                                                            GoogleTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { GoogleAuthenticationService } from './providers/google-authentication.service';\nimport { GoogleTokenDto } from './dtos/google-token.dto';\n\n@Controller('google-authentication')\nexport class GoogleAuthenticationController {\n\n    constructor(private readonly googleAuthenticationService: GoogleAuthenticationService) { }\n\n\n    @Post()\n    public authenticate(@Body() googleTokenDto: GoogleTokenDto) {\n        return this.googleAuthenticationService.authenticate(googleTokenDto)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleAuthenticationService.html":{"url":"injectables/GoogleAuthenticationService.html","title":"injectable - GoogleAuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleAuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/providers/google-authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                oauthClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                authenticate\n                            \n                            \n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, generateTokensProvider: GenerateTokensProvider, userService: UserService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/social/providers/google-authentication.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTokensProvider\n                                                  \n                                                        \n                                                                        GenerateTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                        \n                    authenticate(googleTokenDto: GoogleTokenDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/social/providers/google-authentication.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleTokenDto\n                                            \n                                                            GoogleTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/social/providers/google-authentication.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        oauthClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OAuth2Client\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/social/providers/google-authentication.service.ts:13\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable, OnModuleInit, UnauthorizedException } from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { OAuth2Client } from 'google-auth-library';\nimport jwtConfig from 'src/auth/config/jwt.config';\nimport { GoogleTokenDto } from '../dtos/google-token.dto';\nimport { UserService } from 'src/users/providers/user.service';\nimport { GenerateTokensProvider } from 'src/auth/providers/generate-tokens.provider';\n\n@Injectable()\nexport class GoogleAuthenticationService implements OnModuleInit {\n\n    private oauthClient: OAuth2Client;\n\n    constructor(private readonly jwtService: JwtService,\n        private readonly generateTokensProvider: GenerateTokensProvider,\n        @Inject(forwardRef(() => UserService)) private readonly userService: UserService,\n        @Inject(jwtConfig.KEY) private readonly jwtConfiguration: ConfigType\n    ) { }\n\n    onModuleInit() {\n        const clientId = this.jwtConfiguration.googleClientId;\n        const clientSecret = this.jwtConfiguration.googleClientSecret;\n        this.oauthClient = new OAuth2Client(clientId, clientSecret)\n    }\n\n    public async authenticate(googleTokenDto: GoogleTokenDto) {\n\n        try {\n            const loginTicket = await this.oauthClient.verifyIdToken({\n                idToken: googleTokenDto.token\n            })\n\n            const { email, sub: googleId, given_name: firstName, family_name: lastName } = loginTicket.getPayload();\n\n            const user = await this.userService.findOneByGoogleId(googleId)\n\n            if (user) {\n                return this.generateTokensProvider.generateToken(user)\n            }\n\n            const newUser = await this.userService.createGoogleUser({\n                email: email,\n                firstName: firstName,\n                lastName: lastName,\n                googleId: googleId\n            })\n            return this.generateTokensProvider.generateToken(newUser);\n        } catch (error) {\n            throw new UnauthorizedException(error)\n        }\n\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GoogleTokenDto.html":{"url":"classes/GoogleTokenDto.html","title":"class - GoogleTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GoogleTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/dtos/google-token.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/social/dtos/google-token.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from \"class-validator\";\n\nexport class GoogleTokenDto {\n    @IsNotEmpty()\n    @IsString()\n    token: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GoogleUser.html":{"url":"classes/GoogleUser.html","title":"class - GoogleUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GoogleUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interfaces/google-user.interface.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                firstName\n                            \n                            \n                                googleId\n                            \n                            \n                                lastName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/interfaces/google-user.interface.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/interfaces/google-user.interface.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        googleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/interfaces/google-user.interface.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/interfaces/google-user.interface.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class GoogleUser {\n    email: string;\n    firstName: string;\n    lastName: string;\n    googleId: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HashingProvider.html":{"url":"injectables/HashingProvider.html","title":"injectable - HashingProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HashingProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/hashing.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                comparePassword\n                            \n                            \n                                    Abstract\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        comparePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePassword(data: string | Buffer, encrypted: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.provider.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encrypted\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(data: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.provider.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport abstract class HashingProvider {\n\n    abstract hashPassword(data: string | Buffer): Promise\n\n    abstract comparePassword(data: string | Buffer, encrypted: string): Promise\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/MetaOption.html":{"url":"entities/MetaOption.html","title":"entity - MetaOption","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  MetaOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-option.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                metaValue\n                            \n                            \n                                    \n                                    \n                                post\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, post => post.metaOptions, {onDelete: 'CASCADE'})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:19\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from \"src/post/post.entity\";\nimport { Column, CreateDateColumn, Entity, JoinColumn, OneToOne, PrimaryGeneratedColumn, UpdateDateColumn } from \"typeorm\";\n\n@Entity()\nexport class MetaOption {\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column({\n        type: \"json\",\n        nullable: false\n    })\n    metaValue: string;\n\n    @CreateDateColumn()\n    createDate: Date\n\n    @UpdateDateColumn()\n    updateDate: Date;\n\n\n    @OneToOne(() => Post, (post) => post.metaOptions, {\n        onDelete: 'CASCADE'\n    })\n    @JoinColumn()\n    post: Post;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MetaOptionsController.html":{"url":"controllers/MetaOptionsController.html","title":"controller - MetaOptionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MetaOptionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-options.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                meta-options\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostMetaOptionDto: CreatePostMetaOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/meta-options/meta-options.controller.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostMetaOptionDto\n                                            \n                                                            CreatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { CreatePostMetaOptionsDto } from './dtos/create-post-meta-option.dtos';\nimport { MetaOptionsService } from './providers/meta-options.service';\n\n@Controller('meta-options')\nexport class MetaOptionsController {\n\n\n    constructor(private readonly metaOptionService: MetaOptionsService) { }\n    @Post()\n    public create(@Body() createPostMetaOptionDto: CreatePostMetaOptionsDto) {\n        return this.metaOptionService.create(createPostMetaOptionDto);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MetaOptionsModule.html":{"url":"modules/MetaOptionsModule.html","title":"module - MetaOptionsModule","body":"\n                   \n\n\n\n\n    Modules\n    MetaOptionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/meta-options/meta-options.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MetaOptionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MetaOptionsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MetaOptionsController } from './meta-options.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MetaOption } from './meta-option.entity';\nimport { MetaOptionsService } from './providers/meta-options.service';\n\n@Module({\n  controllers: [MetaOptionsController],\n  imports: [TypeOrmModule.forFeature([MetaOption])],\n  providers: [MetaOptionsService]\n})\nexport class MetaOptionsModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MetaOptionsService.html":{"url":"injectables/MetaOptionsService.html","title":"injectable - MetaOptionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MetaOptionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/providers/meta-options.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(metaOptionRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/meta-options/providers/meta-options.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        metaOptionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostMetaOptionsDto: CreatePostMetaOptionsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/meta-options/providers/meta-options.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostMetaOptionsDto\n                                            \n                                                            CreatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreatePostMetaOptionsDto } from '../dtos/create-post-meta-option.dtos';\nimport { Repository } from 'typeorm';\nimport { MetaOption } from '../meta-option.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class MetaOptionsService {\n\n    constructor(@InjectRepository(MetaOption) private readonly metaOptionRepository: Repository) { }\n\n    public async create(createPostMetaOptionsDto: CreatePostMetaOptionsDto) {\n        let metaOption = this.metaOptionRepository.create(createPostMetaOptionsDto);\n        return await this.metaOptionRepository.save(metaOption);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Paginated.html":{"url":"interfaces/Paginated.html","title":"interface - Paginated","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Paginated\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/interfaces/paginated.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            links\n                                        \n                                \n                                \n                                        \n                                            meta\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        links\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        links:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        meta\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        meta:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Paginated {\n\n    data: T[];\n    meta: {\n        itemsPerPage: number;\n        totalItems: number;\n        currentPage: number;\n        totalPages: number;\n    };\n    links: {\n        first: string;\n        last: string;\n        current: string;\n        next: string;\n        previous: string;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaginationModule.html":{"url":"modules/PaginationModule.html","title":"module - PaginationModule","body":"\n                   \n\n\n\n\n    Modules\n    PaginationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_providers\n\n\n\ncluster_PaginationModule_exports\n\n\n\n\nPaginationProvider \n\nPaginationProvider \n\n\n\nPaginationModule\n\nPaginationModule\n\nPaginationProvider  -->\n\nPaginationModule->PaginationProvider \n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nPaginationModule -->\n\nPaginationProvider->PaginationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/pagination/pagination.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaginationProvider\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PaginationProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PaginationProvider } from './providers/pagination.provider';\n\n@Module({\n    providers: [PaginationProvider],\n    exports: [PaginationProvider]\n})\nexport class PaginationModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaginationProvider.html":{"url":"injectables/PaginationProvider.html","title":"injectable - PaginationProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaginationProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/providers/pagination.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                paginateQuery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: Request)\n                    \n                \n                        \n                            \n                                Defined in src/common/pagination/providers/pagination.provider.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                    Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        paginateQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    paginateQuery(paginationQuery: PaginationQueryDto, repository: Repository)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/pagination/providers/pagination.provider.ts:15\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                paginationQuery\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                repository\n                                            \n                                                        Repository\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { PaginationQueryDto } from '../dtos/pagination-query.dto';\nimport { ObjectLiteral, Repository } from 'typeorm';\nimport { Request } from 'express';\nimport { REQUEST } from '@nestjs/core';\nimport { Paginated } from '../interfaces/paginated.interface';\n\n@Injectable()\nexport class PaginationProvider {\n\n    constructor(\n        @Inject(REQUEST)\n        private readonly request: Request\n    ) { }\n    public async paginateQuery(paginationQuery: PaginationQueryDto, repository: Repository): Promise> {\n        let results = await repository.find({\n            skip: (paginationQuery.page - 1) * paginationQuery.limit,\n            take: paginationQuery.limit\n        })\n\n        const baseUrl = this.request.protocol + '://' + this.request.headers.host + '/';\n\n        const newUrl = new URL(this.request.url, baseUrl)\n        console.log(newUrl)\n\n        const totalItems = await repository.count();\n        const totalPages = Math.ceil(totalItems / paginationQuery.limit);\n        const nextPage = paginationQuery.page === totalPages ? paginationQuery.page : paginationQuery.page + 1\n        const previousPage = paginationQuery.page === 1 ? paginationQuery.page : paginationQuery.page - 1;\n        const finalResponse: Paginated = {\n            data: results,\n            meta: {\n                itemsPerPage: paginationQuery.limit,\n                totalItems: totalItems,\n                currentPage: paginationQuery.page,\n                totalPages: totalPages,\n            },\n            links: {\n                first: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&pages=1`,\n                last: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&pages=${totalPages}`,\n                current: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&pages=${paginationQuery.page}`,\n                next: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&pages=${nextPage}`,\n                previous: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&pages=${previousPage}`\n            }\n        }\n\n        return finalResponse;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationQueryDto.html":{"url":"classes/PaginationQueryDto.html","title":"class - PaginationQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/dtos/pagination-query.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/dtos/pagination-query.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/dtos/pagination-query.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport { IsOptional, IsPositive } from \"class-validator\";\n\nexport class PaginationQueryDto {\n    @IsOptional()\n    @IsPositive()\n    //@Type(() => Number) we do not need this anymore cause we already enabled the implicit conversion in the main.ts\n    limit?: number = 10;\n    @IsOptional()\n    @IsPositive()\n    //@Type(() => Number)\n    page?: number = 1;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dtos/patch-post-dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The id of the post that needs to be updated'})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/patch-post-dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from \"@nestjs/swagger\";\nimport { IsInt, IsNotEmpty } from \"class-validator\";\nimport { CreatePostDto } from \"./create-post.dtos\";\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n    @ApiProperty({\n        description: \"The id of the post that needs to be updated\"\n    })\n    @IsInt()\n    @IsNotEmpty()\n    id: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \"@nestjs/mapped-types\";\nimport { CreateUserDto } from \"./create-user.dto\";\n\nexport class PatchUserDto extends PartialType(CreateUserDto) {\n   \n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                postType\n                            \n                            \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.posts, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MetaOption\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, metaOptions => metaOptions.post, {cascade: true, eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: postType, nullable: false, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: postStatus, nullable: false, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Tag[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, tag => tag.posts, {eager: true})@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:18\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, JoinTable, ManyToMany, ManyToOne, OneToOne, PrimaryGeneratedColumn } from \"typeorm\";\nimport { CreatePostMetaOptionsDto } from \"../meta-options/dtos/create-post-meta-option.dtos\";\nimport { postType } from \"./enums/postType.enum\";\nimport { postStatus } from \"./enums/status.enum\";\nimport { MetaOption } from \"src/meta-options/meta-option.entity\";\nimport { User } from \"src/users/user.entity\";\nimport { Tag } from \"src/tags/tag.entity\";\n\n@Entity()\nexport class Post {\n    @PrimaryGeneratedColumn()\n    id: number;\n    @Column({\n        type: \"varchar\",\n        length: 512,\n        nullable: false\n    })\n    title: string;\n    @Column({\n        type: \"enum\",\n        enum: postType,\n        nullable: false,\n        default: postType.POST\n    })\n    postType: postType;\n\n    @Column({\n        type: \"varchar\",\n        length: 256,\n        nullable: false,\n        unique: true\n    })\n    slug: string;\n    @Column({\n        type: \"enum\",\n        enum: postStatus,\n        nullable: false,\n        default: postStatus.DRAFT\n    })\n    status: postStatus;\n\n    @Column({\n        type: \"text\",\n        nullable: true\n    })\n    content?: string;\n\n    @Column({\n        type: \"text\",\n        nullable: true\n    })\n    schema?: string;\n\n    @Column({\n        type: \"varchar\",\n        length: 1024,\n        nullable: true\n    })\n    featuredImageUrl?: string;\n\n    @Column({\n        type: \"timestamp\",\n    })\n    publishOn?: Date;\n\n\n\n\n    @OneToOne(() => MetaOption, (metaOptions) => metaOptions.post, {\n        cascade: true,\n        eager: true\n    })\n    //@JoinColumn()\n    metaOptions?: MetaOption;\n\n    @ManyToOne(() => User, (user) => user.posts, {\n        eager: true\n    })\n    author: User;\n\n\n    @ManyToMany(() => Tag, (tag) => tag.posts, {\n        eager: true\n    })\n    @JoinTable()\n    tags?: Tag[];\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostController.html":{"url":"controllers/PostController.html","title":"controller - PostController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                post\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    Public\n                                deletePost\n                            \n                            \n                                    \n                                    Public\n                                getPost\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(user: ActiveUserData, createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new blog post'})@ApiResponse({status: 201, description: 'you get a 201 response if your post is created successfully'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            ActiveUserData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPost(userId: string, postQuery: GetPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:userId?')\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                postQuery\n                                            \n                                                            GetPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Updates an existing blog post'})@ApiResponse({status: 200, description: 'A 200 response if the post is updated successfully'})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Param, ParseIntPipe, Patch, Post, Query, Req } from '@nestjs/common';\nimport { PostService } from './services/post.service';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreatePostDto } from './dtos/create-post.dtos';\nimport { PatchPostDto } from './dtos/patch-post-dto';\nimport { GetPostDto } from './dtos/get-posts.dto';\nimport { ActiveUser } from 'src/auth/decorators/active-user.decorator';\nimport { ActiveUserData } from 'src/auth/interfaces/active-user-data.interface';\n\n@Controller('post')\n@ApiTags('posts')\nexport class PostController {\n\n    constructor(private readonly postService: PostService) { }\n\n    @Get('/:userId?')\n    public getPost(@Param('userId') userId: string, @Query() postQuery: GetPostDto) {\n        return this.postService.findAll(postQuery, userId)\n    }\n\n    @ApiOperation({\n        summary: \"Creates a new blog post\"\n    })\n    @ApiResponse({\n        status: 201,\n        description: \"you get a 201 response if your post is created successfully\"\n    })\n    @Post()\n    public createPost(@ActiveUser() user: ActiveUserData, @Body() createPostDto: CreatePostDto) {\n\n        return this.postService.createPost(createPostDto, user)\n    }\n    @ApiOperation({\n        summary: \"Updates an existing blog post\"\n    })\n    @ApiResponse({\n        status: 200,\n        description: \"A 200 response if the post is updated successfully\"\n    })\n    @Patch()\n    public updatePost(@Body() patchPostDto: PatchPostDto) {\n        return this.postService.update(patchPostDto)\n    }\n\n    @Delete()\n    public deletePost(@Query(\"id\", ParseIntPipe) id: number) {\n        return this.postService.delete(id)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostModule.html":{"url":"modules/PostModule.html","title":"module - PostModule","body":"\n                   \n\n\n\n\n    Modules\n    PostModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostModule\n\n\n\ncluster_PostModule_imports\n\n\n\ncluster_PostModule_providers\n\n\n\n\nPaginationModule\n\nPaginationModule\n\n\n\nPostModule\n\nPostModule\n\nPostModule -->\n\nPaginationModule->PostModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostModule -->\n\nTagsModule->PostModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostModule -->\n\nUsersModule->PostModule\n\n\n\n\n\nCreatePostProvider\n\nCreatePostProvider\n\nPostModule -->\n\nCreatePostProvider->PostModule\n\n\n\n\n\nPostService\n\nPostService\n\nPostModule -->\n\nPostService->PostModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/post/post.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CreatePostProvider\n                        \n                        \n                            PostService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PaginationModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostController } from './post.controller';\nimport { PostService } from './services/post.service';\nimport { UsersModule } from 'src/users/users.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Post } from './post.entity';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { TagsModule } from 'src/tags/tags.module';\nimport { PaginationModule } from 'src/common/pagination/pagination.module';\nimport { CreatePostProvider } from './services/create-post.provider';\n\n@Module({\n  controllers: [PostController],\n  providers: [PostService, CreatePostProvider],\n  imports: [\n    UsersModule,\n    TagsModule,\n    TypeOrmModule.forFeature([Post, MetaOption]),\n    PaginationModule\n  ]\n})\nexport class PostModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostService.html":{"url":"injectables/PostService.html","title":"injectable - PostService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/services/post.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createPost\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, postRepository: Repository, tagsService: TagsService, paginationProvider: PaginationProvider, createPostProvider: CreatePostProvider)\n                    \n                \n                        \n                            \n                                Defined in src/post/services/post.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tagsService\n                                                  \n                                                        \n                                                                        TagsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        paginationProvider\n                                                  \n                                                        \n                                                                        PaginationProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        createPostProvider\n                                                  \n                                                        \n                                                                        CreatePostProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto, user: ActiveUserData)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/services/post.service.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            ActiveUserData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/services/post.service.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(postQuery: GetPostDto, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/services/post.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postQuery\n                                            \n                                                            GetPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(patchPostDto: PatchPostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/services/post.service.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable, RequestTimeoutException } from '@nestjs/common';\nimport { UserService } from 'src/users/providers/user.service';\nimport { CreatePostDto } from '../dtos/create-post.dtos';\nimport { Repository } from 'typeorm';\nimport { Post } from '../post.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { TagsService } from 'src/tags/providers/tags.service';\nimport { PatchPostDto } from '../dtos/patch-post-dto';\nimport { GetPostDto } from '../dtos/get-posts.dto';\nimport { PaginationProvider } from 'src/common/pagination/providers/pagination.provider';\nimport { Paginated } from 'src/common/pagination/interfaces/paginated.interface';\nimport { CreatePostProvider } from './create-post.provider';\nimport { ActiveUserData } from 'src/auth/interfaces/active-user-data.interface';\n@Injectable()\nexport class PostService {\n\n    constructor(\n        private readonly userService: UserService,\n        @InjectRepository(Post) private readonly postRepository: Repository,\n\n        //@InjectRepository(MetaOption) private readonly metaOptionRepository: Repository,\n\n        private readonly tagsService: TagsService,\n\n        private readonly paginationProvider: PaginationProvider,\n\n        private readonly createPostProvider: CreatePostProvider\n    ) { }\n\n    public async findAll(postQuery: GetPostDto, userId: string): Promise> {\n        /*const user = await this.userService.findOneById(+userId);\n        let posts = await this.postRepository.find({\n            relations: {\n                metaOptions: true,\n                author: true,\n                tags: true\n            },\n            skip: (postQuery.page - 1) * postQuery.limit,\n            take: postQuery.limit,\n        })*/\n\n        let posts = await this.paginationProvider.paginateQuery({\n            limit: postQuery.limit,\n            page: postQuery.page\n        }, this.postRepository,)\n        return posts\n    }\n\n    public async createPost(createPostDto: CreatePostDto, user: ActiveUserData) {\n        return await this.createPostProvider.createPost(createPostDto, user)\n    }\n\n    public async delete(id: number) {\n\n        let post = await this.postRepository.findOneBy({ id: id })\n\n        await this.postRepository.delete(id)\n\n        /*await this.metaOptionRepository.delete(post.metaOptions.id)\n*/\n        /*let inversePost = await this.metaOptionRepository.find({\n            where: {\n                id: post.metaOptions.id\n            },\n            relations: {\n                post: true\n            }\n        })*/\n        return { deleted: true, id }\n    }\n\n\n    public async update(patchPostDto: PatchPostDto) {\n        let tags = undefined;\n        let post = undefined;\n        try {\n            tags = await this.tagsService.findMultpleTags(patchPostDto.tags);\n        } catch (err) {\n            throw new RequestTimeoutException('unable to process your request please try later',);\n        }\n\n        if (!tags || tags.length !== patchPostDto.tags.length) {\n            throw new BadRequestException('please check your tag Ids and ensure they are correct')\n        }\n\n        try {\n            post = await this.postRepository.findOneBy({ id: patchPostDto.id })\n        } catch (e) {\n            throw new RequestTimeoutException('unable to process your request please try later',);\n\n        }\n\n        if (!post) {\n            throw new BadRequestException('The post id does not exist')\n        }\n\n        post.title = patchPostDto.title ?? post.title;\n        post.content = patchPostDto.content ?? post.content\n        post.status = patchPostDto.status ?? post.status\n        post.slug = patchPostDto.slug ?? post.slug\n        post.postType = patchPostDto.postType ?? post.postType\n        post.featuredImageUrl = patchPostDto.featuredImageUrl ?? post.featuredImageUrl\n        post.publishOn = patchPostDto.publishOn ?? post.publishOn\n\n        post.tags = tags\n        try {\n            await this.postRepository.save(post)\n        } catch (err) {\n            throw new RequestTimeoutException('unable to process your request please try later',);\n        }\n        return post;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenDto.html":{"url":"classes/RefreshTokenDto.html","title":"class - RefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/refresh-token.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/refresh-token.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from \"class-validator\";\n\nexport class RefreshTokenDto {\n    @IsNotEmpty()\n    @IsString()\n    refreshToken: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokensProvider.html":{"url":"injectables/RefreshTokensProvider.html","title":"injectable - RefreshTokensProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokensProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/refresh-tokens.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                refreshTokens\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>, generateTokenProvider: GenerateTokensProvider, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/refresh-tokens.provider.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTokenProvider\n                                                  \n                                                        \n                                                                        GenerateTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshTokens(refreshTokenDto: RefreshTokenDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/refresh-tokens.provider.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshTokenDto\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable, UnauthorizedException } from '@nestjs/common';\nimport { RefreshTokenDto } from '../dtos/refresh-token.dto';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigType } from '@nestjs/config';\nimport jwtConfig from '../config/jwt.config';\nimport { GenerateTokensProvider } from './generate-tokens.provider';\nimport { UserService } from 'src/users/providers/user.service';\nimport { ActiveUserData } from '../interfaces/active-user-data.interface';\n\n@Injectable()\nexport class RefreshTokensProvider {\n\n    constructor(\n        private readonly jwtService: JwtService,\n        @Inject(jwtConfig.KEY) private readonly jwtConfiguration: ConfigType,\n\n        private readonly generateTokenProvider: GenerateTokensProvider,\n        @Inject(forwardRef(() => UserService)) private readonly userService: UserService\n    ) { }\n    public async refreshTokens(refreshTokenDto: RefreshTokenDto) {\n        try {\n            const { sub } = await this.jwtService.verifyAsync>(refreshTokenDto.refreshToken, {\n                secret: this.jwtConfiguration.secret,\n                audience: this.jwtConfiguration.audience,\n                issuer: this.jwtConfiguration.issuer\n            })\n\n            const user = await this.userService.findOneById(sub)\n\n            return await this.generateTokenProvider.generateToken(user)\n        } catch (error) {\n            throw new UnauthorizedException(error)\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInDto.html":{"url":"classes/SignInDto.html","title":"class - SignInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/signin.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/signin.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/signin.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString } from \"class-validator\";\n\nexport class SignInDto {\n    @IsEmail()\n    @IsNotEmpty()\n    email: string;\n\n    @IsString()\n    @IsNotEmpty()\n    password: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SignInProvider.html":{"url":"injectables/SignInProvider.html","title":"injectable - SignInProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SignInProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/sign-in.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, hashingProvider: HashingProvider, jwtService: JwtService, generateTokensProvider: GenerateTokensProvider, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/sign-in.provider.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTokensProvider\n                                                  \n                                                        \n                                                                        GenerateTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/sign-in.provider.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable, RequestTimeoutException, UnauthorizedException } from '@nestjs/common';\nimport { SignInDto } from '../dtos/signin.dto';\nimport { UserService } from 'src/users/providers/user.service';\nimport { HashingProvider } from './hashing.provider';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigType } from '@nestjs/config';\nimport jwtConfig from '../config/jwt.config';\nimport { ActiveUserData } from '../interfaces/active-user-data.interface';\nimport { GenerateTokensProvider } from './generate-tokens.provider';\n\n@Injectable()\nexport class SignInProvider {\n\n    constructor(\n        @Inject(forwardRef(() => UserService))\n        private readonly userService: UserService,\n        private readonly hashingProvider: HashingProvider,\n        private readonly jwtService: JwtService,\n        private readonly generateTokensProvider: GenerateTokensProvider,\n        @Inject(jwtConfig.KEY) private readonly jwtConfiguration: ConfigType\n    ) {\n\n    }\n    public async signIn(signInDto: SignInDto) {\n        let user = await this.userService.findOneByEmail(signInDto.email)\n\n        let isEqual: boolean = false\n\n        try {\n            isEqual = await this.hashingProvider.comparePassword(signInDto.password, user.password)\n        } catch (error) {\n            throw new RequestTimeoutException(error, {\n                description: 'could not compare password'\n            })\n        }\n\n        if (!isEqual) {\n            throw new UnauthorizedException(\"incorrect password\")\n        }\n        return await this.generateTokensProvider.generateToken(user)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Tag.html":{"url":"entities/Tag.html","title":"entity - Tag","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Tag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tag.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                deleteAt\n                            \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                posts\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, post => post.tags, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:48\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from \"src/post/post.entity\";\nimport { Column, CreateDateColumn, DeleteDateColumn, Entity, ManyToMany, PrimaryGeneratedColumn, UpdateDateColumn } from \"typeorm\";\n\n@Entity()\nexport class Tag {\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column({\n        type: \"varchar\",\n        length: 256,\n        nullable: false,\n        unique: true\n    })\n    name: string;\n\n    @Column({\n        type: \"varchar\",\n        length: 256,\n        nullable: false,\n        unique: true\n    })\n    slug: string;\n\n    @Column({\n        type: \"text\",\n        nullable: true,\n    })\n    description?: string;\n\n    @Column({\n        type: \"text\",\n        nullable: true,\n    })\n    schema?: string;\n\n    @Column({\n        type: \"varchar\",\n        length: 1024,\n        nullable: true,\n    })\n    featuredImageUrl: string;\n\n    @CreateDateColumn()\n    createDate: Date;\n\n    @UpdateDateColumn()\n    updateDate: Date;\n\n    @DeleteDateColumn()\n    deleteAt: Date;\n\n    @ManyToMany(() => Post, (post) => post.tags, {\n        onDelete: \"CASCADE\"\n    })\n    posts: Post[];\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagsController.html":{"url":"controllers/TagsController.html","title":"controller - TagsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tags\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                create\n                            \n                            \n                                    \n                                    Public\n                                delete\n                            \n                            \n                                    \n                                    Public\n                                softDelete\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTagDto: CreateTagDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTagDto\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        softDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDelete(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('soft-delete')\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, ParseIntPipe, Post, Query } from '@nestjs/common';\nimport { CreateTagDto } from './dtos/create-tag.dto';\nimport { TagsService } from './providers/tags.service';\n\n@Controller('tags')\nexport class TagsController {\n\n    constructor(private readonly tagsService: TagsService) { }\n    @Post()\n    public create(@Body() createTagDto: CreateTagDto) {\n        return this.tagsService.createTags(createTagDto)\n    }\n\n    @Delete()\n    public delete(@Query('id', ParseIntPipe) id: number) {\n        return this.tagsService.delete(id);\n    }\n    @Delete(\"soft-delete\")\n    public softDelete(@Query('id', ParseIntPipe) id: number) {\n        return this.tagsService.softRemove(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagsModule.html":{"url":"modules/TagsModule.html","title":"module - TagsModule","body":"\n                   \n\n\n\n\n    Modules\n    TagsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\n\nTagsService \n\nTagsService \n\n\n\nTagsModule\n\nTagsModule\n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tags/tags.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TagsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TagsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TagsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TagsController } from './tags.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Tag } from './tag.entity';\nimport { TagsService } from './providers/tags.service';\n\n@Module({\n  controllers: [TagsController],\n  imports: [TypeOrmModule.forFeature([Tag])],\n  providers: [TagsService],\n  exports: [TagsService]\n})\nexport class TagsModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TagsService.html":{"url":"injectables/TagsService.html","title":"injectable - TagsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TagsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/providers/tags.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createTags\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findMultpleTags\n                            \n                            \n                                    Public\n                                    Async\n                                softRemove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/tags/providers/tags.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tagsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTags(createTagDto: CreateTagDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTagDto\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findMultpleTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    findMultpleTags(tags: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tags\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        softRemove\n                        \n                    \n                \n            \n            \n                \n                        \n                    softRemove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateTagDto } from '../dtos/create-tag.dto';\nimport { In, Repository } from 'typeorm';\nimport { Tag } from '../tag.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class TagsService {\n\n    constructor(@InjectRepository(Tag) private readonly tagsRepository: Repository) { }\n\n    public async createTags(createTagDto: CreateTagDto) {\n        let tag = this.tagsRepository.create(createTagDto)\n\n        return await this.tagsRepository.save(tag)\n    }\n\n    public async findMultpleTags(tags: number[]) {\n        let result = await this.tagsRepository.find({\n            where: {\n                id: In(tags)\n            }\n        })\n\n        return result;\n    }\n\n    public async delete(id: number) {\n        await this.tagsRepository.delete(id);\n        return { deleted: true, id }\n    }\n\n    public async softRemove(id: number) {\n        await this.tagsRepository.softDelete(id);\n        return { deleted: true, id }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    Optional\n                                googleId\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    Optional\n                                password\n                            \n                            \n                                    \n                                posts\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        googleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, post => post.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:45\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from \"src/post/post.entity\";\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from \"typeorm\";\n\n@Entity()\nexport class User {\n    @PrimaryGeneratedColumn()\n    id: number;\n    @Column({\n        type: \"varchar\",\n        length: 96,\n        nullable: false\n    })\n    firstName: string;\n    @Column(\n        {\n            type: \"varchar\",\n            length: 96,\n            nullable: true\n        }\n    )\n    lastName: string;\n    @Column({\n        type: \"varchar\",\n        length: 96,\n        nullable: false,\n        unique: true\n    })\n    email: string;\n    @Column({\n        type: \"varchar\",\n        length: 96,\n        nullable: true\n    })\n    password?: string;\n\n    @Column({\n        type: \"varchar\",\n        length: 96,\n        nullable: true\n    })\n    googleId?: string;\n\n\n    @OneToMany(() => Post, (post) => post.author)\n    posts: Post[]\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserCreateManyProvider.html":{"url":"injectables/UserCreateManyProvider.html","title":"injectable - UserCreateManyProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserCreateManyProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/user-create-many.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createMany\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataSource: DataSource)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/user-create-many.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMany(createManyUsersDto: CreateManyUsersDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user-create-many.provider.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createManyUsersDto\n                                            \n                                                            CreateManyUsersDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, RequestTimeoutException } from '@nestjs/common';\nimport { User } from '../user.entity';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { DataSource } from 'typeorm';\nimport { CreateManyUsersDTO } from '../dtos/create-many-user.dto';\n\n@Injectable()\nexport class UserCreateManyProvider {\n\n    constructor(private readonly dataSource: DataSource) { }\n    public async createMany(createManyUsersDto: CreateManyUsersDTO) {\n        let newUsers: User[] = []\n\n        const queryRunner = this.dataSource.createQueryRunner();\n        try {\n            await queryRunner.connect();\n\n            await queryRunner.startTransaction();\n        } catch (error) {\n            throw new RequestTimeoutException('could not connect to the database')\n        }\n\n        try {\n            for (let user of createManyUsersDto.users) {\n                let newUser = queryRunner.manager.create(User, user)\n                let result = await queryRunner.manager.save(newUser)\n                newUsers.push(result)\n            }\n            await queryRunner.commitTransaction();\n        } catch (error) {\n            await queryRunner.rollbackTransaction();\n            throw new ConflictException('could not complete the transaction', {\n                description: String(error)\n            })\n        } finally {\n            try {\n                await queryRunner.release()\n            } catch (error) {\n                throw new RequestTimeoutException('could not release to the connection', {\n                    description: String(error)\n                })\n            }\n        }\n        return newUsers\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/user.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to connect to Users table and perform business operations\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createGoogleUser\n                            \n                            \n                                    Public\n                                    Async\n                                createMany\n                            \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOneByEmail\n                            \n                            \n                                    Public\n                                    Async\n                                findOneByGoogleId\n                            \n                            \n                                    Public\n                                    Async\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, userRepository: Repository, configService: ConfigService, profilConfiguration: ConfigType<>, usersCreateManyProvider: UserCreateManyProvider, createGoogleUserProvider: CreateGoogleUserProvider, createUsersProvider: CreateUserProvider, findOneByGoogleIdPrvider: FindOneByGoogleIdProvider, findOneUserByEmailProvider: FindOneUserByEmailProvider)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/user.service.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        profilConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersCreateManyProvider\n                                                  \n                                                        \n                                                                        UserCreateManyProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        createGoogleUserProvider\n                                                  \n                                                        \n                                                                        CreateGoogleUserProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        createUsersProvider\n                                                  \n                                                        \n                                                                        CreateUserProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findOneByGoogleIdPrvider\n                                                  \n                                                        \n                                                                        FindOneByGoogleIdProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findOneUserByEmailProvider\n                                                  \n                                                        \n                                                                        FindOneUserByEmailProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createGoogleUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createGoogleUser(googleUser: GoogleUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user.service.ts:108\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleUser\n                                            \n                                                            GoogleUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMany(createManyUsersDto: CreateManyUsersDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user.service.ts:96\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createManyUsersDto\n                                            \n                                                            CreateManyUsersDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user.service.ts:92\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUserParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user.service.ts:39\n                        \n                    \n\n\n            \n                \n                        The method to get all the users from the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user.service.ts:100\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByGoogleId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByGoogleId(googleId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user.service.ts:104\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user.service.ts:71\n                        \n                    \n\n\n            \n                \n                        Find a single user using the ID of user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, forwardRef, HttpException, HttpStatus, Inject, Injectable, RequestTimeoutException } from \"@nestjs/common\";\nimport { GetUsersParamDto } from \"../dtos/get-users-param.dto\";\nimport { AuthService } from \"src/auth/service/auth.service\";\nimport { DataSource, Repository } from \"typeorm\";\nimport { User } from \"../user.entity\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { CreateUserDto } from \"../dtos/create-user.dto\";\nimport { ConfigService, ConfigType } from \"@nestjs/config\";\nimport profileConfig from \"../config/profile.config\";\nimport { UserCreateManyProvider } from \"./user-create-many.provider\";\nimport { CreateManyUsersDTO } from \"../dtos/create-many-user.dto\";\nimport { CreateUserProvider } from \"./create-user.provider\";\nimport { FindOneUserByEmailProvider } from \"./find-one-user-by-email.provider\";\nimport { FindOneByGoogleIdProvider } from \"./find-one-by-google-id.provider\";\nimport { CreateGoogleUserProvider } from \"./create-google-user.provider\";\nimport { GoogleUser } from \"../interfaces/google-user.interface\";\n\n/**\n * Class to connect to Users table and perform business operations\n */\n@Injectable()\nexport class UserService {\n\n    constructor(\n        @Inject(forwardRef(() => AuthService)) private readonly authService: AuthService,\n        @InjectRepository(User) private userRepository: Repository,\n        private readonly configService: ConfigService,\n        @Inject(profileConfig.KEY) private readonly profilConfiguration: ConfigType,\n        private readonly usersCreateManyProvider: UserCreateManyProvider,\n        private readonly createGoogleUserProvider: CreateGoogleUserProvider,\n        private readonly createUsersProvider: CreateUserProvider,\n        private readonly findOneByGoogleIdPrvider: FindOneByGoogleIdProvider,\n        private readonly findOneUserByEmailProvider: FindOneUserByEmailProvider\n    ) { }\n\n    /**\n     * The method to get all the users from the database\n     */\n    public findAll(getUserParamDto: GetUsersParamDto, limit: number, page: number) {\n        /* const isAUth = this.authService.isAUth();\n         console.log(isAUth)\n \n         const environment = this.configService.get(\"S3_BUCKET\")\n         console.log(environment)\n         console.log(this.profilConfiguration)\n         console.log(this.profilConfiguration.apiKey)\n         return [\n             {\n                 firstName: 'John',\n                 email: 'john@doe.com'\n             },\n             {\n                 firstName: 'Alice',\n                 email: 'alice@doe.com'\n             }\n         ]*/\n\n        throw new HttpException({\n            status: HttpStatus.MOVED_PERMANENTLY,\n            error: 'The API endpoint does not exist',\n            fileName: 'user.service.ts',\n            lineNumber: 14,\n        }, HttpStatus.MOVED_PERMANENTLY, {\n            description: 'Occured because the API endpoint was permanently moved'\n        })\n    }\n    /**\n     * Find a single user using the ID of user\n     */\n\n    public async findOneById(id: number) {\n        let user = undefined;\n\n        try {\n            user = await this.userRepository.findOneBy({\n                id: id,\n            })\n        } catch (err) {\n            throw new RequestTimeoutException('Unable to process your request at the moment please try later', {\n                description: 'Error connectiong to the database'\n            })\n        }\n\n        if (!user) {\n            throw new BadRequestException('The user id does not exist')\n        }\n        return await this.userRepository.findOneBy({\n            id: id,\n        })\n    }\n\n    public async createUser(createUserDto: CreateUserDto) {\n        return this.createUsersProvider.createUser(createUserDto)\n    }\n\n    public async createMany(createManyUsersDto: CreateManyUsersDTO) {\n        return await this.usersCreateManyProvider.createMany(createManyUsersDto)\n    }\n\n    public async findOneByEmail(email: string) {\n        return await this.findOneUserByEmailProvider.findOneByEmail(email)\n    }\n\n    public async findOneByGoogleId(googleId: string) {\n        return this.findOneByGoogleIdPrvider.findOneByGoogleId(googleId)\n    }\n\n    public async createGoogleUser(googleUser: GoogleUser) {\n        return await this.createGoogleUserProvider.createGoogleUser(googleUser)\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Public\n                                createManyUsers\n                            \n                            \n                                    \n                                    \n                                    Public\n                                createUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        createManyUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createManyUsers(createManyUsersDTO: CreateManyUsersDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create-many')@UseGuards(AccessTokenGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createManyUsersDTO\n                                            \n                                                            CreateManyUsersDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDTO: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@Auth(AuthType.none)\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDTO\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUsersParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/:optional?')@ApiOperation({summary: 'Fetches a list of registered users on the application'})@ApiResponse({status: 200, description: 'Users fetched successfully based on the query'})@ApiQuery({name: 'limit', type: 'number', required: false, description: 'the number of entries returned per query', example: 10})@ApiQuery({name: 'page', type: 'number', required: false, description: 'the position of the page number that you want the API to return ', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUsersParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, DefaultValuePipe, Get, Header, Headers, Ip, Param, ParseIntPipe, Patch, Post, Query, SetMetadata, UseGuards, ValidationPipe } from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UserService } from './providers/user.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreateManyUsersDTO } from './dtos/create-many-user.dto';\nimport { AccessTokenGuard } from 'src/auth/guards/access-token.guard';\nimport { Auth } from 'src/auth/decorators/auth.decorator';\nimport { AuthType } from 'src/auth/enums/auth-type';\n\n@Controller('users')\n@ApiTags('Users')\n//@UseGuards(AccessTokenGuard)\nexport class UsersController {\n\n    constructor(private readonly userService: UserService) { }\n    @Get('/:id/:optional?')\n    @ApiOperation({\n        summary: \"Fetches a list of registered users on the application\",\n    })\n    @ApiResponse({\n        status: 200,\n        description: \"Users fetched successfully based on the query\"\n    })\n    @ApiQuery({\n        name: 'limit',\n        type: \"number\",\n        required: false,\n        description: \"the number of entries returned per query\",\n        example: 10\n    })\n    @ApiQuery({\n        name: 'page',\n        type: \"number\",\n        required: false,\n        description: \"the position of the page number that you want the API to return \",\n        example: 1\n    })\n    public getUsers(/*@Param('id', ParseIntPipe) id: number | undefined*/ @Param() getUsersParamDto: GetUsersParamDto,\n        @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n        @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number\n    ) {\n        return this.userService.findAll(getUsersParamDto, limit, page)\n    }\n\n    @Post()\n    //@SetMetadata('authType', 'none')\n    @Auth(AuthType.none) // custom decorator\n    public createUsers(@Body() createUserDTO: CreateUserDto,\n    ) {\n        return this.userService.createUser(createUserDTO);\n    }\n\n    @Post('create-many')\n    @UseGuards(AccessTokenGuard)\n    public createManyUsers(@Body() createManyUsersDTO: CreateManyUsersDTO\n    ) {\n        return this.userService.createMany(createManyUsersDTO);\n    }\n\n    @Patch()\n    public patchUser(@Body() patchUserDto: PatchUserDto) {\n        return patchUserDto\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUsersModule\n\nUsersModule\n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nCreateGoogleUserProvider\n\nCreateGoogleUserProvider\n\nUsersModule -->\n\nCreateGoogleUserProvider->UsersModule\n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUsersModule -->\n\nCreateUserProvider->UsersModule\n\n\n\n\n\nFindOneByGoogleIdProvider\n\nFindOneByGoogleIdProvider\n\nUsersModule -->\n\nFindOneByGoogleIdProvider->UsersModule\n\n\n\n\n\nFindOneUserByEmailProvider\n\nFindOneUserByEmailProvider\n\nUsersModule -->\n\nFindOneUserByEmailProvider->UsersModule\n\n\n\n\n\nUserCreateManyProvider\n\nUserCreateManyProvider\n\nUsersModule -->\n\nUserCreateManyProvider->UsersModule\n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CreateGoogleUserProvider\n                        \n                        \n                            CreateUserProvider\n                        \n                        \n                            FindOneByGoogleIdProvider\n                        \n                        \n                            FindOneUserByEmailProvider\n                        \n                        \n                            UserCreateManyProvider\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UserService } from './providers/user.service';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './user.entity';\nimport { ConfigModule } from '@nestjs/config';\nimport { UserCreateManyProvider } from './providers/user-create-many.provider';\nimport { CreateUserProvider } from './providers/create-user.provider';\nimport { FindOneUserByEmailProvider } from './providers/find-one-user-by-email.provider';\nimport profileConfig from './config/profile.config';\nimport { APP_GUARD } from '@nestjs/core';\nimport { AccessTokenGuard } from 'src/auth/guards/access-token.guard';\nimport jwtConfig from 'src/auth/config/jwt.config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { FindOneByGoogleIdProvider } from './providers/find-one-by-google-id.provider';\nimport { CreateGoogleUserProvider } from './providers/create-google-user.provider';\n\n@Module({\n    controllers: [UsersController],\n    providers: [UserService,\n        UserCreateManyProvider,\n        CreateUserProvider,\n        FindOneUserByEmailProvider,\n        FindOneByGoogleIdProvider,\n        CreateGoogleUserProvider\n    ],\n    exports: [UserService],\n    imports: [\n        forwardRef(() => AuthModule),\n        TypeOrmModule.forFeature([User]),\n        ConfigModule.forFeature(profileConfig),\n        ConfigModule.forFeature(jwtConfig),\n        JwtModule.registerAsync(jwtConfig.asProvider())\n    ]\n})\nexport class UsersModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.module.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/constants/auth.constants.ts\n            \n            variable\n            AUTH_TYPE_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/constants/auth.constants.ts\n            \n            variable\n            REQUEST_USER_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/active-user.decorator.ts\n            \n            variable\n            ActiveUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/auth.decorator.ts\n            \n            variable\n            Auth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dtos/refresh-token.dto.ts\n            \n            class\n            RefreshTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dtos/signin.dto.ts\n            \n            class\n            SignInDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/guards/access-token.guard.ts\n            \n            guard\n            AccessTokenGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/guards/authentication.guard.ts\n            \n            guard\n            AuthenticationGuard\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/interfaces/active-user-data.interface.ts\n            \n            interface\n            ActiveUserData\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/bcrypt.provider.ts\n            \n            injectable\n            BcryptProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/generate-tokens.provider.ts\n            \n            injectable\n            GenerateTokensProvider\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/providers/hashing.provider.ts\n            \n            injectable\n            HashingProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/refresh-tokens.provider.ts\n            \n            injectable\n            RefreshTokensProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/sign-in.provider.ts\n            \n            injectable\n            SignInProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/service/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/social/dtos/google-token.dto.ts\n            \n            class\n            GoogleTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/social/google-authentication.controller.ts\n            \n            controller\n            GoogleAuthenticationController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/social/providers/google-authentication.service.ts\n            \n            injectable\n            GoogleAuthenticationService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/pagination/dtos/pagination-query.dto.ts\n            \n            class\n            PaginationQueryDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/pagination/interfaces/paginated.interface.ts\n            \n            interface\n            Paginated\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/pagination/providers/pagination.provider.ts\n            \n            injectable\n            PaginationProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/dtos/create-post-meta-option.dtos.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/meta-option.entity.ts\n            \n            entity\n            MetaOption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/meta-options.controller.ts\n            \n            controller\n            MetaOptionsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/providers/meta-options.service.ts\n            \n            injectable\n            MetaOptionsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/post/dtos/create-post.dtos.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/post/dtos/get-posts.dto.ts\n            \n            class\n            GetPostBaseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/post/dtos/get-posts.dto.ts\n            \n            class\n            GetPostDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/post/dtos/patch-post-dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/post/post.controller.ts\n            \n            controller\n            PostController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/post/post.entity.ts\n            \n            entity\n            Post\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/post/services/create-post.provider.ts\n            \n            injectable\n            CreatePostProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/post/services/post.service.ts\n            \n            injectable\n            PostService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/dtos/create-tag.dto.ts\n            \n            class\n            CreateTagDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/providers/tags.service.ts\n            \n            injectable\n            TagsService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/tag.entity.ts\n            \n            entity\n            Tag\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tags/tags.controller.ts\n            \n            controller\n            TagsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/dtos/create-many-user.dto.ts\n            \n            class\n            CreateManyUsersDTO\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/interfaces/google-user.interface.ts\n            \n            class\n            GoogleUser\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/providers/create-google-user.provider.ts\n            \n            injectable\n            CreateGoogleUserProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/create-user.provider.ts\n            \n            injectable\n            CreateUserProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/create-user.provider.ts\n            \n            function\n            InejectRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/providers/find-one-by-google-id.provider.ts\n            \n            injectable\n            FindOneByGoogleIdProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/find-one-user-by-email.provider.ts\n            \n            injectable\n            FindOneUserByEmailProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/user-create-many.provider.ts\n            \n            injectable\n            UserCreateManyProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/user.service.ts\n            \n            injectable\n            UserService\n            \n                33 %\n                (3/9)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.23\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.2\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.3.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            google-auth-library : ^9.11.0\n        \n            joi : ^17.12.2\n        \n            pg : ^8.11.5\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthType   (src/.../auth-type.ts)\n                        \n                        \n                            postStatus   (src/.../status.enum.ts)\n                        \n                        \n                            postType   (src/.../postType.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/enums/auth-type.ts\n    \n        \n            \n                \n                    \n                        \n                        AuthType\n                    \n                \n                        \n                            \n                                 Bearer\n                            \n                        \n                        \n                            \n                                 none\n                            \n                        \n            \n        \n\n    src/post/enums/status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : DRAFT\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : SCHEDULED\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : REVIEW\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : PUBLISHED\n                            \n                        \n            \n        \n\n    src/post/enums/postType.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : POST\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : PAGE\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : STORY\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : SERIES\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            InejectRepository   (src/.../create-user.provider.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/users/providers/create-user.provider.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        InejectRepository\n                        \n                    \n                \n            \n            \n                \nInejectRepository()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MetaOptionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaginationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_exports\n\n\n\ncluster_PaginationModule_providers\n\n\n\ncluster_PostModule\n\n\n\ncluster_PostModule_providers\n\n\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nHashingProvider \n\nHashingProvider \n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\n\n\nPostModule\n\nPostModule\n\nPostModule -->\n\nPaginationModule->PostModule\n\n\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nPaginationProvider \n\nPaginationProvider \n\nPaginationProvider  -->\n\nPaginationModule->PaginationProvider \n\n\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostModule -->\n\nTagsModule->PostModule\n\n\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nTagsService \n\nTagsService \n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostModule -->\n\nUsersModule->PostModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGenerateTokensProvider\n\nGenerateTokensProvider\n\nAuthModule -->\n\nGenerateTokensProvider->AuthModule\n\n\n\n\n\nGoogleAuthenticationService\n\nGoogleAuthenticationService\n\nAuthModule -->\n\nGoogleAuthenticationService->AuthModule\n\n\n\n\n\nRefreshTokensProvider\n\nRefreshTokensProvider\n\nAuthModule -->\n\nRefreshTokensProvider->AuthModule\n\n\n\n\n\nSignInProvider\n\nSignInProvider\n\nAuthModule -->\n\nSignInProvider->AuthModule\n\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nPaginationModule -->\n\nPaginationProvider->PaginationModule\n\n\n\n\n\nCreatePostProvider\n\nCreatePostProvider\n\nPostModule -->\n\nCreatePostProvider->PostModule\n\n\n\n\n\nPostService\n\nPostService\n\nPostModule -->\n\nPostService->PostModule\n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\nCreateGoogleUserProvider\n\nCreateGoogleUserProvider\n\nUsersModule -->\n\nCreateGoogleUserProvider->UsersModule\n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUsersModule -->\n\nCreateUserProvider->UsersModule\n\n\n\n\n\nFindOneByGoogleIdProvider\n\nFindOneByGoogleIdProvider\n\nUsersModule -->\n\nFindOneByGoogleIdProvider->UsersModule\n\n\n\n\n\nFindOneUserByEmailProvider\n\nFindOneUserByEmailProvider\n\nUsersModule -->\n\nFindOneUserByEmailProvider->UsersModule\n\n\n\n\n\nUserCreateManyProvider\n\nUserCreateManyProvider\n\nUsersModule -->\n\nUserCreateManyProvider->UsersModule\n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    7 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    19 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    15 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ActiveUser   (src/.../active-user.decorator.ts)\n                        \n                        \n                            Auth   (src/.../auth.decorator.ts)\n                        \n                        \n                            AUTH_TYPE_KEY   (src/.../auth.constants.ts)\n                        \n                        \n                            ENV   (src/.../app.module.ts)\n                        \n                        \n                            REQUEST_USER_KEY   (src/.../auth.constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/decorators/active-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ActiveUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n    (field: keyof ActiveUserData | undefined, ctx: ExecutionContext) => {\n        const request = ctx.switchToHttp().getRequest()\n        const user: ActiveUserData = request[REQUEST_USER_KEY]\n        return field ? user?.[field] : user\n    }\n)\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Auth\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...authTypes: AuthType[]) => SetMetadata(AUTH_TYPE_KEY, authTypes)\n                    \n                \n\n\n        \n    \n\n    src/auth/constants/auth.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AUTH_TYPE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'authType'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        REQUEST_USER_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'user'\n                    \n                \n\n\n        \n    \n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
