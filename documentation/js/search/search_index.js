var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.28,1,2.406]],["body/controllers/AppController.html",[0,2.15,1,4.043,2,1.767,3,0.32,4,0.283,5,0.283,6,4.156,7,0.436,8,0.023,9,1.044,10,3.675,11,4.156,12,0.32,13,0.07,14,2.423,15,1.767,16,4.156,17,1.666,18,1.767,19,4.88,20,0.018,21,0.018]],["title/modules/AppModule.html",[22,1.138,23,2.406]],["body/modules/AppModule.html",[1,3.226,2,1.445,3,0.177,4,0.157,5,0.157,7,0.506,8,0.023,9,0.579,10,3.348,11,2.306,12,0.177,13,0.039,20,0.012,21,0.012,22,1.525,23,4.735,24,1.178,25,1.178,26,1.344,27,1.344,28,1.178,29,2.352,30,1.344,31,2.306,32,2.306,33,2.306,34,3.348,35,3.631,36,3.462,37,3.631,38,3.627,39,3.106,40,1.98,41,1.344,42,1.256,43,2.041,44,2.721,45,2.707,46,2.707,47,2.707,48,1.442,49,2.707,50,2.707,51,1.686,52,1.178,53,1.534,54,2.707,55,2.707,56,1.178,57,1.344,58,2.707,59,1.344,60,2.707,61,3.398,62,4.452,63,1.844,64,3.989,65,3.989,66,2.707,67,3.989,68,2.707,69,3.989,70,2.707,71,1.555,72,3.572,73,2.306,74,2.707,75,2.707,76,1.256,77,3.989,78,2.707,79,2.707,80,2.707,81,2.707,82,2.707,83,1.844,84,2.707,85,0.421,86,2.707,87,1.555,88,2.707,89,2.707,90,2.707,91,2.707,92,2.707,93,2.707,94,2.707,95,2.707,96,1.844,97,2.707,98,2.707,99,2.707,100,2.041,101,2.707]],["title/injectables/AppService.html",[10,2.029,102,1.013]],["body/injectables/AppService.html",[3,0.319,4,0.281,5,0.281,7,0.357,8,0.022,9,1.039,10,3.401,12,0.319,13,0.07,16,5.663,17,2.022,18,1.76,20,0.018,21,0.018,102,1.699,103,2.256,104,4.14,105,0.61,106,2.277,107,0.863,108,4.86,109,1.869,110,4.86,111,4.86,112,4.14]],["title/controllers/AuthController.html",[0,1.28,113,2.406]],["body/controllers/AuthController.html",[0,1.825,2,1.825,3,0.33,4,0.292,5,0.292,7,0.444,8,0.022,9,1.078,12,0.33,13,0.072,14,2.502,15,1.825,20,0.019,21,0.019,113,4.123,114,4.293,115,3.139,116,5.04,117,2.685,118,4.293,119,5.04,120,5.04]],["title/modules/AuthModule.html",[22,1.138,34,2.029]],["body/modules/AuthModule.html",[2,1.948,3,0.273,4,0.241,5,0.241,7,0.462,8,0.022,9,0.891,12,0.273,13,0.06,20,0.017,21,0.017,22,1.917,24,1.813,25,1.813,26,2.069,27,2.069,28,1.813,29,2.956,30,2.956,34,3.897,39,2.865,40,2.67,41,2.069,42,1.934,44,2.394,113,4.055,117,3.78,118,3.55,121,3.55,122,3.55,123,3.55,124,4.168,125,3.663,126,4.168,127,3.55]],["title/injectables/AuthService.html",[102,1.013,117,1.882]],["body/injectables/AuthService.html",[3,0.257,4,0.227,5,0.227,7,0.38,8,0.022,9,0.84,12,0.257,13,0.056,15,1.422,17,2.284,18,1.874,20,0.016,21,0.016,53,1.51,71,2.256,76,1.823,83,2.675,85,0.805,96,3.941,102,1.484,103,1.823,105,0.493,106,1.989,107,1.027,109,1.989,117,2.757,125,2.675,128,3.345,129,2.365,130,5.238,131,5.174,132,2.093,133,3.345,134,3.321,135,3.928,136,2.115,137,1.874,138,1.321,139,3.928,140,3.928,141,5.174,142,3.928,143,2.675,144,3.345,145,3.928,146,2.256,147,3.928,148,3.928]],["title/classes/CreateManyUsersDTO.html",[13,0.051,149,2.029]],["body/classes/CreateManyUsersDTO.html",[3,0.27,4,0.239,5,0.239,7,0.46,8,0.023,12,0.27,13,0.085,20,0.017,21,0.017,53,1.586,76,2.75,85,1.01,105,0.518,107,0.732,149,3.068,150,1.586,151,4.029,152,3.328,153,2.81,154,1.624,155,3.69,156,3.111,157,1.183,158,4.126,159,4.55,160,4.029,161,4.55,162,4.126,163,3.514,164,4.126,165,4.55,166,3.068,167,4.55,168,1.686,169,1.795,170,2.57,171,2.57,172,3.639,173,1.795,174,3.514]],["title/classes/CreatePostDto.html",[13,0.051,175,2.029]],["body/classes/CreatePostDto.html",[3,0.114,4,0.101,5,0.101,7,0.357,8,0.022,12,0.114,13,0.051,17,1.984,20,0.009,21,0.009,56,1.234,76,1.916,85,1.003,105,0.219,107,1.032,138,1.514,150,0.671,154,1.089,157,1.667,159,2.416,160,3.113,161,2.416,163,1.486,165,2.416,166,2.795,167,2.416,168,0.713,171,1.087,172,3.315,173,0.759,174,2.416,175,1.629,176,5.048,177,1.486,178,3.585,179,4.369,180,2.441,181,2.703,182,4.03,183,3.053,184,2.441,185,3.094,186,2.233,187,2.829,188,4.369,189,1.255,190,1.745,191,2.837,192,4.044,193,2.059,194,1.745,195,1.745,196,1.632,197,1.745,198,1.745,199,2.837,200,2.837,201,4.03,202,2.837,203,1.745,204,2.2,205,2.416,206,1.745,207,4.542,208,1.629,209,1.745,210,1.745,211,1.745,212,2.464,213,3.516,214,4.129,215,2.837,216,1.745,217,2.371,218,1.745,219,3.516,220,2.837,221,2.837,222,2.837,223,1.745,224,1.745,225,2.837,226,3.516,227,2.837,228,2.139,229,2.837,230,2.837,231,1.745,232,1.745,233,1.745,234,1.486,235,3.053,236,1.486,237,3.516,238,3.516,239,2.139,240,2.416,241,2.416,242,2.416,243,2.416,244,2.416,245,1.486,246,1.745,247,3.425,248,1.745,249,2.416,250,2.837,251,1.745,252,1.745,253,1.745,254,2.416,255,1.087,256,1.745,257,1.745,258,1.745,259,1.745,260,1.745,261,2.703,262,2.837,263,2.139,264,2.848,265,2.812,266,2.416,267,1.316,268,1.316,269,1.316,270,1.486,271,1.486,272,1.189,273,1.189,274,3.868,275,1.745,276,1.745,277,1.745,278,2.416,279,1.486,280,1.486,281,1.745,282,1.745,283,1.745,284,1.745,285,1.486,286,1.745,287,2.139,288,1.745]],["title/classes/CreatePostMetaOptionsDto.html",[13,0.051,204,1.882]],["body/classes/CreatePostMetaOptionsDto.html",[3,0.309,4,0.273,5,0.273,7,0.346,8,0.022,12,0.309,13,0.083,17,1.984,20,0.018,21,0.018,56,2.528,85,0.733,105,0.591,107,0.836,150,1.811,154,1.766,157,1.351,166,3.337,168,1.925,196,1.573,204,3.096,263,4.381,265,3.209,272,3.957,287,4.751,289,2.697,290,4.013,291,4.711,292,4.711]],["title/classes/CreateTagDto.html",[13,0.051,293,2.201]],["body/classes/CreateTagDto.html",[3,0.209,4,0.184,5,0.184,7,0.329,8,0.022,12,0.209,13,0.064,17,2.273,20,0.014,21,0.014,85,0.924,105,0.4,107,1.054,137,1.88,138,1.574,150,1.224,154,1.363,157,1.703,166,2.981,168,1.301,172,3.535,173,1.385,180,3.535,184,3.535,185,4.045,192,3.837,196,0.862,201,3.381,212,2.303,234,2.712,235,4.421,236,2.712,237,4.799,238,4.799,239,3.381,240,3.819,241,3.819,242,3.819,243,3.819,244,3.819,245,2.712,263,3.381,264,3.002,265,3.838,266,3.819,267,2.401,268,2.401,269,2.401,274,4.249,279,2.712,280,3.819,285,2.712,293,2.793,294,5.248,295,2.712,296,3.184,297,3.184,298,3.184,299,3.184,300,3.184,301,3.184,302,3.184,303,3.184,304,3.184,305,2.712]],["title/classes/CreateUserDto.html",[13,0.051,156,1.754]],["body/classes/CreateUserDto.html",[3,0.225,4,0.199,5,0.199,7,0.252,8,0.022,12,0.225,13,0.068,17,2.248,20,0.015,21,0.015,85,0.906,96,4.158,105,0.431,107,1.033,138,1.207,143,3.68,150,1.32,151,4.603,153,2.339,154,1.436,156,2.346,157,1.67,166,3.343,168,1.403,189,1.436,239,3.563,264,2.518,265,4.158,267,2.589,268,2.589,269,2.589,305,4.025,306,4.075,307,4.603,308,3.434,309,3.434,310,3.434,311,3.434,312,3.434,313,3.434,314,3.434,315,5.822,316,4.726,317,4.726,318,4.025,319,4.726,320,4.726,321,4.726,322,6.585,323,4.726,324,5.822,325,4.726,326,4.726,327,4.726,328,3.434,329,4.726,330,5.404,331,3.434,332,3.434]],["title/classes/GetPostBaseDto.html",[13,0.051,333,2.406]],["body/classes/GetPostBaseDto.html",[3,0.277,4,0.245,5,0.245,7,0.44,8,0.022,12,0.277,13,0.086,20,0.017,21,0.017,85,0.844,105,0.53,107,0.963,138,1.615,150,1.624,154,1.649,157,1.556,168,1.727,173,1.838,217,3.632,264,3.193,333,3.695,334,4.519,335,3.186,336,5.104,337,5.104,338,5.425,339,4.225,340,4.225,341,3.598,342,5.104,343,3.116,344,2.878,345,3.186,346,2.427,347,2.878,348,3.598]],["title/classes/GetPostDto.html",[13,0.051,346,2.029]],["body/classes/GetPostDto.html",[3,0.304,4,0.269,5,0.269,7,0.459,8,0.022,12,0.304,13,0.09,20,0.018,21,0.018,150,1.784,168,1.896,173,2.019,217,3.306,264,3.334,333,3.16,334,3.499,335,3.499,336,3.952,337,3.952,341,3.952,342,5.33,343,3.594,344,3.16,345,3.499,346,3.306,347,3.92,348,4.902]],["title/classes/GetUsersParamDto.html",[13,0.051,349,2.201]],["body/classes/GetUsersParamDto.html",[3,0.281,4,0.248,5,0.248,7,0.443,8,0.022,12,0.281,13,0.086,20,0.017,21,0.017,53,2.105,85,0.939,105,0.538,107,0.76,138,1.398,150,1.647,154,1.663,155,3.409,157,1.229,168,1.751,171,2.668,173,1.864,189,1.833,192,3.409,212,1.751,261,4.127,264,2.916,274,4.127,349,3.409,350,4.662,351,3.649,352,2.525,353,4.284,354,5.474,355,5.474,356,4.284,357,4.284,358,4.284]],["title/entities/MetaOption.html",[359,1.64,360,1.754]],["body/entities/MetaOption.html",[3,0.232,4,0.205,5,0.205,7,0.354,8,0.022,12,0.232,13,0.051,17,1.645,20,0.015,21,0.015,57,3.159,85,0.99,87,2.029,105,0.443,107,1.095,154,1.464,157,1.768,189,1.464,196,1.82,208,2.767,217,3.383,226,4.104,287,4.135,289,2.954,352,2.109,359,2.237,360,2.392,361,3.009,362,4.671,363,4.671,364,4.671,365,3.532,366,3.735,367,3.532,368,2.406,369,3.282,370,3.532,371,3.009,372,4.104,373,4.104,374,3.532,375,3.532,376,4.671,377,3.532,378,2.663,379,3.282,380,4.104,381,4.104,382,1.444,383,2.663]],["title/controllers/MetaOptionsController.html",[0,1.28,384,2.406]],["body/controllers/MetaOptionsController.html",[0,1.504,2,1.504,3,0.272,4,0.241,5,0.241,7,0.436,8,0.022,9,0.888,12,0.272,13,0.059,14,2.062,15,1.504,18,1.504,20,0.017,21,0.017,56,2.335,57,2.664,85,0.646,105,0.521,106,2.063,107,0.737,109,1.597,115,2.587,129,2.429,136,1.698,137,1.504,138,1.061,157,1.191,169,2.335,196,1.701,204,3.348,273,2.829,289,2.491,384,3.655,385,3.538,386,5.366,387,4.154,388,4.154,389,5.366,390,2.829,391,1.928,392,3.082,393,3.538,394,3.538,395,4.154,396,4.154,397,3.538,398,4.154]],["title/modules/MetaOptionsModule.html",[22,1.138,35,2.201]],["body/modules/MetaOptionsModule.html",[2,1.965,3,0.277,4,0.245,5,0.245,7,0.48,8,0.022,9,0.904,12,0.277,13,0.06,20,0.017,21,0.017,22,1.93,24,1.838,25,1.838,26,2.097,27,2.097,28,1.838,29,2.975,30,2.097,35,4.168,40,2.693,41,2.097,42,1.961,44,2.427,51,2.631,52,1.838,56,2.361,57,2.097,289,1.961,360,2.097,384,4.082,392,3.844,393,3.598,394,3.598,399,3.598,400,3.598,401,4.225,402,4.225,403,2.631,404,4.225]],["title/injectables/MetaOptionsService.html",[102,1.013,392,2.029]],["body/injectables/MetaOptionsService.html",[3,0.253,4,0.224,5,0.224,7,0.467,8,0.023,9,0.827,12,0.253,13,0.055,15,1.4,18,1.4,20,0.016,21,0.016,52,1.682,56,2.228,85,0.797,102,1.468,103,1.794,105,0.485,106,1.969,107,0.909,109,1.486,129,2.346,132,2.06,136,2.092,137,1.854,138,1.308,146,2.22,169,2.228,196,1.046,204,3.387,273,2.633,289,2.665,360,2.542,382,1.58,391,1.794,392,2.941,403,2.408,405,4.889,406,3.293,407,3.297,408,3.866,409,3.51,410,3.866,411,4.361,412,5.12,413,3.866,414,2.408,415,2.633,416,3.866,417,3.866,418,2.22,419,3.866]],["title/interfaces/Paginated.html",[420,2.406,421,2.201]],["body/interfaces/Paginated.html",[3,0.286,4,0.252,5,0.252,8,0.022,12,0.286,17,2.254,20,0.017,21,0.017,56,2.784,85,1.067,105,0.547,154,1.682,189,1.944,420,2.969,421,3.448,422,4.36,423,3.713,424,5.449,425,5.449,426,5.18,427,6.398,428,3.713,429,3.713,430,3.713,431,3.713,432,3.713,433,3.713,434,3.713,435,3.713,436,3.713]],["title/modules/PaginationModule.html",[22,1.138,36,2.029]],["body/modules/PaginationModule.html",[3,0.292,4,0.258,5,0.258,7,0.412,8,0.022,9,0.953,12,0.292,13,0.064,20,0.017,21,0.017,22,1.978,24,1.938,25,1.938,26,2.212,27,2.212,28,1.938,29,3.05,30,3.05,36,3.956,40,2.786,41,2.212,42,2.068,437,3.794,438,3.794,439,3.794,440,4.112,441,4.455,442,4.455]],["title/injectables/PaginationProvider.html",[102,1.013,440,2.029]],["body/injectables/PaginationProvider.html",[3,0.192,4,0.169,5,0.169,7,0.44,8,0.023,9,0.626,12,0.192,13,0.042,15,1.06,18,1.06,20,0.017,21,0.013,56,1.273,71,3.547,83,1.993,85,0.771,102,1.211,103,1.358,105,0.367,106,1.623,107,0.749,109,1.125,129,2.024,132,2.25,136,2.024,137,1.529,138,1.078,146,1.681,193,3.115,343,3.115,345,2.207,382,1.196,407,2.845,409,3.547,418,2.425,421,2.63,424,2.492,425,2.492,426,2.492,428,2.492,429,4.219,430,2.492,431,4.619,432,2.492,433,2.492,434,2.492,435,2.492,436,2.492,440,2.425,443,2.492,444,4.222,445,2.926,446,4.657,447,2.926,448,4.222,449,2.926,450,2.926,451,3.596,452,2.926,453,2.926,454,2.492,455,2.492,456,2.926,457,2.926,458,2.926,459,2.492,460,6.322,461,5.423,462,2.207,463,4.222,464,2.926,465,2.926,466,2.926,467,1.559,468,2.926,469,2.926,470,2.926,471,2.926,472,2.926,473,2.926,474,4.222,475,2.926,476,2.926,477,2.926,478,2.926,479,2.926]],["title/classes/PaginationQueryDto.html",[13,0.051,343,2.029]],["body/classes/PaginationQueryDto.html",[3,0.264,4,0.233,5,0.233,7,0.386,8,0.022,12,0.264,13,0.084,20,0.016,21,0.016,85,1.003,105,0.506,107,0.934,138,1.586,150,1.55,154,1.599,157,1.509,168,1.647,171,2.51,189,2.008,193,3.022,264,3.122,343,3.022,344,3.991,480,3.433,481,3.991,482,3.649,483,3.968,484,3.968,485,4.482,486,5.263,487,4.031,488,4.031,489,5.859,490,3.433,491,4.031,492,4.031,493,3.433,494,4.031,495,4.031,496,4.031,497,4.031]],["title/classes/PatchPostDto.html",[13,0.051,498,2.201]],["body/classes/PatchPostDto.html",[3,0.285,4,0.252,5,0.252,7,0.446,8,0.022,12,0.285,13,0.079,20,0.017,21,0.017,85,0.676,105,0.545,107,0.771,150,1.67,154,1.678,157,1.246,166,3.172,168,1.776,169,1.89,172,3.762,173,1.89,175,2.495,189,1.678,196,1.729,212,1.776,261,4.164,347,3.762,352,2.536,498,3.44,499,4.704,500,3.7,501,5.523,502,4.345,503,5.523,504,4.345,505,4.345,506,3.7,507,3.276,508,3.7]],["title/classes/PatchUserDto.html",[13,0.051,509,2.406]],["body/classes/PatchUserDto.html",[3,0.329,4,0.291,5,0.291,7,0.443,8,0.022,12,0.329,13,0.072,20,0.019,21,0.019,150,1.93,153,3.419,156,2.492,169,2.184,170,3.126,347,4.113,506,4.275,509,4.113,510,4.275,511,6.039,512,4.275,513,4.275]],["title/entities/Post.html",[196,0.956,359,1.64]],["body/entities/Post.html",[3,0.137,4,0.121,5,0.121,7,0.404,8,0.023,12,0.137,13,0.03,17,2.049,20,0.01,21,0.01,53,2.027,56,1.425,57,1.037,76,2.993,85,1.042,87,1.2,105,0.262,107,1.104,138,1.588,154,0.996,157,1.783,179,3.442,180,2.752,181,3.746,182,4.302,183,3.442,184,2.752,185,2.752,186,2.517,187,2.517,188,3.442,189,0.996,196,1.094,204,1.113,208,3.277,217,1.882,247,3.746,255,2.04,270,1.78,271,1.78,272,1.423,273,1.423,278,4.859,289,0.97,352,1.554,359,1.521,360,2.271,366,2.752,368,3.886,369,4.346,371,1.78,379,3.995,380,2.79,381,2.79,382,0.854,383,2.47,403,1.302,483,3.449,514,1.78,515,2.752,516,2.09,517,3.276,518,5.271,519,2.09,520,3.896,521,2.09,522,3.974,523,3.974,524,2.79,525,2.09,526,2.09,527,3.276,528,2.09,529,2.09,530,3.276,531,2.09,532,2.09,533,2.79,534,2.47,535,2.09,536,2.09,537,2.808,538,1.78,539,3.276,540,2.09,541,2.09,542,3.276,543,2.09,544,3.276,545,2.79,546,3.276,547,2.09,548,2.09,549,2.09,550,2.09]],["title/controllers/PostController.html",[0,1.28,551,2.406]],["body/controllers/PostController.html",[0,0.957,2,0.957,3,0.173,4,0.153,5,0.153,7,0.424,8,0.023,9,0.565,12,0.173,13,0.038,14,1.312,15,0.957,17,1.595,18,1.871,20,0.012,21,0.012,48,2.489,85,0.804,105,0.332,106,1.507,107,0.917,109,1.986,115,1.646,129,2.68,136,2.111,137,1.871,138,1.319,157,1.482,173,1.15,175,3.319,186,2.441,189,1.419,196,1.728,201,3.896,212,2.111,346,2.967,352,1.507,390,1.8,391,1.227,467,2.088,498,3.6,507,1.993,508,3.338,551,2.669,552,2.251,553,3.338,554,3.919,555,3.919,556,3.919,557,2.251,558,3.919,559,3.919,560,3.919,561,5.166,562,5.166,563,3.919,564,2.643,565,2.643,566,2.643,567,3.181,568,2.643,569,2.643,570,3.978,571,3.919,572,2.643,573,3.978,574,2.643,575,3.338,576,3.919,577,4.4,578,2.643,579,2.643,580,2.251,581,2.955,582,3.338,583,2.955,584,2.251,585,3.978,586,3.978,587,2.251,588,1.993,589,2.251,590,1.8,591,2.251,592,2.643,593,2.643,594,2.643,595,2.643,596,3.338,597,3.338,598,2.643,599,2.643,600,2.643,601,2.643,602,2.643,603,2.643]],["title/modules/PostModule.html",[22,1.138,37,2.201]],["body/modules/PostModule.html",[2,1.791,3,0.241,4,0.213,5,0.213,7,0.497,8,0.023,9,0.785,12,0.241,13,0.052,20,0.015,21,0.015,22,1.801,24,1.597,25,1.597,26,1.822,27,1.822,28,1.597,29,2.776,30,1.822,36,3.696,37,4.335,38,3.696,39,3.429,40,2.455,41,1.822,42,1.703,44,2.84,48,3.429,51,2.285,52,1.597,57,1.822,127,3.125,196,0.993,289,1.703,360,2.455,403,2.285,551,3.809,584,3.125,604,3.125,605,3.67,606,3.125,607,3.67,608,3.67,609,3.125,610,3.67,611,3.67,612,3.67]],["title/injectables/PostService.html",[48,1.882,102,1.013]],["body/injectables/PostService.html",[3,0.115,4,0.102,5,0.102,7,0.436,8,0.023,9,0.375,12,0.115,13,0.025,14,0.87,15,1.649,17,1.227,18,1.499,20,0.009,21,0.009,48,1.517,52,0.763,53,0.674,57,0.87,59,2.551,71,1.007,76,2.113,85,0.708,102,0.817,103,0.814,105,0.22,106,1.095,107,0.808,109,1.591,129,2.425,132,0.934,133,1.493,134,2.421,136,1.86,137,1.649,138,1.163,144,1.493,146,2.377,175,2.801,181,3.433,187,3.335,189,1.093,193,1.007,196,1.54,205,1.493,254,1.493,255,1.773,289,0.814,346,2.377,352,1.976,360,0.87,372,1.493,382,0.716,391,0.814,403,1.092,407,3.408,409,2.951,411,3.062,414,2.239,415,1.194,418,3.517,421,1.092,440,2.951,446,2.711,451,2.425,459,1.493,462,1.322,467,2.425,481,1.194,482,1.092,498,2.835,507,1.322,515,2.819,537,0.934,553,2.425,557,2.425,567,1.939,570,1.493,573,3.062,588,1.322,589,1.493,590,1.194,591,1.493,609,1.493,613,1.493,614,2.425,615,2.847,616,3.595,617,1.753,618,1.753,619,2.147,620,1.753,621,2.847,622,1.753,623,2.847,624,1.753,625,1.493,626,1.322,627,1.753,628,1.753,629,1.753,630,1.753,631,1.753,632,1.753,633,2.711,634,1.753,635,2.847,636,2.847,637,3.595,638,1.753,639,1.753,640,1.753,641,1.753,642,1.753,643,1.753,644,1.753,645,1.753,646,2.847,647,2.847,648,1.753,649,1.753,650,1.753,651,1.753,652,1.753,653,1.493,654,3.677,655,1.753,656,2.711,657,2.425,658,3.433,659,3.062,660,3.062,661,2.711,662,3.062,663,1.753,664,1.753,665,1.753,666,1.322,667,1.493,668,1.753,669,1.753,670,1.753,671,1.493,672,1.493,673,2.847,674,1.753,675,2.847,676,1.753,677,2.847,678,1.753,679,2.847,680,1.753,681,2.847,682,1.753,683,2.847,684,1.753,685,2.847,686,1.753,687,1.493]],["title/entities/Tag.html",[359,1.64,537,1.882]],["body/entities/Tag.html",[3,0.177,4,0.156,5,0.156,7,0.292,8,0.022,12,0.177,13,0.039,17,2.19,20,0.012,21,0.012,76,2.978,85,1.052,87,1.548,105,0.338,107,1.139,137,1.711,138,1.332,154,1.208,157,1.84,180,3.218,184,3.218,185,3.218,189,1.208,196,1.575,208,2.996,212,1.931,217,3.343,352,1.817,359,1.846,362,4.024,363,4.024,364,4.024,366,3.218,368,3.789,369,4.37,373,3.387,376,4.024,378,2.032,379,3.964,382,1.101,383,2.998,520,4.442,522,4.389,523,4.389,524,3.387,533,4.442,534,3.933,537,2.118,538,2.295,545,3.387,633,3.563,687,3.387,688,2.295,689,4.725,690,2.695,691,4.725,692,2.695,693,2.695,694,2.695,695,2.695,696,2.695,697,2.695,698,2.695,699,2.695,700,2.695]],["title/controllers/TagsController.html",[0,1.28,701,2.406]],["body/controllers/TagsController.html",[0,1.265,2,1.265,3,0.229,4,0.202,5,0.202,7,0.4,8,0.023,9,0.747,12,0.229,13,0.05,14,1.734,15,1.265,18,1.974,20,0.015,21,0.015,59,2.707,85,0.848,105,0.438,106,1.838,107,0.968,109,2.096,115,2.175,129,2.741,136,2.228,137,1.974,138,1.392,157,1.564,169,2.08,187,2.175,189,1.927,196,1.476,293,3.95,352,2.254,390,2.378,391,1.621,397,2.974,567,4.422,581,4.111,583,2.633,619,2.633,701,3.256,702,2.974,703,4.781,704,3.492,705,3.492,706,3.492,707,3.492,708,3.492,709,3.492,710,2.974,711,2.974,712,3.492,713,3.492,714,3.492,715,3.492,716,3.492,717,3.492,718,3.492]],["title/modules/TagsModule.html",[22,1.138,38,2.029]],["body/modules/TagsModule.html",[2,1.939,3,0.271,4,0.24,5,0.24,7,0.477,8,0.022,9,0.885,12,0.271,13,0.059,20,0.017,21,0.017,22,1.911,24,1.801,25,1.801,26,2.055,27,2.055,28,1.801,29,2.946,30,2.946,38,3.891,40,2.658,41,2.055,42,1.921,44,2.377,51,2.578,52,1.801,59,3.519,537,2.205,701,4.042,711,3.526,719,3.526,720,3.526,721,3.526,722,4.14,723,4.14,724,3.526,725,4.14]],["title/injectables/TagsService.html",[59,1.754,102,1.013]],["body/injectables/TagsService.html",[3,0.195,4,0.172,5,0.172,7,0.424,8,0.023,9,0.635,12,0.195,13,0.042,15,1.075,18,1.977,20,0.013,21,0.013,52,1.292,59,2.118,76,1.98,85,0.9,102,1.224,103,1.378,105,0.373,106,1.64,107,1.026,109,2.099,129,2.742,132,1.582,136,2.363,137,2.094,138,1.477,146,1.705,187,1.849,189,1.964,293,3.601,352,2.223,382,1.213,391,1.378,407,3.854,409,3.135,414,3.4,415,2.022,418,3.135,537,2.273,567,2.906,619,3.217,653,3.634,710,2.529,724,2.529,726,2.529,727,4.266,728,4.266,729,4.266,730,2.969,731,2.969,732,4.266,733,4.266,734,2.969,735,2.969,736,4.266,737,2.969,738,4.266,739,2.969,740,2.969,741,2.969,742,2.969,743,3.634,744,2.969,745,2.969,746,2.969,747,2.969]],["title/entities/User.html",[53,1.358,359,1.64]],["body/entities/User.html",[3,0.209,4,0.185,5,0.185,7,0.33,8,0.022,12,0.209,13,0.046,17,2.208,20,0.014,21,0.014,53,1.727,76,2.618,85,1.037,87,1.834,96,3.54,105,0.401,107,1.095,143,3.54,154,1.365,157,1.769,189,1.365,196,1.669,208,3.542,306,3.919,307,4.427,352,1.999,359,2.085,366,3.54,368,3.842,369,4.405,378,2.407,379,4.049,382,1.305,522,4.877,523,4.877,534,3.388,633,3.919,748,2.719,749,6.468,750,3.193,751,3.193,752,3.193,753,3.193,754,3.193,755,3.193,756,4.493,757,3.193,758,4.493]],["title/injectables/UserCreateManyProvider.html",[102,1.013,759,2.029]],["body/injectables/UserCreateManyProvider.html",[3,0.206,4,0.182,5,0.182,7,0.433,8,0.023,9,0.671,12,0.206,13,0.045,14,1.557,15,1.135,18,1.135,20,0.014,21,0.014,53,2.152,71,1.801,85,0.69,100,2.364,102,1.272,103,1.455,105,0.394,106,1.705,107,0.787,109,1.206,129,2.104,132,1.671,136,1.813,137,1.606,138,1.133,149,3.391,152,1.953,156,1.557,169,2.24,170,2.763,212,1.813,228,3.881,382,1.281,391,2.059,407,2.956,414,1.953,418,3.521,467,2.742,626,2.364,654,3.881,656,3.881,658,3.881,743,2.671,759,2.548,760,4.384,761,2.671,762,3.778,763,3.136,764,5.221,765,3.136,766,3.778,767,3.136,768,3.136,769,2.364,770,4.436,771,3.136,772,3.136,773,3.136,774,3.136,775,4.436,776,2.671,777,3.136,778,2.671,779,3.136,780,3.136,781,3.136,782,3.136,783,3.136,784,3.136,785,3.136,786,3.136,787,4.436,788,3.136,789,3.136,790,3.136,791,3.136]],["title/injectables/UserService.html",[102,1.013,134,1.754]],["body/injectables/UserService.html",[3,0.117,4,0.103,5,0.103,7,0.429,8,0.023,9,0.381,12,0.117,13,0.052,15,1.514,18,1.514,20,0.009,21,0.009,52,0.776,53,2.249,62,4.408,63,1.215,71,1.658,83,1.215,85,0.715,100,3.463,102,0.828,103,0.828,105,0.224,106,1.11,107,0.815,109,1.608,117,2.757,125,1.215,129,2.437,130,1.519,132,1.538,134,1.433,136,1.877,137,1.663,138,1.173,143,2.848,146,2.638,149,2.638,152,1.111,155,2.861,156,2.28,169,0.776,170,1.798,186,1.111,189,1.692,212,1.877,228,3.463,255,1.798,306,2.177,349,2.604,352,2.072,382,0.729,391,1.34,407,3.198,409,2.401,414,2.266,415,1.215,418,2.638,446,2.743,467,2.619,481,2.478,482,2.266,493,1.519,590,1.215,614,2.459,625,1.519,626,1.345,654,3.707,656,2.743,657,2.459,658,3.707,659,3.098,660,3.098,661,3.153,662,3.098,666,1.345,671,2.459,672,2.459,759,2.401,762,2.459,764,1.519,766,2.459,769,1.345,776,2.459,778,3.098,792,1.519,793,2.459,794,2.887,795,2.887,796,2.887,797,2.887,798,2.887,799,1.783,800,3.638,801,3.638,802,4.181,803,3.638,804,1.783,805,1.783,806,2.887,807,1.783,808,2.887,809,1.783,810,2.887,811,1.783,812,1.783,813,2.887,814,1.783,815,2.887,816,2.887,817,2.459,818,2.887,819,1.783,820,1.519,821,1.783,822,1.519,823,1.519,824,1.519,825,1.783,826,1.783,827,1.783,828,1.783,829,1.783,830,1.783,831,1.783,832,1.783,833,1.783,834,1.783,835,1.783,836,1.783,837,1.783,838,1.783,839,2.887,840,2.459,841,2.887,842,1.783,843,1.783,844,1.783,845,1.783,846,1.783,847,1.783,848,1.783,849,2.887,850,3.638,851,2.887,852,3.638,853,1.783,854,1.783,855,1.783,856,1.783,857,1.783,858,1.783,859,1.783]],["title/controllers/UsersController.html",[0,1.28,860,2.406]],["body/controllers/UsersController.html",[0,0.827,2,0.827,3,0.15,4,0.132,5,0.132,7,0.418,8,0.022,9,0.488,12,0.15,13,0.033,14,1.134,15,0.827,18,1.98,20,0.011,21,0.011,85,0.914,105,0.287,106,1.35,107,0.852,109,1.845,115,1.423,129,2.596,134,2.122,136,1.961,137,1.98,138,1.225,149,3.14,152,2.663,155,3.405,156,2.714,157,1.376,160,3.618,170,2.663,173,0.994,186,1.423,189,1.995,192,2.988,193,2.016,196,1.157,208,2.756,212,2.234,255,1.423,349,3.405,352,0.878,390,1.556,391,1.629,467,1.87,481,3.723,482,3.66,485,1.945,509,4.002,577,2.99,580,2.99,581,3.618,582,3.641,583,3.618,585,2.99,586,2.99,587,1.945,588,1.722,590,1.556,596,1.945,597,2.99,820,1.945,840,2.99,860,2.391,861,1.945,862,3.51,863,3.51,864,3.51,865,3.51,866,2.284,867,3.51,868,2.284,869,2.284,870,2.284,871,2.284,872,2.284,873,3.51,874,3.51,875,3.51,876,2.284,877,3.51,878,2.99,879,2.284,880,3.51,881,3.51,882,3.51,883,2.284,884,3.51,885,3.51,886,2.284,887,2.284,888,2.284,889,2.284,890,2.284,891,2.284,892,2.284,893,2.284,894,1.945,895,4.275,896,2.284,897,2.284,898,2.284,899,1.945,900,2.284,901,2.284,902,2.284,903,2.284,904,2.284,905,2.284,906,2.284,907,2.284,908,2.284,909,2.284,910,2.284]],["title/modules/UsersModule.html",[22,1.138,39,1.882]],["body/modules/UsersModule.html",[2,1.809,3,0.244,4,0.216,5,0.216,7,0.499,8,0.023,9,0.797,12,0.244,13,0.053,20,0.016,21,0.016,22,1.815,24,1.621,25,1.621,26,1.849,27,1.849,28,1.621,29,2.798,30,2.798,34,2.869,39,3.621,40,2.48,41,1.849,42,1.729,44,2.139,51,2.32,52,1.621,53,1.432,61,3.173,63,2.537,125,3.402,134,3.464,169,1.621,759,3.712,769,2.809,822,3.173,823,3.173,824,3.173,860,3.838,894,3.173,911,3.173,912,3.173,913,3.173,914,3.725,915,3.725,916,3.725,917,3.725,918,3.725,919,3.725]],["title/coverage.html",[920,3.634]],["body/coverage.html",[0,2.13,1,1.889,5,0.161,6,2.363,8,0.022,10,1.593,13,0.094,20,0.013,21,0.013,28,1.207,43,2.092,48,1.478,53,1.067,56,1.207,57,2.016,59,1.377,72,2.092,85,0.432,102,1.787,104,2.363,113,1.889,114,2.363,117,1.478,128,2.363,134,1.377,149,1.593,151,3.063,152,1.728,153,3.272,155,1.728,156,1.377,169,1.207,175,1.593,176,2.363,177,2.363,196,1.301,204,1.478,272,1.889,289,2.455,290,2.363,293,1.728,294,2.363,295,2.363,333,1.889,334,3.063,335,3.063,343,1.593,344,1.889,346,1.593,349,1.728,350,2.363,351,2.363,359,2.455,360,1.377,361,2.363,384,1.889,385,2.363,392,1.593,405,2.363,406,2.363,420,1.889,421,1.728,423,2.363,440,1.593,443,2.363,467,1.478,480,2.363,498,1.728,499,2.363,500,2.363,509,1.889,510,2.363,514,2.363,537,1.478,551,1.889,552,2.363,613,2.363,688,2.363,701,1.889,702,2.363,726,2.363,748,2.363,759,1.593,760,2.363,761,2.363,792,2.363,793,2.363,860,1.889,861,2.363,920,2.092,921,2.363,922,2.774,923,2.774,924,7.177,925,6.46,926,2.774,927,5.881,928,4.805,929,5.629,930,2.363,931,2.774,932,2.774,933,4.805,934,4.805,935,2.774,936,2.774,937,2.774]],["title/dependencies.html",[25,1.849,938,2.514]],["body/dependencies.html",[8,0.023,9,0.981,13,0.082,20,0.018,21,0.018,25,1.996,52,1.996,63,3.125,168,1.875,171,2.858,173,1.996,382,1.875,454,3.908,455,3.908,512,3.908,513,3.908,939,4.588,940,4.588,941,6.226,942,4.588,943,4.588,944,4.588,945,4.588,946,4.588,947,4.588,948,4.588,949,4.588,950,4.588,951,4.588,952,4.588,953,4.588,954,4.588,955,4.588,956,4.588,957,4.588,958,4.588]],["title/miscellaneous/enumerations.html",[959,1.695,960,3.619]],["body/miscellaneous/enumerations.html",[8,0.022,20,0.018,21,0.018,105,0.594,182,4.392,196,1.576,219,4.96,247,4.392,249,4.96,482,3.627,484,5.314,959,2.716,960,4.028,961,4.729,962,4.729,963,4.729,964,5.824,965,5.824,966,4.729,967,5.824,968,5.824]],["title/miscellaneous/functions.html",[959,1.695,969,3.619]],["body/miscellaneous/functions.html",[8,0.02,20,0.02,21,0.02,28,2.921,105,0.686,930,4.656,959,3.139,969,4.656,970,5.466]],["title/index.html",[105,0.371,971,2.952,972,2.952]],["body/index.html",[4,0.156,8,0.021,20,0.012,21,0.012,42,2.7,112,5.259,192,3.245,212,1.099,213,2.29,409,1.544,462,2.028,490,2.29,515,1.832,575,2.29,661,2.993,666,4.385,667,2.29,817,2.29,878,2.29,899,4.954,920,2.028,921,3.381,973,2.689,974,2.689,975,4.719,976,3.97,977,2.689,978,2.689,979,2.689,980,2.689,981,3.97,982,4.719,983,2.689,984,2.689,985,5.21,986,2.689,987,6.175,988,2.689,989,6.016,990,2.689,991,2.689,992,2.689,993,3.97,994,2.689,995,3.97,996,2.689,997,4.719,998,2.689,999,3.97,1000,2.689,1001,2.689,1002,2.689,1003,2.689,1004,2.689,1005,5.21,1006,2.689,1007,3.97,1008,2.689,1009,2.689,1010,3.97,1011,5.21,1012,2.689,1013,3.97,1014,2.689,1015,3.97,1016,5.816,1017,5.21,1018,2.689,1019,3.97,1020,2.689,1021,2.689,1022,2.689,1023,2.689,1024,5.21,1025,2.689,1026,2.689,1027,2.689,1028,2.689,1029,3.97,1030,2.689,1031,2.689,1032,2.689,1033,2.689,1034,2.689,1035,3.97,1036,2.689,1037,2.689,1038,2.689,1039,3.97,1040,2.689,1041,2.689,1042,4.438,1043,2.689,1044,2.689,1045,2.689,1046,2.689,1047,2.689,1048,2.689,1049,2.689,1050,2.689,1051,3.97,1052,2.689,1053,2.689,1054,2.689,1055,2.689,1056,4.719,1057,2.689,1058,2.689,1059,2.689,1060,2.689,1061,3.97,1062,2.689,1063,2.689,1064,2.689,1065,2.689,1066,3.97,1067,2.689,1068,2.689,1069,2.689,1070,3.97,1071,3.97,1072,2.689,1073,2.689,1074,2.689,1075,2.689,1076,2.689,1077,2.689,1078,2.689,1079,2.689,1080,2.689,1081,2.689,1082,2.689,1083,2.689,1084,2.689,1085,2.689,1086,2.689,1087,2.689,1088,2.689,1089,2.29]],["title/modules.html",[24,2.097]],["body/modules.html",[8,0.018,20,0.018,21,0.018,23,3.31,24,2.115,34,2.791,35,3.027,36,2.791,37,3.027,38,2.791,39,2.59,1042,5.977,1090,7.018,1091,7.018,1092,7.018]],["title/overview.html",[1093,4.105]],["body/overview.html",[2,1.153,8,0.022,10,2.981,20,0.014,21,0.014,22,1.025,23,4.794,24,1.385,25,1.385,26,1.581,27,1.581,28,1.385,29,1.581,30,1.581,31,2.712,32,2.712,33,2.712,34,3.539,35,3.699,36,3.636,37,4.194,38,3.712,39,3.501,40,2.226,41,1.581,42,1.478,48,2.766,59,3.143,87,1.829,103,1.478,117,3.373,121,2.712,122,2.712,123,2.712,134,3.143,150,1.224,193,1.829,318,2.712,392,2.981,399,2.712,400,2.712,420,2.169,437,2.712,438,2.712,439,2.712,440,3.636,604,2.712,606,2.712,719,2.712,720,2.712,721,2.712,759,2.981,911,2.712,912,2.712,913,2.712,1093,2.712,1094,3.184,1095,3.184,1096,3.184,1097,3.184]],["title/properties.html",[154,1.291,938,2.514]],["body/properties.html",[8,0.022,20,0.02,21,0.02,154,1.639,212,2.205,515,3.674,1089,4.594,1098,5.394,1099,5.394,1100,5.394]],["title/miscellaneous/variables.html",[959,1.695,1101,3.619]],["body/miscellaneous/variables.html",[8,0.021,20,0.02,21,0.02,43,4.067,72,4.752,73,4.594,105,0.677,483,4.067,484,4.067,959,3.098,1101,4.594,1102,5.394]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":924,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":1099,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":948,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":955,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":958,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":947,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":925,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":932,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":927,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":929,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":928,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":933,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":934,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":221,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":193,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"injectables/PostService.html":{},"controllers/UsersController.html":{},"overview.html":{}}}],["1.1.23",{"_index":940,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":485,"title":{},"body":{"classes/PaginationQueryDto.html":{},"controllers/UsersController.html":{}}}],["10.0.0",{"_index":941,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":946,"title":{},"body":{"dependencies.html":{}}}],["1024",{"_index":524,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["10})@apiquery({name",{"_index":883,"title":{},"body":{"controllers/UsersController.html":{}}}],["11",{"_index":1097,"title":{},"body":{"overview.html":{}}}],["1234",{"_index":358,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["1234})@isoptional()@isint()@type(undefined",{"_index":356,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["14",{"_index":845,"title":{},"body":{"injectables/UserService.html":{}}}],["16t07:46:32+0000",{"_index":222,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["17.12.2",{"_index":950,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":286,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["2.0.5",{"_index":943,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":577,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":561,"title":{},"body":{"controllers/PostController.html":{}}}],["2024",{"_index":220,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["256",{"_index":533,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["3.2.2",{"_index":942,"title":{},"body":{"dependencies.html":{}}}],["3/6",{"_index":936,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":1096,"title":{},"body":{"overview.html":{}}}],["50",{"_index":935,"title":{},"body":{"coverage.html":{}}}],["512",{"_index":542,"title":{},"body":{"entities/Post.html":{}}}],["6",{"_index":1095,"title":{},"body":{"overview.html":{}}}],["7",{"_index":1094,"title":{},"body":{"overview.html":{}}}],["7.3.0",{"_index":945,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":957,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":318,"title":{},"body":{"classes/CreateUserDto.html":{},"overview.html":{}}}],["8.11.5",{"_index":952,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":238,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["96",{"_index":749,"title":{},"body":{"entities/User.html":{}}}],["alice",{"_index":837,"title":{},"body":{"injectables/UserService.html":{}}}],["alice@doe.com",{"_index":838,"title":{},"body":{"injectables/UserService.html":{}}}],["allowing",{"_index":1030,"title":{},"body":{"index.html":{}}}],["already",{"_index":493,"title":{},"body":{"classes/PaginationQueryDto.html":{},"injectables/UserService.html":{}}}],["amazing",{"_index":1076,"title":{},"body":{"index.html":{}}}],["anymore",{"_index":491,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["api",{"_index":840,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["apioperation",{"_index":585,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":558,"title":{},"body":{"controllers/PostController.html":{}}}],["apiproperty",{"_index":172,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty()@isstring()@minlength(3)@isnotempty()@maxlength(256",{"_index":300,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apiproperty({description",{"_index":502,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["apiproperty({example",{"_index":257,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({type",{"_index":158,"title":{},"body":{"classes/CreateManyUsersDTO.html":{}}}],["apipropertyoptional",{"_index":274,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional()@isoptional()@isjson",{"_index":302,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional()@isoptional()@isstring",{"_index":296,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional()@isoptional()@isurl()@maxlength(1024",{"_index":298,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional({description",{"_index":353,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["apiquery",{"_index":895,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":586,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":587,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["apitags('posts",{"_index":593,"title":{},"body":{"controllers/PostController.html":{}}}],["apitags('users",{"_index":897,"title":{},"body":{"controllers/UsersController.html":{}}}],["app.controller",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appconfig",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":899,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["application'})@apiresponse({status",{"_index":876,"title":{},"body":{"controllers/UsersController.html":{}}}],["applications",{"_index":981,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":23,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":10,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":159,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{}}}],["async",{"_index":407,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["auth",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":126,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":113,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authmodule",{"_index":34,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":515,"title":{},"body":{"entities/Post.html":{},"injectables/PostService.html":{},"index.html":{},"properties.html":{}}}],["authorid",{"_index":178,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["authservice",{"_index":117,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["authservice:authservice",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{}}}],["autoloadentities",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["await",{"_index":418,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["aws",{"_index":1019,"title":{},"body":{"index.html":{}}}],["backers",{"_index":1077,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":625,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["badrequestexception('please",{"_index":665,"title":{},"body":{"injectables/PostService.html":{}}}],["badrequestexception('the",{"_index":671,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["based",{"_index":878,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["baseurl",{"_index":463,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["blog",{"_index":201,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"controllers/PostController.html":{}}}],["board",{"_index":1069,"title":{},"body":{"index.html":{}}}],["body",{"_index":390,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":140,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1092,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1090,"title":{},"body":{"modules.html":{}}}],["building",{"_index":976,"title":{},"body":{"index.html":{}}}],["business",{"_index":795,"title":{},"body":{"injectables/UserService.html":{}}}],["cascade",{"_index":383,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["cascade'})@joincolumn",{"_index":374,"title":{},"body":{"entities/MetaOption.html":{}}}],["catch",{"_index":656,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["cause",{"_index":492,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["channel",{"_index":1044,"title":{},"body":{"index.html":{}}}],["character",{"_index":327,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":319,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["check",{"_index":666,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["class",{"_index":13,"title":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":150,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"overview.html":{}}}],["clicks",{"_index":1029,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":1014,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":121,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":123,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":122,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule",{"_index":399,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_providers",{"_index":400,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_paginationmodule",{"_index":437,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_exports",{"_index":438,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_providers",{"_index":439,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_postmodule",{"_index":604,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_postmodule_imports",{"_index":605,"title":{},"body":{"modules/PostModule.html":{}}}],["cluster_postmodule_providers",{"_index":606,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_tagsmodule",{"_index":719,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_exports",{"_index":720,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_providers",{"_index":721,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":911,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":912,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":913,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":379,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["column({type",{"_index":368,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["come",{"_index":1036,"title":{},"body":{"index.html":{}}}],["common/pagination/pagination.module",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["complete",{"_index":785,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["compodoc/compodoc",{"_index":939,"title":{},"body":{"dependencies.html":{}}}],["config/app.config",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database.config",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["config/environment.validation",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["config/profile.config",{"_index":823,"title":{},"body":{"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["configmodule",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["configmodule.forfeature(profileconfig",{"_index":919,"title":{},"body":{"modules/UsersModule.html":{}}}],["configmodule.forroot",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserService.html":{}}}],["configservice.get('database.autoloadentities",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.host",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.name",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.password",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.port",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.synchronize",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.user",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["configtype",{"_index":802,"title":{},"body":{"injectables/UserService.html":{}}}],["conflictexception",{"_index":768,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["conflictexception('could",{"_index":784,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["connect",{"_index":776,"title":{},"body":{"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["connecting",{"_index":858,"title":{},"body":{"injectables/UserService.html":{}}}],["connection",{"_index":791,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["connectiong",{"_index":851,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(environment",{"_index":832,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(isauth",{"_index":829,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(newurl",{"_index":469,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["console.log(this.profilconfiguration",{"_index":833,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(this.profilconfiguration.apikey",{"_index":834,"title":{},"body":{"injectables/UserService.html":{}}}],["const",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["constructor",{"_index":132,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["constructor(@inject(forwardref",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(@injectrepository(metaoption",{"_index":416,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["constructor(@injectrepository(tag",{"_index":740,"title":{},"body":{"injectables/TagsService.html":{}}}],["constructor(authservice",{"_index":799,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(datasource",{"_index":763,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["constructor(metaoptionrepository",{"_index":408,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["constructor(private",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/TagsController.html":{},"injectables/UserCreateManyProvider.html":{},"controllers/UsersController.html":{}}}],["constructor(request",{"_index":445,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["constructor(tagsrepository",{"_index":730,"title":{},"body":{"injectables/TagsService.html":{}}}],["constructor(userservice",{"_index":133,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{}}}],["contain",{"_index":321,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["content",{"_index":179,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["context",{"_index":230,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('meta",{"_index":395,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["controller('post",{"_index":592,"title":{},"body":{"controllers/PostController.html":{}}}],["controller('tags",{"_index":712,"title":{},"body":{"controllers/TagsController.html":{}}}],["controller('users",{"_index":896,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["conversion",{"_index":496,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["correct",{"_index":668,"title":{},"body":{"injectables/PostService.html":{}}}],["courses",{"_index":1050,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":920,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":169,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/TagsController.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["create(@body",{"_index":397,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/TagsController.html":{}}}],["create(createpostmetaoptiondto",{"_index":387,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["create(createpostmetaoptionsdto",{"_index":412,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["create(createtagdto",{"_index":704,"title":{},"body":{"controllers/TagsController.html":{}}}],["created",{"_index":563,"title":{},"body":{"controllers/PostController.html":{}}}],["createdate",{"_index":362,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createdatecolumn",{"_index":364,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createmany",{"_index":762,"title":{},"body":{"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["createmany(createmanyusersdto",{"_index":766,"title":{},"body":{"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["createmanyusers",{"_index":862,"title":{},"body":{"controllers/UsersController.html":{}}}],["createmanyusers(@body",{"_index":908,"title":{},"body":{"controllers/UsersController.html":{}}}],["createmanyusers(createmanyusersdto",{"_index":866,"title":{},"body":{"controllers/UsersController.html":{}}}],["createmanyusersdto",{"_index":149,"title":{"classes/CreateManyUsersDTO.html":{}},"body":{"classes/CreateManyUsersDTO.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["createmanyusersdto.users",{"_index":777,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["createpost",{"_index":553,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["createpost(@body",{"_index":598,"title":{},"body":{"controllers/PostController.html":{}}}],["createpost(createpostdto",{"_index":557,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["createpostdto",{"_index":175,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["createpostdto.metaoptions",{"_index":640,"title":{},"body":{"injectables/PostService.html":{}}}],["createpostmetaoptiondto",{"_index":389,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createpostmetaoptionsdto",{"_index":204,"title":{"classes/CreatePostMetaOptionsDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"coverage.html":{}}}],["creates",{"_index":559,"title":{},"body":{"controllers/PostController.html":{}}}],["createtagdto",{"_index":293,"title":{"classes/CreateTagDto.html":{}},"body":{"classes/CreateTagDto.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["createtags",{"_index":727,"title":{},"body":{"injectables/TagsService.html":{}}}],["createtags(createtagdto",{"_index":733,"title":{},"body":{"injectables/TagsService.html":{}}}],["createuser",{"_index":797,"title":{},"body":{"injectables/UserService.html":{}}}],["createuser(createuserdto",{"_index":806,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto",{"_index":156,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":854,"title":{},"body":{"injectables/UserService.html":{}}}],["createusers",{"_index":863,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(@body",{"_index":906,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(createuserdto",{"_index":869,"title":{},"body":{"controllers/UsersController.html":{}}}],["current",{"_index":434,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["currentpage",{"_index":430,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["data",{"_index":424,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["database",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["databaseconfig",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["datasource",{"_index":764,"title":{},"body":{"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["date",{"_index":217,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["declarations",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":157,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":1046,"title":{},"body":{"index.html":{}}}],["default",{"_index":483,"title":{},"body":{"classes/PaginationQueryDto.html":{},"entities/Post.html":{},"miscellaneous/variables.html":{}}}],["defaultvaluepipe",{"_index":889,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":904,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":902,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":107,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["delete",{"_index":567,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["delete(\"soft",{"_index":716,"title":{},"body":{"controllers/TagsController.html":{}}}],["delete('soft",{"_index":708,"title":{},"body":{"controllers/TagsController.html":{}}}],["delete(@query('id",{"_index":714,"title":{},"body":{"controllers/TagsController.html":{}}}],["delete(id",{"_index":619,"title":{},"body":{"injectables/PostService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["deleteat",{"_index":689,"title":{},"body":{"entities/Tag.html":{}}}],["deleted",{"_index":653,"title":{},"body":{"injectables/PostService.html":{},"injectables/TagsService.html":{}}}],["deletedatecolumn",{"_index":691,"title":{},"body":{"entities/Tag.html":{}}}],["deletepost",{"_index":554,"title":{},"body":{"controllers/PostController.html":{}}}],["deletepost(@query(\"id",{"_index":602,"title":{},"body":{"controllers/PostController.html":{}}}],["deletepost(id",{"_index":566,"title":{},"body":{"controllers/PostController.html":{}}}],["dependencies",{"_index":25,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":1005,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":1018,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":1010,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":1028,"title":{},"body":{"index.html":{}}}],["description",{"_index":212,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"entities/Tag.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":990,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":1057,"title":{},"body":{"index.html":{}}}],["discord",{"_index":1043,"title":{},"body":{"index.html":{}}}],["dive",{"_index":1045,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":921,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["draft",{"_index":249,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["dto",{"_index":589,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["dto.ts",{"_index":500,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["dto.ts:12",{"_index":505,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["dtos/create",{"_index":391,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["dtos/get",{"_index":590,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["dtos/pagination",{"_index":452,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["dtos/patch",{"_index":588,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/UsersController.html":{}}}],["e",{"_index":670,"title":{},"body":{"injectables/PostService.html":{}}}],["e2e",{"_index":1000,"title":{},"body":{"index.html":{}}}],["each",{"_index":174,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{}}}],["eager",{"_index":518,"title":{},"body":{"entities/Post.html":{}}}],["efficient",{"_index":977,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":1009,"title":{},"body":{"index.html":{}}}],["email",{"_index":143,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["enabled",{"_index":494,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["enddate",{"_index":336,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{}}}],["endpoint",{"_index":841,"title":{},"body":{"injectables/UserService.html":{}}}],["ensure",{"_index":667,"title":{},"body":{"injectables/PostService.html":{},"index.html":{}}}],["enterprise",{"_index":1060,"title":{},"body":{"index.html":{}}}],["entities",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":359,"title":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"coverage.html":{}}}],["entries",{"_index":880,"title":{},"body":{"controllers/UsersController.html":{}}}],["enum",{"_index":278,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enumerations",{"_index":960,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/posttype.enum",{"_index":270,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enums/status.enum",{"_index":271,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["env",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["env.${env",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["env.development",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["environment",{"_index":830,"title":{},"body":{"injectables/UserService.html":{}}}],["environmentvalidation",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["err",{"_index":657,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["error",{"_index":228,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["example",{"_index":192,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["exist",{"_index":672,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["existing",{"_index":576,"title":{},"body":{"controllers/PostController.html":{}}}],["existinguser",{"_index":852,"title":{},"body":{"injectables/UserService.html":{}}}],["exists",{"_index":855,"title":{},"body":{"injectables/UserService.html":{}}}],["experience",{"_index":1048,"title":{},"body":{"index.html":{}}}],["export",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["exports",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":454,"title":{},"body":{"injectables/PaginationProvider.html":{},"dependencies.html":{}}}],["extends",{"_index":347,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["false",{"_index":208,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["fast",{"_index":1022,"title":{},"body":{"index.html":{}}}],["featured",{"_index":199,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["featuredimageurl",{"_index":180,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["features",{"_index":1032,"title":{},"body":{"index.html":{}}}],["fetched",{"_index":877,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetches",{"_index":873,"title":{},"body":{"controllers/UsersController.html":{}}}],["few",{"_index":1024,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["filename",{"_index":842,"title":{},"body":{"injectables/UserService.html":{}}}],["finally",{"_index":788,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["finalresponse",{"_index":474,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["find",{"_index":815,"title":{},"body":{"injectables/UserService.html":{}}}],["findall",{"_index":614,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["findall(getuserparamdto",{"_index":808,"title":{},"body":{"injectables/UserService.html":{}}}],["findall(postquery",{"_index":621,"title":{},"body":{"injectables/PostService.html":{}}}],["findmultpletags",{"_index":728,"title":{},"body":{"injectables/TagsService.html":{}}}],["findmultpletags(tags",{"_index":736,"title":{},"body":{"injectables/TagsService.html":{}}}],["findonebyid",{"_index":798,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid(id",{"_index":813,"title":{},"body":{"injectables/UserService.html":{}}}],["first",{"_index":432,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["firstname",{"_index":306,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["focus",{"_index":1031,"title":{},"body":{"index.html":{}}}],["follow",{"_index":1063,"title":{},"body":{"index.html":{}}}],["forwardref",{"_index":125,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["framework",{"_index":975,"title":{},"body":{"index.html":{}}}],["full",{"_index":1059,"title":{},"body":{"index.html":{}}}],["function",{"_index":931,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":969,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":1027,"title":{},"body":{"index.html":{}}}],["ger",{"_index":354,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["get('/:id/:optional",{"_index":898,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id/:optional?')@apioperation({summary",{"_index":872,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:userid",{"_index":571,"title":{},"body":{"controllers/PostController.html":{}}}],["gethello",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getpost",{"_index":555,"title":{},"body":{"controllers/PostController.html":{}}}],["getpost(@param('userid",{"_index":594,"title":{},"body":{"controllers/PostController.html":{}}}],["getpost(userid",{"_index":569,"title":{},"body":{"controllers/PostController.html":{}}}],["getpostbasedto",{"_index":333,"title":{"classes/GetPostBaseDto.html":{}},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"coverage.html":{}}}],["getpostdto",{"_index":346,"title":{"classes/GetPostDto.html":{}},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["getting",{"_index":971,"title":{"index.html":{}},"body":{}}],["getuserparamdto",{"_index":811,"title":{},"body":{"injectables/UserService.html":{}}}],["getusers",{"_index":864,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(/*@param('id",{"_index":900,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getusersparamdto",{"_index":871,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersparamdto",{"_index":349,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["graph",{"_index":1053,"title":{},"body":{"index.html":{}}}],["grow",{"_index":1073,"title":{},"body":{"index.html":{}}}],["hands",{"_index":1047,"title":{},"body":{"index.html":{}}}],["handy",{"_index":1037,"title":{},"body":{"index.html":{}}}],["header",{"_index":890,"title":{},"body":{"controllers/UsersController.html":{}}}],["headers",{"_index":891,"title":{},"body":{"controllers/UsersController.html":{}}}],["hello",{"_index":110,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":1051,"title":{},"body":{"index.html":{}}}],["here",{"_index":1081,"title":{},"body":{"index.html":{}}}],["host",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["http://localhost.com/images/image1.jpg",{"_index":202,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["httpexception",{"_index":818,"title":{},"body":{"injectables/UserService.html":{}}}],["https://nestjs.com",{"_index":1086,"title":{},"body":{"index.html":{}}}],["https://schema.org",{"_index":231,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https:\\/\\/schema.org\\\",\\r\\n",{"_index":283,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["httpstatus",{"_index":819,"title":{},"body":{"injectables/UserService.html":{}}}],["httpstatus.moved_permanently",{"_index":839,"title":{},"body":{"injectables/UserService.html":{}}}],["id",{"_index":352,"title":{},"body":{"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["identifier",{"_index":922,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":254,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostService.html":{}}}],["image",{"_index":200,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["implicit",{"_index":495,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["import",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["imports",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["in(tags",{"_index":745,"title":{},"body":{"injectables/TagsService.html":{}}}],["index",{"_index":105,"title":{"index.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["information",{"_index":1012,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":1034,"title":{},"body":{"index.html":{}}}],["inject",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/PaginationProvider.html":{},"injectables/UserService.html":{}}}],["inject(forwardref",{"_index":825,"title":{},"body":{"injectables/UserService.html":{}}}],["inject(profileconfig.key",{"_index":827,"title":{},"body":{"injectables/UserService.html":{}}}],["inject(request",{"_index":457,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["injectable",{"_index":102,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":103,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":415,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["injectrepository(metaoption",{"_index":631,"title":{},"body":{"injectables/PostService.html":{}}}],["injectrepository(post",{"_index":630,"title":{},"body":{"injectables/PostService.html":{}}}],["injectrepository(user",{"_index":826,"title":{},"body":{"injectables/UserService.html":{}}}],["install",{"_index":1026,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":988,"title":{},"body":{"index.html":{}}}],["integer",{"_index":191,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["interact",{"_index":1054,"title":{},"body":{"index.html":{}}}],["interface",{"_index":420,"title":{"interfaces/Paginated.html":{}},"body":{"interfaces/Paginated.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":422,"title":{},"body":{"interfaces/Paginated.html":{}}}],["interfaces/paginated.interface",{"_index":456,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["intersectiontype",{"_index":341,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{}}}],["intersectiontype(getpostbasedto",{"_index":348,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{}}}],["inversepost",{"_index":650,"title":{},"body":{"injectables/PostService.html":{}}}],["ip",{"_index":892,"title":{},"body":{"controllers/UsersController.html":{}}}],["isarray",{"_index":165,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{}}}],["isauth",{"_index":130,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["isdate",{"_index":342,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{}}}],["isdate()@isoptional",{"_index":338,"title":{},"body":{"classes/GetPostBaseDto.html":{}}}],["isemail",{"_index":329,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":260,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":281,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus)@isnotempty()@apiproperty({enum",{"_index":248,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":277,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype)@isnotempty()@apiproperty({enum",{"_index":211,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isglobal",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":261,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["isint()@isnotempty()@apiproperty({type",{"_index":190,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isiso8601",{"_index":262,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isiso8601()@isoptional()@apipropertyoptional({description",{"_index":218,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":263,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{}}}],["isnotempty",{"_index":166,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["isnotempty()@isjson",{"_index":291,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["isoptional",{"_index":264,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{}}}],["isoptional()@apipropertyoptional({type",{"_index":206,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional()@isarray()@isint({each",{"_index":252,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional()@isjson()@apipropertyoptional({description",{"_index":224,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional()@ispositive",{"_index":486,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["isoptional()@isurl()@maxlength(1024)@apipropertyoptional({description",{"_index":198,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["ispositive",{"_index":489,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["isstring",{"_index":265,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@apiproperty({description",{"_index":234,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["isstring()@isnotempty()@isemail()@maxlength(96",{"_index":308,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":310,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(8)@matches(/^(?=.*[a",{"_index":314,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@apipropertyoptional({description",{"_index":195,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":312,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isurl",{"_index":266,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["items",{"_index":161,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{}}}],["itemsperpage",{"_index":428,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["job",{"_index":1066,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":1068,"title":{},"body":{"index.html":{}}}],["john",{"_index":835,"title":{},"body":{"injectables/UserService.html":{}}}],["john@doe.com",{"_index":836,"title":{},"body":{"injectables/UserService.html":{}}}],["joi",{"_index":949,"title":{},"body":{"dependencies.html":{}}}],["join",{"_index":1079,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":380,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["jointable",{"_index":544,"title":{},"body":{"entities/Post.html":{}}}],["json",{"_index":226,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{}}}],["kamil",{"_index":1083,"title":{},"body":{"index.html":{}}}],["key",{"_index":1006,"title":{},"body":{"index.html":{}}}],["last",{"_index":433,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["lastname",{"_index":307,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["later",{"_index":662,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["learn",{"_index":1040,"title":{},"body":{"index.html":{}}}],["legend",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":523,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["letter",{"_index":324,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letters",{"_index":241,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["license",{"_index":1089,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1071,"title":{},"body":{"index.html":{}}}],["limit",{"_index":481,"title":{},"body":{"classes/PaginationQueryDto.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["linenumber",{"_index":844,"title":{},"body":{"injectables/UserService.html":{}}}],["linkedin",{"_index":1065,"title":{},"body":{"index.html":{}}}],["links",{"_index":425,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["list",{"_index":874,"title":{},"body":{"controllers/UsersController.html":{}}}],["literal",{"_index":427,"title":{},"body":{"interfaces/Paginated.html":{}}}],["load",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["login",{"_index":131,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(email",{"_index":141,"title":{},"body":{"injectables/AuthService.html":{}}}],["long",{"_index":320,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["looking",{"_index":1013,"title":{},"body":{"index.html":{}}}],["loop",{"_index":1062,"title":{},"body":{"index.html":{}}}],["lowercase",{"_index":325,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["main.ts",{"_index":497,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["makes",{"_index":1020,"title":{},"body":{"index.html":{}}}],["managing",{"_index":1033,"title":{},"body":{"index.html":{}}}],["many",{"_index":152,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["many.provider",{"_index":824,"title":{},"body":{"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["many.provider.ts",{"_index":761,"title":{},"body":{"injectables/UserCreateManyProvider.html":{},"coverage.html":{}}}],["many.provider.ts:11",{"_index":767,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["many.provider.ts:8",{"_index":765,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["manytomany",{"_index":545,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytomany(undefined",{"_index":538,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytoone",{"_index":546,"title":{},"body":{"entities/Post.html":{}}}],["manytoone(undefined",{"_index":516,"title":{},"body":{"entities/Post.html":{}}}],["matches",{"_index":267,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":332,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":279,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["matching",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(totalitems",{"_index":471,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["mau",{"_index":1016,"title":{},"body":{"index.html":{}}}],["maxlength",{"_index":268,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(1024",{"_index":285,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(256",{"_index":280,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(512",{"_index":276,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["maxlength(96",{"_index":330,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":239,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["meta",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"entities/Post.html":{},"coverage.html":{}}}],["metadata",{"_index":954,"title":{},"body":{"dependencies.html":{}}}],["metaoption",{"_index":360,"title":{"entities/MetaOption.html":{}},"body":{"entities/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["metaoptionrepository",{"_index":411,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostService.html":{}}}],["metaoptions",{"_index":181,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostService.html":{}}}],["metaoptions.post",{"_index":527,"title":{},"body":{"entities/Post.html":{}}}],["metaoptionscontroller",{"_index":384,"title":{"controllers/MetaOptionsController.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"coverage.html":{}}}],["metaoptionservice",{"_index":396,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["metaoptionsmodule",{"_index":35,"title":{"modules/MetaOptionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules.html":{},"overview.html":{}}}],["metaoptionsservice",{"_index":392,"title":{"injectables/MetaOptionsService.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{},"overview.html":{}}}],["metavalue",{"_index":287,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{}}}],["method",{"_index":810,"title":{},"body":{"injectables/UserService.html":{}}}],["methods",{"_index":106,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["minlength",{"_index":269,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":305,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":275,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":331,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":959,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1070,"title":{},"body":{"index.html":{}}}],["mode",{"_index":993,"title":{},"body":{"index.html":{}}}],["module",{"_index":22,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":24,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":850,"title":{},"body":{"injectables/UserService.html":{}}}],["more",{"_index":1011,"title":{},"body":{"index.html":{}}}],["moved",{"_index":848,"title":{},"body":{"injectables/UserService.html":{}}}],["myśliwiec",{"_index":1084,"title":{},"body":{"index.html":{}}}],["name",{"_index":137,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateTagDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["need",{"_index":490,"title":{},"body":{"classes/PaginationQueryDto.html":{},"index.html":{}}}],["needs",{"_index":503,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["nest",{"_index":982,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1088,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":112,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":455,"title":{},"body":{"injectables/PaginationProvider.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":512,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":944,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":173,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["new",{"_index":467,"title":{},"body":{"injectables/PaginationProvider.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["newurl",{"_index":466,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&pages=${nextpage",{"_index":478,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&pages=${paginationquery.page",{"_index":477,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&pages=${previouspage",{"_index":479,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&pages=${totalpages",{"_index":476,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&pages=1",{"_index":475,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newuser",{"_index":778,"title":{},"body":{"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["newusers",{"_index":770,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["newusers.push(result",{"_index":781,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["next",{"_index":435,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["nextpage",{"_index":472,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["node.js",{"_index":974,"title":{},"body":{"index.html":{}}}],["npm",{"_index":987,"title":{},"body":{"index.html":{}}}],["null",{"_index":205,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostService.html":{}}}],["nullable",{"_index":369,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["number",{"_index":189,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["object",{"_index":207,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["objectliteral",{"_index":453,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["occured",{"_index":846,"title":{},"body":{"injectables/UserService.html":{}}}],["offer",{"_index":1067,"title":{},"body":{"index.html":{}}}],["official",{"_index":1017,"title":{},"body":{"index.html":{}}}],["ondelete",{"_index":373,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["one",{"_index":322,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["onetomany",{"_index":758,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":755,"title":{},"body":{"entities/User.html":{}}}],["onetoone",{"_index":381,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["onetoone(undefined",{"_index":371,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["open",{"_index":1072,"title":{},"body":{"index.html":{}}}],["operations",{"_index":796,"title":{},"body":{"injectables/UserService.html":{}}}],["option.dtos",{"_index":273,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{}}}],["option.dtos.ts",{"_index":290,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["option.dtos.ts:6",{"_index":292,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["option.entity",{"_index":403,"title":{},"body":{"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{}}}],["option.entity.ts",{"_index":361,"title":{},"body":{"entities/MetaOption.html":{},"coverage.html":{}}}],["option.entity.ts:13",{"_index":370,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:16",{"_index":365,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:19",{"_index":377,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:26",{"_index":375,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:7",{"_index":367,"title":{},"body":{"entities/MetaOption.html":{}}}],["optional",{"_index":138,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["options",{"_index":386,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options.controller",{"_index":402,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.controller.ts",{"_index":385,"title":{},"body":{"controllers/MetaOptionsController.html":{},"coverage.html":{}}}],["options.controller.ts:11",{"_index":388,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options.module",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["options.module.ts",{"_index":401,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.service",{"_index":394,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["options.service.ts",{"_index":406,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["options.service.ts:12",{"_index":413,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options.service.ts:8",{"_index":410,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options/dtos/create",{"_index":272,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/Post.html":{},"coverage.html":{}}}],["options/meta",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"entities/Post.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["options/providers/meta",{"_index":405,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["out",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":1093,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":938,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":482,"title":{},"body":{"classes/PaginationQueryDto.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["page','story','series",{"_index":215,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["paginated",{"_index":421,"title":{"interfaces/Paginated.html":{}},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["paginatequery",{"_index":444,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginatequery(paginationquery",{"_index":448,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationmodule",{"_index":36,"title":{"modules/PaginationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules.html":{},"overview.html":{}}}],["paginationprovider",{"_index":440,"title":{"injectables/PaginationProvider.html":{}},"body":{"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"coverage.html":{},"overview.html":{}}}],["paginationquery",{"_index":450,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquery.limit",{"_index":461,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquery.page",{"_index":460,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquerydto",{"_index":343,"title":{"classes/PaginationQueryDto.html":{}},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["param",{"_index":580,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["param.dto",{"_index":820,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["param.dto.ts",{"_index":351,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:13",{"_index":357,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parameters",{"_index":136,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["parseintpipe",{"_index":581,"title":{},"body":{"controllers/PostController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["part",{"_index":1058,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":506,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":501,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":511,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["password",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["patch",{"_index":582,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["patchpostdto",{"_index":498,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["patchpostdto.content",{"_index":676,"title":{},"body":{"injectables/PostService.html":{}}}],["patchpostdto.featuredimageurl",{"_index":684,"title":{},"body":{"injectables/PostService.html":{}}}],["patchpostdto.id",{"_index":669,"title":{},"body":{"injectables/PostService.html":{}}}],["patchpostdto.posttype",{"_index":682,"title":{},"body":{"injectables/PostService.html":{}}}],["patchpostdto.publishon",{"_index":686,"title":{},"body":{"injectables/PostService.html":{}}}],["patchpostdto.slug",{"_index":680,"title":{},"body":{"injectables/PostService.html":{}}}],["patchpostdto.status",{"_index":678,"title":{},"body":{"injectables/PostService.html":{}}}],["patchpostdto.tags.length",{"_index":664,"title":{},"body":{"injectables/PostService.html":{}}}],["patchpostdto.title",{"_index":674,"title":{},"body":{"injectables/PostService.html":{}}}],["patchuser",{"_index":865,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":910,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(patchuserdto",{"_index":887,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":509,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["per",{"_index":882,"title":{},"body":{"controllers/UsersController.html":{}}}],["perform",{"_index":794,"title":{},"body":{"injectables/UserService.html":{}}}],["permanently",{"_index":847,"title":{},"body":{"injectables/UserService.html":{}}}],["person",{"_index":232,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["person\\\"\\r\\n",{"_index":284,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["pg",{"_index":951,"title":{},"body":{"dependencies.html":{}}}],["platform",{"_index":1015,"title":{},"body":{"index.html":{}}}],["please",{"_index":661,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["port",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["position",{"_index":884,"title":{},"body":{"controllers/UsersController.html":{}}}],["possible",{"_index":213,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["post",{"_index":196,"title":{"entities/Post.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":560,"title":{},"body":{"controllers/PostController.html":{}}}],["post'})@isstring()@minlength(4)@maxlength(512)@isnotempty",{"_index":258,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@matches(/^[a",{"_index":236,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["post('create",{"_index":867,"title":{},"body":{"controllers/UsersController.html":{}}}],["post.author",{"_index":756,"title":{},"body":{"entities/User.html":{}}}],["post.content",{"_index":675,"title":{},"body":{"injectables/PostService.html":{}}}],["post.controller",{"_index":608,"title":{},"body":{"modules/PostModule.html":{}}}],["post.dtos",{"_index":507,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["post.dtos.ts",{"_index":177,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["post.dtos.ts:115",{"_index":210,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:124",{"_index":194,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:17",{"_index":259,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:25",{"_index":216,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:32",{"_index":197,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:44",{"_index":246,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:53",{"_index":251,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:61",{"_index":233,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:71",{"_index":203,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:80",{"_index":223,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:92",{"_index":256,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.entity",{"_index":609,"title":{},"body":{"modules/PostModule.html":{},"injectables/PostService.html":{}}}],["post.featuredimageurl",{"_index":683,"title":{},"body":{"injectables/PostService.html":{}}}],["post.metaoptions",{"_index":372,"title":{},"body":{"entities/MetaOption.html":{},"injectables/PostService.html":{}}}],["post.metaoptions.id",{"_index":652,"title":{},"body":{"injectables/PostService.html":{}}}],["post.posttype",{"_index":681,"title":{},"body":{"injectables/PostService.html":{}}}],["post.publishon",{"_index":685,"title":{},"body":{"injectables/PostService.html":{}}}],["post.slug",{"_index":679,"title":{},"body":{"injectables/PostService.html":{}}}],["post.status",{"_index":677,"title":{},"body":{"injectables/PostService.html":{}}}],["post.tags",{"_index":687,"title":{},"body":{"injectables/PostService.html":{},"entities/Tag.html":{}}}],["post.title",{"_index":673,"title":{},"body":{"injectables/PostService.html":{}}}],["post/post.module",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["post/services/post.service",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["postcontroller",{"_index":551,"title":{"controllers/PostController.html":{}},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{},"coverage.html":{}}}],["postgres",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["postmodule",{"_index":37,"title":{"modules/PostModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"modules.html":{},"overview.html":{}}}],["postquery",{"_index":570,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["postquery.limit",{"_index":637,"title":{},"body":{"injectables/PostService.html":{}}}],["postquery.page",{"_index":636,"title":{},"body":{"injectables/PostService.html":{}}}],["postrepository",{"_index":616,"title":{},"body":{"injectables/PostService.html":{}}}],["posts",{"_index":633,"title":{},"body":{"injectables/PostService.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["posts.dto",{"_index":591,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["posts.dto.ts",{"_index":335,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"coverage.html":{}}}],["posts.dto.ts:12",{"_index":339,"title":{},"body":{"classes/GetPostBaseDto.html":{}}}],["posts.dto.ts:8",{"_index":340,"title":{},"body":{"classes/GetPostBaseDto.html":{}}}],["postservice",{"_index":48,"title":{"injectables/PostService.html":{}},"body":{"modules/AppModule.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":247,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["poststatus.draft",{"_index":550,"title":{},"body":{"entities/Post.html":{}}}],["posttype",{"_index":182,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["posttype.post",{"_index":549,"title":{},"body":{"entities/Post.html":{}}}],["prefix",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["previous",{"_index":436,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["previouspage",{"_index":473,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["primarygeneratedcolumn",{"_index":366,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["private",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["process",{"_index":660,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["process.env.node_env",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["production",{"_index":995,"title":{},"body":{"index.html":{}}}],["profilconfiguration",{"_index":801,"title":{},"body":{"injectables/UserService.html":{}}}],["profileconfig",{"_index":822,"title":{},"body":{"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["progressive",{"_index":973,"title":{},"body":{"index.html":{}}}],["project",{"_index":985,"title":{},"body":{"index.html":{}}}],["promise",{"_index":451,"title":{},"body":{"injectables/PaginationProvider.html":{},"injectables/PostService.html":{}}}],["properties",{"_index":154,"title":{"properties.html":{}},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"properties.html":{}}}],["providers",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/meta",{"_index":393,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["providers/pagination.provider",{"_index":442,"title":{},"body":{"modules/PaginationModule.html":{}}}],["providers/tags.service",{"_index":711,"title":{},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{}}}],["providers/user",{"_index":917,"title":{},"body":{"modules/UsersModule.html":{}}}],["providers/user.service",{"_index":894,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":129,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["published",{"_index":219,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["publishon",{"_index":183,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["query",{"_index":583,"title":{},"body":{"controllers/PostController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["query'})@apiquery({name",{"_index":879,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit",{"_index":901,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":903,"title":{},"body":{"controllers/UsersController.html":{}}}],["query.dto",{"_index":345,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"injectables/PaginationProvider.html":{}}}],["query.dto.ts",{"_index":480,"title":{},"body":{"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["query.dto.ts:12",{"_index":488,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["query.dto.ts:8",{"_index":487,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["queryrunner",{"_index":771,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["queryrunner.committransaction",{"_index":782,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["queryrunner.connect",{"_index":773,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["queryrunner.manager.create(user",{"_index":779,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["queryrunner.manager.save(newuser",{"_index":780,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["queryrunner.release",{"_index":789,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["queryrunner.rollbacktransaction",{"_index":783,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["queryrunner.starttransaction",{"_index":774,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["questions",{"_index":1041,"title":{},"body":{"index.html":{}}}],["r\\n",{"_index":282,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["read",{"_index":1080,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["ready",{"_index":1004,"title":{},"body":{"index.html":{}}}],["real",{"_index":1055,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":953,"title":{},"body":{"dependencies.html":{}}}],["registered",{"_index":875,"title":{},"body":{"controllers/UsersController.html":{}}}],["relations",{"_index":635,"title":{},"body":{"injectables/PostService.html":{}}}],["release",{"_index":790,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["repository",{"_index":409,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["repository.count",{"_index":470,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["repository.find",{"_index":458,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["request",{"_index":446,"title":{},"body":{"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["requesttimeoutexception",{"_index":626,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["requesttimeoutexception('could",{"_index":775,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["requesttimeoutexception('unable",{"_index":659,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["required",{"_index":160,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["requiring",{"_index":1023,"title":{},"body":{"index.html":{}}}],["reset",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":1035,"title":{},"body":{"index.html":{}}}],["response",{"_index":562,"title":{},"body":{"controllers/PostController.html":{}}}],["result",{"_index":743,"title":{},"body":{"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{}}}],["results",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["returned",{"_index":881,"title":{},"body":{"controllers/UsersController.html":{}}}],["returns",{"_index":109,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["review",{"_index":965,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["run",{"_index":989,"title":{},"body":{"index.html":{}}}],["runs",{"_index":1008,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":956,"title":{},"body":{"dependencies.html":{}}}],["sample_token",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{}}}],["scalable",{"_index":978,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":964,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["scheduled','review",{"_index":250,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["schema",{"_index":184,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["serialize",{"_index":225,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":968,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["server",{"_index":979,"title":{},"body":{"index.html":{}}}],["service/auth.service",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["services/post.service",{"_index":584,"title":{},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{}}}],["setup",{"_index":986,"title":{},"body":{"index.html":{}}}],["side",{"_index":980,"title":{},"body":{"index.html":{}}}],["sidebarenabled\":true",{"_index":288,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["simple",{"_index":1025,"title":{},"body":{"index.html":{}}}],["single",{"_index":816,"title":{},"body":{"injectables/UserService.html":{}}}],["skip",{"_index":459,"title":{},"body":{"injectables/PaginationProvider.html":{},"injectables/PostService.html":{}}}],["slug",{"_index":185,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["small",{"_index":240,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["softdelete",{"_index":703,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdelete(@query('id",{"_index":717,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdelete(id",{"_index":707,"title":{},"body":{"controllers/TagsController.html":{}}}],["softremove",{"_index":729,"title":{},"body":{"injectables/TagsService.html":{}}}],["softremove(id",{"_index":738,"title":{},"body":{"injectables/TagsService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["spaces",{"_index":244,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["special",{"_index":326,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":355,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["sponsors",{"_index":1075,"title":{},"body":{"index.html":{}}}],["src/.../app.module.ts",{"_index":1102,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":970,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../posttype.enum.ts",{"_index":962,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../status.enum.ts",{"_index":961,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":104,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":108,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.module",{"_index":916,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":124,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/service/auth.service",{"_index":821,"title":{},"body":{"injectables/UserService.html":{}}}],["src/auth/service/auth.service.ts",{"_index":128,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/service/auth.service.ts:14",{"_index":139,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/service/auth.service.ts:5",{"_index":135,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/service/auth.service.ts:8",{"_index":142,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/common/pagination/dtos/pagination",{"_index":344,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["src/common/pagination/interfaces/paginated.interface",{"_index":629,"title":{},"body":{"injectables/PostService.html":{}}}],["src/common/pagination/interfaces/paginated.interface.ts",{"_index":423,"title":{},"body":{"interfaces/Paginated.html":{},"coverage.html":{}}}],["src/common/pagination/pagination.module",{"_index":611,"title":{},"body":{"modules/PostModule.html":{}}}],["src/common/pagination/pagination.module.ts",{"_index":441,"title":{},"body":{"modules/PaginationModule.html":{}}}],["src/common/pagination/providers/pagination.provider",{"_index":628,"title":{},"body":{"injectables/PostService.html":{}}}],["src/common/pagination/providers/pagination.provider.ts",{"_index":443,"title":{},"body":{"injectables/PaginationProvider.html":{},"coverage.html":{}}}],["src/common/pagination/providers/pagination.provider.ts:15",{"_index":449,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["src/common/pagination/providers/pagination.provider.ts:9",{"_index":447,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["src/main.ts",{"_index":930,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/meta",{"_index":289,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["src/post/dtos/create",{"_index":176,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/post/dtos/get",{"_index":334,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"coverage.html":{}}}],["src/post/dtos/patch",{"_index":499,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/post/enums/posttype.enum.ts",{"_index":966,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/post/enums/status.enum.ts",{"_index":963,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/post/post.controller.ts",{"_index":552,"title":{},"body":{"controllers/PostController.html":{},"coverage.html":{}}}],["src/post/post.controller.ts:15",{"_index":572,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:27",{"_index":565,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:38",{"_index":579,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:43",{"_index":568,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.entity",{"_index":378,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["src/post/post.entity.ts",{"_index":514,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/post/post.entity.ts:12",{"_index":526,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:18",{"_index":543,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:25",{"_index":529,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:33",{"_index":535,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:40",{"_index":536,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:46",{"_index":521,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:52",{"_index":532,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:59",{"_index":525,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:64",{"_index":531,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:74",{"_index":528,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:79",{"_index":519,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:86",{"_index":541,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.module.ts",{"_index":607,"title":{},"body":{"modules/PostModule.html":{}}}],["src/post/services/post.service.ts",{"_index":613,"title":{},"body":{"injectables/PostService.html":{},"coverage.html":{}}}],["src/post/services/post.service.ts:14",{"_index":617,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/services/post.service.ts:25",{"_index":622,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/services/post.service.ts:44",{"_index":618,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/services/post.service.ts:65",{"_index":620,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/services/post.service.ts:85",{"_index":624,"title":{},"body":{"injectables/PostService.html":{}}}],["src/tags/dtos/create",{"_index":294,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service",{"_index":627,"title":{},"body":{"injectables/PostService.html":{}}}],["src/tags/providers/tags.service.ts",{"_index":726,"title":{},"body":{"injectables/TagsService.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service.ts:12",{"_index":734,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:18",{"_index":737,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:28",{"_index":735,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:33",{"_index":739,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:8",{"_index":731,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tag.entity",{"_index":548,"title":{},"body":{"entities/Post.html":{}}}],["src/tags/tag.entity.ts",{"_index":688,"title":{},"body":{"entities/Tag.html":{},"coverage.html":{}}}],["src/tags/tag.entity.ts:15",{"_index":696,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:23",{"_index":699,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:29",{"_index":693,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:35",{"_index":698,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:42",{"_index":694,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:45",{"_index":690,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:48",{"_index":700,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:51",{"_index":692,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:56",{"_index":697,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:7",{"_index":695,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.controller.ts",{"_index":702,"title":{},"body":{"controllers/TagsController.html":{},"coverage.html":{}}}],["src/tags/tags.controller.ts:10",{"_index":705,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:15",{"_index":706,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:19",{"_index":709,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.module",{"_index":610,"title":{},"body":{"modules/PostModule.html":{}}}],["src/tags/tags.module.ts",{"_index":722,"title":{},"body":{"modules/TagsModule.html":{}}}],["src/users/dtos/create",{"_index":151,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":350,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":510,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/providers/user",{"_index":760,"title":{},"body":{"injectables/UserCreateManyProvider.html":{},"coverage.html":{}}}],["src/users/providers/user.service",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{}}}],["src/users/providers/user.service.ts",{"_index":792,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/users/providers/user.service.ts:113",{"_index":805,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/user.service.ts:17",{"_index":804,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/user.service.ts:30",{"_index":809,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/user.service.ts:62",{"_index":814,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/user.service.ts:83",{"_index":807,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/user.entity",{"_index":547,"title":{},"body":{"entities/Post.html":{}}}],["src/users/user.entity.ts",{"_index":748,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:13",{"_index":751,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:21",{"_index":753,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:28",{"_index":750,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:34",{"_index":754,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:37",{"_index":757,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:7",{"_index":752,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":861,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:36",{"_index":886,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:44",{"_index":870,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:50",{"_index":868,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:56",{"_index":888,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":127,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostModule.html":{}}}],["src/users/users.module.ts",{"_index":914,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":991,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":994,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":996,"title":{},"body":{"index.html":{}}}],["startdate",{"_index":337,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{}}}],["started",{"_index":972,"title":{"index.html":{}},"body":{}}],["starter",{"_index":984,"title":{},"body":{"index.html":{}}}],["statements",{"_index":923,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":186,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["stay",{"_index":1061,"title":{},"body":{"index.html":{}}}],["steps",{"_index":1007,"title":{},"body":{"index.html":{}}}],["story",{"_index":967,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["straightforward",{"_index":1021,"title":{},"body":{"index.html":{}}}],["string",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["string(error",{"_index":787,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["successfully",{"_index":597,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["successfully'})@patch",{"_index":578,"title":{},"body":{"controllers/PostController.html":{}}}],["successfully'})@post",{"_index":564,"title":{},"body":{"controllers/PostController.html":{}}}],["summary",{"_index":596,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":1042,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1091,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["t",{"_index":426,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["table",{"_index":793,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":937,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":537,"title":{"entities/Tag.html":{}},"body":{"entities/Post.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["tag.dto",{"_index":710,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tag.dto.ts",{"_index":295,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["tag.dto.ts:10",{"_index":301,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:22",{"_index":304,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:28",{"_index":297,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:33",{"_index":303,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:39",{"_index":299,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.entity",{"_index":724,"title":{},"body":{"modules/TagsModule.html":{},"injectables/TagsService.html":{}}}],["tag.posts",{"_index":539,"title":{},"body":{"entities/Post.html":{}}}],["tags",{"_index":187,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tags.controller",{"_index":723,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags.length",{"_index":663,"title":{},"body":{"injectables/PostService.html":{}}}],["tags/providers/tags.service",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["tags/tags.module",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["tagscontroller",{"_index":701,"title":{"controllers/TagsController.html":{}},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tagsmodule",{"_index":38,"title":{"modules/TagsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules.html":{},"overview.html":{}}}],["tagsrepository",{"_index":732,"title":{},"body":{"injectables/TagsService.html":{}}}],["tagsservice",{"_index":59,"title":{"injectables/TagsService.html":{}},"body":{"modules/AppModule.html":{},"injectables/PostService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{},"overview.html":{}}}],["take",{"_index":462,"title":{},"body":{"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"index.html":{}}}],["test",{"_index":999,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":1002,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1001,"title":{},"body":{"index.html":{}}}],["tests",{"_index":997,"title":{},"body":{"index.html":{}}}],["text",{"_index":520,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["thanks",{"_index":1074,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":19,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.isauth",{"_index":828,"title":{},"body":{"injectables/UserService.html":{}}}],["this.configservice.get(\"s3_bucket",{"_index":831,"title":{},"body":{"injectables/UserService.html":{}}}],["this.datasource.createqueryrunner",{"_index":772,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["this.metaoptionrepository.create(createpostdto.metaoptions",{"_index":641,"title":{},"body":{"injectables/PostService.html":{}}}],["this.metaoptionrepository.create(createpostmetaoptionsdto",{"_index":417,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionrepository.delete(post.metaoptions.id",{"_index":649,"title":{},"body":{"injectables/PostService.html":{}}}],["this.metaoptionrepository.find",{"_index":651,"title":{},"body":{"injectables/PostService.html":{}}}],["this.metaoptionrepository.save(metaoption",{"_index":419,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionrepository.save(metaoptions",{"_index":645,"title":{},"body":{"injectables/PostService.html":{}}}],["this.metaoptionservice.create(createpostmetaoptiondto",{"_index":398,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["this.paginationprovider.paginatequery",{"_index":638,"title":{},"body":{"injectables/PostService.html":{}}}],["this.postrepository",{"_index":639,"title":{},"body":{"injectables/PostService.html":{}}}],["this.postrepository.create",{"_index":644,"title":{},"body":{"injectables/PostService.html":{}}}],["this.postrepository.delete(id",{"_index":648,"title":{},"body":{"injectables/PostService.html":{}}}],["this.postrepository.find",{"_index":634,"title":{},"body":{"injectables/PostService.html":{}}}],["this.postrepository.findoneby",{"_index":647,"title":{},"body":{"injectables/PostService.html":{}}}],["this.postrepository.save(post",{"_index":646,"title":{},"body":{"injectables/PostService.html":{}}}],["this.postservice.createpost(createpostdto",{"_index":599,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.delete(id",{"_index":603,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.findall(postquery",{"_index":595,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.update(patchpostdto",{"_index":601,"title":{},"body":{"controllers/PostController.html":{}}}],["this.request.headers.host",{"_index":465,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.request.protocol",{"_index":464,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.tagsrepository.create(createtagdto",{"_index":741,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.delete(id",{"_index":746,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.find",{"_index":744,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.save(tag",{"_index":742,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.softdelete(id",{"_index":747,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsservice.createtags(createtagdto",{"_index":713,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.delete(id",{"_index":715,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.findmultpletags(createpostdto.tags",{"_index":642,"title":{},"body":{"injectables/PostService.html":{}}}],["this.tagsservice.findmultpletags(patchpostdto.tags",{"_index":655,"title":{},"body":{"injectables/PostService.html":{}}}],["this.tagsservice.softremove(id",{"_index":718,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.userrepository.create(createuserdto",{"_index":856,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findone",{"_index":853,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findoneby",{"_index":849,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save(newuser",{"_index":857,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userscreatemanyprovider.createmany(createmanyusersdto",{"_index":859,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.createmany(createmanyusersdto",{"_index":909,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.createuser(createuserdto",{"_index":907,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.findall(getusersparamdto",{"_index":905,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.findonebyid(+'1234",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findonebyid(+userid",{"_index":632,"title":{},"body":{"injectables/PostService.html":{}}}],["this.userservice.findonebyid(createpostdto.authorid",{"_index":643,"title":{},"body":{"injectables/PostService.html":{}}}],["throw",{"_index":658,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["thrown",{"_index":229,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["time",{"_index":1056,"title":{},"body":{"index.html":{}}}],["timestamp",{"_index":530,"title":{},"body":{"entities/Post.html":{}}}],["title",{"_index":188,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["totalitems",{"_index":429,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["totalpages",{"_index":431,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["touch",{"_index":1082,"title":{},"body":{"index.html":{}}}],["transaction",{"_index":786,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["transformer",{"_index":171,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{},"dependencies.html":{}}}],["true",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{}}}],["true})@apipropertyoptional({description",{"_index":253,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@jointable",{"_index":540,"title":{},"body":{"entities/Post.html":{}}}],["true})@type(undefined",{"_index":163,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{}}}],["try",{"_index":654,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["twitter",{"_index":1087,"title":{},"body":{"index.html":{}}}],["type",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["typeorm",{"_index":382,"title":{},"body":{"entities/MetaOption.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"entities/Post.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([metaoption",{"_index":404,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["typeormmodule.forfeature([post",{"_index":612,"title":{},"body":{"modules/PostModule.html":{}}}],["typeormmodule.forfeature([tag",{"_index":725,"title":{},"body":{"modules/TagsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":918,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":513,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":983,"title":{},"body":{"index.html":{}}}],["undefined",{"_index":255,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["undefined})@isnotempty()@isarray()@validatenested({each",{"_index":162,"title":{},"body":{"classes/CreateManyUsersDTO.html":{}}}],["undefined})@isoptional()@validatenested({each",{"_index":209,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unique",{"_index":534,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["unit",{"_index":998,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":414,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostService.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["unlicensed",{"_index":1100,"title":{},"body":{"properties.html":{}}}],["update",{"_index":615,"title":{},"body":{"injectables/PostService.html":{}}}],["update(patchpostdto",{"_index":623,"title":{},"body":{"injectables/PostService.html":{}}}],["updated",{"_index":508,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostController.html":{}}}],["updated'})@isint()@isnotempty",{"_index":504,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["updatedate",{"_index":363,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatedatecolumn",{"_index":376,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatepost",{"_index":556,"title":{},"body":{"controllers/PostController.html":{}}}],["updatepost(@body",{"_index":600,"title":{},"body":{"controllers/PostController.html":{}}}],["updatepost(patchpostdto",{"_index":574,"title":{},"body":{"controllers/PostController.html":{}}}],["updates",{"_index":575,"title":{},"body":{"controllers/PostController.html":{},"index.html":{}}}],["uppercase",{"_index":323,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["url",{"_index":235,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["url'})@maxlength(256",{"_index":245,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["url(this.request.url",{"_index":468,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["usefactory",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":53,"title":{"entities/User.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDTO.html":{},"classes/GetUsersParamDto.html":{},"entities/Post.html":{},"injectables/PostService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["user.dto",{"_index":170,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/PatchUserDto.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["user.dto.ts",{"_index":153,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:14",{"_index":313,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:18",{"_index":164,"title":{},"body":{"classes/CreateManyUsersDTO.html":{}}}],["user.dto.ts:20",{"_index":309,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:28",{"_index":328,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:8",{"_index":311,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.entity",{"_index":769,"title":{},"body":{"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["user.posts",{"_index":517,"title":{},"body":{"entities/Post.html":{}}}],["user.service.ts",{"_index":843,"title":{},"body":{"injectables/UserService.html":{}}}],["usercreatemanyprovider",{"_index":759,"title":{"injectables/UserCreateManyProvider.html":{}},"body":{"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["userid",{"_index":573,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["username",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["userrepository",{"_index":800,"title":{},"body":{"injectables/UserService.html":{}}}],["users",{"_index":155,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/GetUsersParamDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["users.controller",{"_index":915,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/user.entity",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.module",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":860,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userscreatemanyprovider",{"_index":803,"title":{},"body":{"injectables/UserService.html":{}}}],["userservice",{"_index":134,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["usersmodule",{"_index":39,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["uses",{"_index":242,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["using",{"_index":817,"title":{},"body":{"injectables/UserService.html":{},"index.html":{}}}],["validatenested",{"_index":167,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{}}}],["validation",{"_index":227,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validationpipe",{"_index":893,"title":{},"body":{"controllers/UsersController.html":{}}}],["validationschema",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":168,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["value",{"_index":484,"title":{},"body":{"classes/PaginationQueryDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":214,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["varchar",{"_index":522,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["variable",{"_index":926,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1101,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":1098,"title":{},"body":{"properties.html":{}}}],["video",{"_index":1049,"title":{},"body":{"index.html":{}}}],["visit",{"_index":1039,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":1052,"title":{},"body":{"index.html":{}}}],["void",{"_index":812,"title":{},"body":{"injectables/UserService.html":{}}}],["want",{"_index":885,"title":{},"body":{"controllers/UsersController.html":{}}}],["watch",{"_index":992,"title":{},"body":{"index.html":{}}}],["website",{"_index":1085,"title":{},"body":{"index.html":{}}}],["without",{"_index":243,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["working",{"_index":1038,"title":{},"body":{"index.html":{}}}],["world",{"_index":111,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":1064,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":1078,"title":{},"body":{"index.html":{}}}],["you're",{"_index":1003,"title":{},"body":{"index.html":{}}}],["z0",{"_index":237,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["z\\d@$!%*#?&]{8",{"_index":317,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*#?&])[a",{"_index":316,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":315,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) { }\n\n  /* @Get()\n   getHello(): string {\n     return this.appService.getHello();\n   }*/\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nPostModule\n\nPostModule\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            MetaOptionsModule\n                        \n                        \n                            PaginationModule\n                        \n                        \n                            PostModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostModule } from './post/post.module';\nimport { PostService } from './post/services/post.service';\nimport { AuthModule } from './auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './users/user.entity';\nimport { TagsModule } from './tags/tags.module';\nimport { MetaOptionsModule } from './meta-options/meta-options.module';\nimport { TagsService } from './tags/providers/tags.service';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { PaginationModule } from './common/pagination/pagination.module';\nimport { PaginationModule } from './common/pagination/pagination.module';\nimport appConfig from './config/app.config';\nimport databaseConfig from './config/database.config';\nimport environmentValidation from './config/environment.validation';\n\nconst ENV = process.env.NODE_ENV;\n@Module({\n  imports: [UsersModule, PostModule, AuthModule, TagsModule, ConfigModule.forRoot({\n    isGlobal: true,\n    //envFilePath: ['.env.development']\n    envFilePath: !ENV ? '.env' : `.env.${ENV}`,\n    load: [appConfig, databaseConfig],\n    validationSchema: environmentValidation\n  }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        //entities: [User],\n        autoLoadEntities: configService.get('database.autoLoadEntities'),\n        synchronize: configService.get('database.synchronize'),\n        port: +configService.get('database.port'),\n        username: configService.get('database.user'),\n        password: configService.get('database.password'),\n        host: configService.get('database.host'),\n        database: configService.get('database.name'),\n      })\n\n    }),\n    TagsModule,\n    MetaOptionsModule,\n    PaginationModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World NestJs!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AuthService } from './service/auth.service';\n\n@Controller('auth')\nexport class AuthController {\n\n    constructor(private readonly authService:AuthService){}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthService } from './service/auth.service';\nimport { AuthController } from './auth.controller';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  providers: [AuthService],\n  controllers: [AuthController],\n  imports: [forwardRef(() => UsersModule)],\n  exports: [AuthService]\n})\nexport class AuthModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/service/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAUth\n                            \n                            \n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/service/auth.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAUth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAUth()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/service/auth.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n            \n                \nlogin(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/service/auth.service.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { UserService } from 'src/users/providers/user.service';\n\n@Injectable()\nexport class AuthService {\n\n    constructor(@Inject(forwardRef(() => UserService)) private readonly userService: UserService) { }\n    login(email: string, password: string) {\n        const user = this.userService.findOneById(+'1234');\n        return \"SAMPLE_TOKEN\"\n    }\n\n\n    public isAUth() {\n        return true;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateManyUsersDTO.html":{"url":"classes/CreateManyUsersDTO.html","title":"class - CreateManyUsersDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateManyUsersDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-many-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateUserDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'array', required: true, items: undefined})@IsNotEmpty()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-many-user.dto.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsNotEmpty, ValidateNested } from \"class-validator\";\nimport { CreateUserDto } from \"./create-user.dto\";\nimport { Type } from \"class-transformer\";\nimport { ApiProperty } from \"@nestjs/swagger\";\n\nexport class CreateManyUsersDTO {\n    @ApiProperty({\n        type: 'array',\n        required: true,\n        items: {\n            type: 'User'\n        }\n    })\n    @IsNotEmpty()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CreateUserDto)\n    users: CreateUserDto[]\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dtos/create-post.dtos.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                authorId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsNotEmpty()@ApiProperty({type: 'integer', required: true, example: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:124\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({description: 'This is the content of the post', example: 'the post content'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsUrl()@MaxLength(1024)@ApiPropertyOptional({description: 'featured image for your blog post', example: 'http://localhost.com/images/image1.jpg'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionsDto | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ApiPropertyOptional({type: 'object', required: false, items: undefined})@IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:115\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(postType)@IsNotEmpty()@ApiProperty({enum: postType, description: 'Possible values, 'POST', 'PAGE','STORY','SERIES''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsISO8601()@IsOptional()@ApiPropertyOptional({description: 'The date on which the blog post is published', example: '2024-03-16T07:46:32+0000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsJSON()@ApiPropertyOptional({description: 'Serialize your JSON object else a validation error will be thrown', example: '{\n \"@context\": \"https://schema.org\",\n \"@type\": \"Person\"\n}'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty({description: 'For example - 'my-url'', example: 'my-blog-post'})@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url'})@MaxLength(256)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(postStatus)@IsNotEmpty()@ApiProperty({enum: postStatus, description: ' Possible values, 'DRAFT', 'SCHEDULED','REVIEW', 'PUBLISHED''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()@IsInt({each: true})@ApiPropertyOptional({description: 'Array of ids of tags', example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'This is a title', description: 'this is the title of the blog post'})@IsString()@MinLength(4)@MaxLength(512)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsEnum, IsInt, IsISO8601, IsJSON, IsNotEmpty, IsOptional, IsString, IsUrl, Matches, MaxLength, MinLength, ValidateNested } from \"class-validator\";\nimport { postType } from \"../enums/postType.enum\";\nimport { postStatus } from \"../enums/status.enum\";\nimport { CreatePostMetaOptionsDto } from \"../../meta-options/dtos/create-post-meta-option.dtos\";\nimport { Type } from \"class-transformer\";\nimport { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\n\nexport class CreatePostDto {\n    @ApiProperty({\n        example: \"This is a title\",\n        description: \"this is the title of the blog post\"\n    })\n    @IsString()\n    @MinLength(4)\n    @MaxLength(512)\n    @IsNotEmpty()\n    title: string;\n\n    @IsEnum(postType)\n    @IsNotEmpty()\n    @ApiProperty({\n        enum: postType,\n        description: \"Possible values, 'POST', 'PAGE','STORY','SERIES'\",\n    })\n    postType: postType;\n    @IsString()\n    @IsOptional()\n    @ApiPropertyOptional({\n        description: \"This is the content of the post\",\n        example: \"the post content\"\n    })\n    content?: string;\n\n    @IsString()\n    @IsNotEmpty()\n    @ApiProperty({\n        description: \"For example - 'my-url'\",\n        example: \"my-blog-post\"\n    })\n    @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n        message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url'\n    })\n    @MaxLength(256)\n    slug: string;\n\n\n    @IsEnum(postStatus)\n    @IsNotEmpty()\n    @ApiProperty({\n        enum: postStatus,\n        description: \" Possible values, 'DRAFT', 'SCHEDULED','REVIEW', 'PUBLISHED'\"\n    })\n    status: postStatus;\n\n    @IsOptional()\n    @IsJSON()\n    @ApiPropertyOptional({\n        description: \"Serialize your JSON object else a validation error will be thrown\",\n        example: \"{\\r\\n \\\"@context\\\": \\\"https:\\/\\/schema.org\\\",\\r\\n \\\"@type\\\": \\\"Person\\\"\\r\\n}\"\n    })\n    schema?: string;\n\n\n    @IsOptional()\n    @IsUrl()\n    @MaxLength(1024)\n    @ApiPropertyOptional({\n        description: \"featured image for your blog post\",\n        example: \"http://localhost.com/images/image1.jpg\"\n    })\n    featuredImageUrl?: string;\n\n\n    @IsISO8601()\n    @IsOptional()\n    @ApiPropertyOptional({\n        description: \"The date on which the blog post is published\",\n        example: \"2024-03-16T07:46:32+0000\",\n    })\n    publishOn?: Date;\n\n\n    @IsOptional()\n    @IsArray()\n    @IsInt({\n        each: true\n    })\n    @ApiPropertyOptional({\n        description: \"Array of ids of tags\",\n        example: [1, 2],\n    })\n    tags?: number[];\n\n\n\n    @IsOptional()\n    @ApiPropertyOptional({\n        type: 'object',\n        required: false,\n        items: {\n            type: 'object',\n            properties: {\n                metaValue: {\n                    type: 'json',\n                    description: 'The metaValue is JSON string',\n                    example: '{\"sidebarEnabled\":true}'\n                }\n            }\n        }\n    })\n\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => CreatePostMetaOptionsDto)\n    metaOptions?: CreatePostMetaOptionsDto | null;\n\n    @IsInt()\n    @IsNotEmpty()\n    @ApiProperty({\n        type: 'integer',\n        required: true,\n        example: 1\n    })\n    authorId: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto.html":{"url":"classes/CreatePostMetaOptionsDto.html","title":"class - CreatePostMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/dtos/create-post-meta-option.dtos.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                metaValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/dtos/create-post-meta-option.dtos.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsJSON, IsNotEmpty, IsString } from \"class-validator\";\n\nexport class CreatePostMetaOptionsDto {\n    @IsNotEmpty()\n    @IsJSON()\n    metaValue: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagDto.html":{"url":"classes/CreateTagDto.html","title":"class - CreateTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/dtos/create-tag.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsUrl()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@MinLength(3)@IsNotEmpty()@MaxLength(256)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty({description: 'For example - 'my-url'', example: 'my-blog-post'})@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url'})@MaxLength(256)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsJSON, IsNotEmpty, IsOptional, IsString, IsUrl, Matches, MaxLength, MinLength } from \"class-validator\";\n\nexport class CreateTagDto {\n    @ApiProperty()\n    @IsString()\n    @MinLength(3)\n    @IsNotEmpty()\n    @MaxLength(256)\n    name: string;\n\n    @IsString()\n    @IsNotEmpty()\n    @ApiProperty({\n        description: \"For example - 'my-url'\",\n        example: \"my-blog-post\"\n    })\n    @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n        message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url'\n    })\n    @MaxLength(256)\n    slug: string;\n\n\n    @ApiPropertyOptional()\n    @IsOptional()\n    @IsString()\n    description?: string;\n\n    @ApiPropertyOptional()\n    @IsOptional()\n    @IsJSON()\n    schema?: string;\n\n    @ApiPropertyOptional()\n    @IsOptional()\n    @IsUrl()\n    @MaxLength(1024)\n    featuredImageUrl?: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsEmail()@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {message: 'Password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, one number, and one special character.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsOptional, IsString, Matches, MaxLength, MinLength } from \"class-validator\";\n\nexport class CreateUserDto {\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(3)\n    @MaxLength(96)\n    firstName: string;\n\n    @IsString()\n    @IsOptional()\n    @MinLength(3)\n    @MaxLength(96)\n    lastName?: string;\n\n    @IsString()\n    @IsNotEmpty()\n    @IsEmail()\n    @MaxLength(96)\n    email: string;\n\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(8)\n    @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {\n        message: 'Password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, one number, and one special character.'\n    })\n    password: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPostBaseDto.html":{"url":"classes/GetPostBaseDto.html","title":"class - GetPostBaseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPostBaseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dtos/get-posts.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                endDate\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                startDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        endDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/get-posts.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        startDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/get-posts.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IntersectionType } from \"@nestjs/swagger\";\nimport { IsDate, IsOptional } from \"class-validator\";\nimport { PaginationQueryDto } from \"src/common/pagination/dtos/pagination-query.dto\";\n\nclass GetPostBaseDto {\n    @IsDate()\n    @IsOptional()\n    startDate?: Date;\n\n    @IsDate()\n    @IsOptional()\n    endDate?: Date;\n}\n\nexport class GetPostDto extends IntersectionType(GetPostBaseDto, PaginationQueryDto) {\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPostDto.html":{"url":"classes/GetPostDto.html","title":"class - GetPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dtos/get-posts.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            IntersectionType(GetPostBaseDto, PaginationQueryDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IntersectionType } from \"@nestjs/swagger\";\nimport { IsDate, IsOptional } from \"class-validator\";\nimport { PaginationQueryDto } from \"src/common/pagination/dtos/pagination-query.dto\";\n\nclass GetPostBaseDto {\n    @IsDate()\n    @IsOptional()\n    startDate?: Date;\n\n    @IsDate()\n    @IsOptional()\n    endDate?: Date;\n}\n\nexport class GetPostDto extends IntersectionType(GetPostBaseDto, PaginationQueryDto) {\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Ger user  with a specific id', example: 1234})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-param.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsInt, IsOptional } from \"class-validator\";\n\nexport class GetUsersParamDto {\n    @ApiPropertyOptional({\n        description: \"Ger user  with a specific id\",\n        example: 1234\n    })\n    @IsOptional()\n    @IsInt()\n    @Type(() => Number)\n    id?: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/MetaOption.html":{"url":"entities/MetaOption.html","title":"entity - MetaOption","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  MetaOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-option.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                metaValue\n                            \n                            \n                                    \n                                    \n                                post\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, post => post.metaOptions, {onDelete: 'CASCADE'})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:19\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from \"src/post/post.entity\";\nimport { Column, CreateDateColumn, Entity, JoinColumn, OneToOne, PrimaryGeneratedColumn, UpdateDateColumn } from \"typeorm\";\n\n@Entity()\nexport class MetaOption {\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column({\n        type: \"json\",\n        nullable: false\n    })\n    metaValue: string;\n\n    @CreateDateColumn()\n    createDate: Date\n\n    @UpdateDateColumn()\n    updateDate: Date;\n\n\n    @OneToOne(() => Post, (post) => post.metaOptions, {\n        onDelete: 'CASCADE'\n    })\n    @JoinColumn()\n    post: Post;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MetaOptionsController.html":{"url":"controllers/MetaOptionsController.html","title":"controller - MetaOptionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MetaOptionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-options.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                meta-options\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostMetaOptionDto: CreatePostMetaOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/meta-options/meta-options.controller.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostMetaOptionDto\n                                            \n                                                            CreatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { CreatePostMetaOptionsDto } from './dtos/create-post-meta-option.dtos';\nimport { MetaOptionsService } from './providers/meta-options.service';\n\n@Controller('meta-options')\nexport class MetaOptionsController {\n\n\n    constructor(private readonly metaOptionService: MetaOptionsService) { }\n    @Post()\n    public create(@Body() createPostMetaOptionDto: CreatePostMetaOptionsDto) {\n        return this.metaOptionService.create(createPostMetaOptionDto);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MetaOptionsModule.html":{"url":"modules/MetaOptionsModule.html","title":"module - MetaOptionsModule","body":"\n                   \n\n\n\n\n    Modules\n    MetaOptionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/meta-options/meta-options.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MetaOptionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MetaOptionsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MetaOptionsController } from './meta-options.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MetaOption } from './meta-option.entity';\nimport { MetaOptionsService } from './providers/meta-options.service';\n\n@Module({\n  controllers: [MetaOptionsController],\n  imports: [TypeOrmModule.forFeature([MetaOption])],\n  providers: [MetaOptionsService]\n})\nexport class MetaOptionsModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MetaOptionsService.html":{"url":"injectables/MetaOptionsService.html","title":"injectable - MetaOptionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MetaOptionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/providers/meta-options.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(metaOptionRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/meta-options/providers/meta-options.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        metaOptionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostMetaOptionsDto: CreatePostMetaOptionsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/meta-options/providers/meta-options.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostMetaOptionsDto\n                                            \n                                                            CreatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreatePostMetaOptionsDto } from '../dtos/create-post-meta-option.dtos';\nimport { Repository } from 'typeorm';\nimport { MetaOption } from '../meta-option.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class MetaOptionsService {\n\n    constructor(@InjectRepository(MetaOption) private readonly metaOptionRepository: Repository) { }\n\n    public async create(createPostMetaOptionsDto: CreatePostMetaOptionsDto) {\n        let metaOption = this.metaOptionRepository.create(createPostMetaOptionsDto);\n        return await this.metaOptionRepository.save(metaOption);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Paginated.html":{"url":"interfaces/Paginated.html","title":"interface - Paginated","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Paginated\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/interfaces/paginated.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            links\n                                        \n                                \n                                \n                                        \n                                            meta\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        links\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        links:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        meta\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        meta:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Paginated {\n\n    data: T[];\n    meta: {\n        itemsPerPage: number;\n        totalItems: number;\n        currentPage: number;\n        totalPages: number;\n    };\n    links: {\n        first: string;\n        last: string;\n        current: string;\n        next: string;\n        previous: string;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaginationModule.html":{"url":"modules/PaginationModule.html","title":"module - PaginationModule","body":"\n                   \n\n\n\n\n    Modules\n    PaginationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_exports\n\n\n\ncluster_PaginationModule_providers\n\n\n\n\nPaginationProvider \n\nPaginationProvider \n\n\n\nPaginationModule\n\nPaginationModule\n\nPaginationProvider  -->\n\nPaginationModule->PaginationProvider \n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nPaginationModule -->\n\nPaginationProvider->PaginationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/pagination/pagination.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaginationProvider\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PaginationProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PaginationProvider } from './providers/pagination.provider';\n\n@Module({\n    providers: [PaginationProvider],\n    exports: [PaginationProvider]\n})\nexport class PaginationModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaginationProvider.html":{"url":"injectables/PaginationProvider.html","title":"injectable - PaginationProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaginationProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/providers/pagination.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                paginateQuery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: Request)\n                    \n                \n                        \n                            \n                                Defined in src/common/pagination/providers/pagination.provider.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                    Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        paginateQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    paginateQuery(paginationQuery: PaginationQueryDto, repository: Repository)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/pagination/providers/pagination.provider.ts:15\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                paginationQuery\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                repository\n                                            \n                                                        Repository\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { PaginationQueryDto } from '../dtos/pagination-query.dto';\nimport { ObjectLiteral, Repository } from 'typeorm';\nimport { Request } from 'express';\nimport { REQUEST } from '@nestjs/core';\nimport { Paginated } from '../interfaces/paginated.interface';\n\n@Injectable()\nexport class PaginationProvider {\n\n    constructor(\n        @Inject(REQUEST)\n        private readonly request: Request\n    ) { }\n    public async paginateQuery(paginationQuery: PaginationQueryDto, repository: Repository): Promise> {\n        let results = await repository.find({\n            skip: (paginationQuery.page - 1) * paginationQuery.limit,\n            take: paginationQuery.limit\n        })\n\n        const baseUrl = this.request.protocol + '://' + this.request.headers.host + '/';\n\n        const newUrl = new URL(this.request.url, baseUrl)\n        console.log(newUrl)\n\n        const totalItems = await repository.count();\n        const totalPages = Math.ceil(totalItems / paginationQuery.limit);\n        const nextPage = paginationQuery.page === totalPages ? paginationQuery.page : paginationQuery.page + 1\n        const previousPage = paginationQuery.page === 1 ? paginationQuery.page : paginationQuery.page - 1;\n        const finalResponse: Paginated = {\n            data: results,\n            meta: {\n                itemsPerPage: paginationQuery.limit,\n                totalItems: totalItems,\n                currentPage: paginationQuery.page,\n                totalPages: totalPages,\n            },\n            links: {\n                first: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&pages=1`,\n                last: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&pages=${totalPages}`,\n                current: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&pages=${paginationQuery.page}`,\n                next: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&pages=${nextPage}`,\n                previous: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&pages=${previousPage}`\n            }\n        }\n\n        return finalResponse;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationQueryDto.html":{"url":"classes/PaginationQueryDto.html","title":"class - PaginationQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/dtos/pagination-query.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/dtos/pagination-query.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/dtos/pagination-query.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport { IsOptional, IsPositive } from \"class-validator\";\n\nexport class PaginationQueryDto {\n    @IsOptional()\n    @IsPositive()\n    //@Type(() => Number) we do not need this anymore cause we already enabled the implicit conversion in the main.ts\n    limit?: number = 10;\n    @IsOptional()\n    @IsPositive()\n    //@Type(() => Number)\n    page?: number = 1;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dtos/patch-post-dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The id of the post that needs to be updated'})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/patch-post-dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from \"@nestjs/swagger\";\nimport { IsInt, IsNotEmpty } from \"class-validator\";\nimport { CreatePostDto } from \"./create-post.dtos\";\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n    @ApiProperty({\n        description: \"The id of the post that needs to be updated\"\n    })\n    @IsInt()\n    @IsNotEmpty()\n    id: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \"@nestjs/mapped-types\";\nimport { CreateUserDto } from \"./create-user.dto\";\n\nexport class PatchUserDto extends PartialType(CreateUserDto) {\n   \n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                postType\n                            \n                            \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.posts, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MetaOption\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, metaOptions => metaOptions.post, {cascade: true, eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: postType, nullable: false, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: postStatus, nullable: false, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Tag[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, tag => tag.posts, {eager: true})@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:18\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, JoinTable, ManyToMany, ManyToOne, OneToOne, PrimaryGeneratedColumn } from \"typeorm\";\nimport { CreatePostMetaOptionsDto } from \"../meta-options/dtos/create-post-meta-option.dtos\";\nimport { postType } from \"./enums/postType.enum\";\nimport { postStatus } from \"./enums/status.enum\";\nimport { MetaOption } from \"src/meta-options/meta-option.entity\";\nimport { User } from \"src/users/user.entity\";\nimport { Tag } from \"src/tags/tag.entity\";\n\n@Entity()\nexport class Post {\n    @PrimaryGeneratedColumn()\n    id: number;\n    @Column({\n        type: \"varchar\",\n        length: 512,\n        nullable: false\n    })\n    title: string;\n    @Column({\n        type: \"enum\",\n        enum: postType,\n        nullable: false,\n        default: postType.POST\n    })\n    postType: postType;\n\n    @Column({\n        type: \"varchar\",\n        length: 256,\n        nullable: false,\n        unique: true\n    })\n    slug: string;\n    @Column({\n        type: \"enum\",\n        enum: postStatus,\n        nullable: false,\n        default: postStatus.DRAFT\n    })\n    status: postStatus;\n\n    @Column({\n        type: \"text\",\n        nullable: true\n    })\n    content?: string;\n\n    @Column({\n        type: \"text\",\n        nullable: true\n    })\n    schema?: string;\n\n    @Column({\n        type: \"varchar\",\n        length: 1024,\n        nullable: true\n    })\n    featuredImageUrl?: string;\n\n    @Column({\n        type: \"timestamp\",\n    })\n    publishOn?: Date;\n\n\n\n\n    @OneToOne(() => MetaOption, (metaOptions) => metaOptions.post, {\n        cascade: true,\n        eager: true\n    })\n    //@JoinColumn()\n    metaOptions?: MetaOption;\n\n    @ManyToOne(() => User, (user) => user.posts, {\n        eager: true\n    })\n    author: User;\n\n\n    @ManyToMany(() => Tag, (tag) => tag.posts, {\n        eager: true\n    })\n    @JoinTable()\n    tags?: Tag[];\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostController.html":{"url":"controllers/PostController.html","title":"controller - PostController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                post\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    Public\n                                deletePost\n                            \n                            \n                                    \n                                    Public\n                                getPost\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new blog post'})@ApiResponse({status: 201, description: 'you get a 201 response if your post is created successfully'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPost(userId: string, postQuery: GetPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:userId?')\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                postQuery\n                                            \n                                                            GetPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Updates an existing blog post'})@ApiResponse({status: 200, description: 'A 200 response if the post is updated successfully'})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Param, ParseIntPipe, Patch, Post, Query } from '@nestjs/common';\nimport { PostService } from './services/post.service';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreatePostDto } from './dtos/create-post.dtos';\nimport { PatchPostDto } from './dtos/patch-post-dto';\nimport { GetPostDto } from './dtos/get-posts.dto';\n\n@Controller('post')\n@ApiTags('posts')\nexport class PostController {\n\n    constructor(private readonly postService: PostService) { }\n\n    @Get('/:userId?')\n    public getPost(@Param('userId') userId: string, @Query() postQuery: GetPostDto) {\n        return this.postService.findAll(postQuery, userId)\n    }\n\n    @ApiOperation({\n        summary: \"Creates a new blog post\"\n    })\n    @ApiResponse({\n        status: 201,\n        description: \"you get a 201 response if your post is created successfully\"\n    })\n    @Post()\n    public createPost(@Body() createPostDto: CreatePostDto) {\n        return this.postService.createPost(createPostDto)\n    }\n    @ApiOperation({\n        summary: \"Updates an existing blog post\"\n    })\n    @ApiResponse({\n        status: 200,\n        description: \"A 200 response if the post is updated successfully\"\n    })\n    @Patch()\n    public updatePost(@Body() patchPostDto: PatchPostDto) {\n        return this.postService.update(patchPostDto)\n    }\n\n    @Delete()\n    public deletePost(@Query(\"id\", ParseIntPipe) id: number) {\n        return this.postService.delete(id)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostModule.html":{"url":"modules/PostModule.html","title":"module - PostModule","body":"\n                   \n\n\n\n\n    Modules\n    PostModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostModule\n\n\n\ncluster_PostModule_imports\n\n\n\ncluster_PostModule_providers\n\n\n\n\nPaginationModule\n\nPaginationModule\n\n\n\nPostModule\n\nPostModule\n\nPostModule -->\n\nPaginationModule->PostModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostModule -->\n\nTagsModule->PostModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostModule -->\n\nUsersModule->PostModule\n\n\n\n\n\nPostService\n\nPostService\n\nPostModule -->\n\nPostService->PostModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/post/post.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PaginationModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostController } from './post.controller';\nimport { PostService } from './services/post.service';\nimport { UsersModule } from 'src/users/users.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Post } from './post.entity';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { TagsModule } from 'src/tags/tags.module';\nimport { PaginationModule } from 'src/common/pagination/pagination.module';\n\n@Module({\n  controllers: [PostController],\n  providers: [PostService],\n  imports: [UsersModule, TagsModule, TypeOrmModule.forFeature([Post, MetaOption]), PaginationModule]\n})\nexport class PostModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostService.html":{"url":"injectables/PostService.html","title":"injectable - PostService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/services/post.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createPost\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, postRepository: Repository, metaOptionRepository: Repository, tagsService: TagsService, paginationProvider: PaginationProvider)\n                    \n                \n                        \n                            \n                                Defined in src/post/services/post.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        metaOptionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tagsService\n                                                  \n                                                        \n                                                                        TagsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        paginationProvider\n                                                  \n                                                        \n                                                                        PaginationProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/services/post.service.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/services/post.service.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(postQuery: GetPostDto, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/services/post.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postQuery\n                                            \n                                                            GetPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(patchPostDto: PatchPostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/services/post.service.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable, RequestTimeoutException } from '@nestjs/common';\nimport { UserService } from 'src/users/providers/user.service';\nimport { CreatePostDto } from '../dtos/create-post.dtos';\nimport { Repository } from 'typeorm';\nimport { Post } from '../post.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { TagsService } from 'src/tags/providers/tags.service';\nimport { PatchPostDto } from '../dtos/patch-post-dto';\nimport { GetPostDto } from '../dtos/get-posts.dto';\nimport { PaginationProvider } from 'src/common/pagination/providers/pagination.provider';\nimport { Paginated } from 'src/common/pagination/interfaces/paginated.interface';\n@Injectable()\nexport class PostService {\n\n    constructor(private readonly userService: UserService,\n        @InjectRepository(Post) private readonly postRepository: Repository,\n\n        @InjectRepository(MetaOption) private readonly metaOptionRepository: Repository,\n\n        private readonly tagsService: TagsService,\n\n        private readonly paginationProvider: PaginationProvider\n    ) { }\n    public async findAll(postQuery: GetPostDto, userId: string): Promise> {\n        /*const user = await this.userService.findOneById(+userId);\n        let posts = await this.postRepository.find({\n            relations: {\n                metaOptions: true,\n                author: true,\n                tags: true\n            },\n            skip: (postQuery.page - 1) * postQuery.limit,\n            take: postQuery.limit,\n        })*/\n\n        let posts = await this.paginationProvider.paginateQuery({\n            limit: postQuery.limit,\n            page: postQuery.page\n        }, this.postRepository,)\n        return posts\n    }\n\n    public async createPost(createPostDto: CreatePostDto) {\n        //let metaOptions = createPostDto.metaOptions ? this.metaOptionRepository.create(createPostDto.metaOptions) : null\n\n        let tags = await this.tagsService.findMultpleTags(createPostDto.tags)\n        let author = await this.userService.findOneById(createPostDto.authorId);\n        let post = this.postRepository.create({\n            ...createPostDto,\n            author: author,\n            tags: tags\n        })\n        /*\n        if (metaOptions) {\n                    await this.metaOptionRepository.save(metaOptions);\n                }\n                if (metaOptions) {\n                    post.metaOptions = metaOptions\n                }*/\n\n        return await this.postRepository.save(post)\n    }\n\n    public async delete(id: number) {\n\n        let post = await this.postRepository.findOneBy({ id: id })\n\n        await this.postRepository.delete(id)\n\n        /*await this.metaOptionRepository.delete(post.metaOptions.id)\n*/\n        /*let inversePost = await this.metaOptionRepository.find({\n            where: {\n                id: post.metaOptions.id\n            },\n            relations: {\n                post: true\n            }\n        })*/\n        return { deleted: true, id }\n    }\n\n\n    public async update(patchPostDto: PatchPostDto) {\n        let tags = undefined;\n        let post = undefined;\n        try {\n            tags = await this.tagsService.findMultpleTags(patchPostDto.tags);\n        } catch (err) {\n            throw new RequestTimeoutException('unable to process your request please try later',);\n        }\n\n        if (!tags || tags.length !== patchPostDto.tags.length) {\n            throw new BadRequestException('please check your tag Ids and ensure they are correct')\n        }\n\n        try {\n            post = await this.postRepository.findOneBy({ id: patchPostDto.id })\n        } catch (e) {\n            throw new RequestTimeoutException('unable to process your request please try later',);\n\n        }\n\n        if (!post) {\n            throw new BadRequestException('The post id does not exist')\n        }\n\n        post.title = patchPostDto.title ?? post.title;\n        post.content = patchPostDto.content ?? post.content\n        post.status = patchPostDto.status ?? post.status\n        post.slug = patchPostDto.slug ?? post.slug\n        post.postType = patchPostDto.postType ?? post.postType\n        post.featuredImageUrl = patchPostDto.featuredImageUrl ?? post.featuredImageUrl\n        post.publishOn = patchPostDto.publishOn ?? post.publishOn\n\n        post.tags = tags\n        try {\n            await this.postRepository.save(post)\n        } catch (err) {\n            throw new RequestTimeoutException('unable to process your request please try later',);\n        }\n        return post;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Tag.html":{"url":"entities/Tag.html","title":"entity - Tag","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Tag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tag.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                deleteAt\n                            \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                posts\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, post => post.tags, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:48\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from \"src/post/post.entity\";\nimport { Column, CreateDateColumn, DeleteDateColumn, Entity, ManyToMany, PrimaryGeneratedColumn, UpdateDateColumn } from \"typeorm\";\n\n@Entity()\nexport class Tag {\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column({\n        type: \"varchar\",\n        length: 256,\n        nullable: false,\n        unique: true\n    })\n    name: string;\n\n    @Column({\n        type: \"varchar\",\n        length: 256,\n        nullable: false,\n        unique: true\n    })\n    slug: string;\n\n    @Column({\n        type: \"text\",\n        nullable: true,\n    })\n    description?: string;\n\n    @Column({\n        type: \"text\",\n        nullable: true,\n    })\n    schema?: string;\n\n    @Column({\n        type: \"varchar\",\n        length: 1024,\n        nullable: true,\n    })\n    featuredImageUrl: string;\n\n    @CreateDateColumn()\n    createDate: Date;\n\n    @UpdateDateColumn()\n    updateDate: Date;\n\n    @DeleteDateColumn()\n    deleteAt: Date;\n\n    @ManyToMany(() => Post, (post) => post.tags, {\n        onDelete: \"CASCADE\"\n    })\n    posts: Post[];\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagsController.html":{"url":"controllers/TagsController.html","title":"controller - TagsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tags\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                create\n                            \n                            \n                                    \n                                    Public\n                                delete\n                            \n                            \n                                    \n                                    Public\n                                softDelete\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTagDto: CreateTagDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTagDto\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        softDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDelete(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('soft-delete')\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, ParseIntPipe, Post, Query } from '@nestjs/common';\nimport { CreateTagDto } from './dtos/create-tag.dto';\nimport { TagsService } from './providers/tags.service';\n\n@Controller('tags')\nexport class TagsController {\n\n    constructor(private readonly tagsService: TagsService) { }\n    @Post()\n    public create(@Body() createTagDto: CreateTagDto) {\n        return this.tagsService.createTags(createTagDto)\n    }\n\n    @Delete()\n    public delete(@Query('id', ParseIntPipe) id: number) {\n        return this.tagsService.delete(id);\n    }\n    @Delete(\"soft-delete\")\n    public softDelete(@Query('id', ParseIntPipe) id: number) {\n        return this.tagsService.softRemove(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagsModule.html":{"url":"modules/TagsModule.html","title":"module - TagsModule","body":"\n                   \n\n\n\n\n    Modules\n    TagsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\n\nTagsService \n\nTagsService \n\n\n\nTagsModule\n\nTagsModule\n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tags/tags.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TagsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TagsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TagsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TagsController } from './tags.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Tag } from './tag.entity';\nimport { TagsService } from './providers/tags.service';\n\n@Module({\n  controllers: [TagsController],\n  imports: [TypeOrmModule.forFeature([Tag])],\n  providers: [TagsService],\n  exports: [TagsService]\n})\nexport class TagsModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TagsService.html":{"url":"injectables/TagsService.html","title":"injectable - TagsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TagsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/providers/tags.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createTags\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findMultpleTags\n                            \n                            \n                                    Public\n                                    Async\n                                softRemove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/tags/providers/tags.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tagsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTags(createTagDto: CreateTagDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTagDto\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findMultpleTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    findMultpleTags(tags: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tags\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        softRemove\n                        \n                    \n                \n            \n            \n                \n                        \n                    softRemove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateTagDto } from '../dtos/create-tag.dto';\nimport { In, Repository } from 'typeorm';\nimport { Tag } from '../tag.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class TagsService {\n\n    constructor(@InjectRepository(Tag) private readonly tagsRepository: Repository) { }\n\n    public async createTags(createTagDto: CreateTagDto) {\n        let tag = this.tagsRepository.create(createTagDto)\n\n        return await this.tagsRepository.save(tag)\n    }\n\n    public async findMultpleTags(tags: number[]) {\n        let result = await this.tagsRepository.find({\n            where: {\n                id: In(tags)\n            }\n        })\n\n        return result;\n    }\n\n    public async delete(id: number) {\n        await this.tagsRepository.delete(id);\n        return { deleted: true, id }\n    }\n\n    public async softRemove(id: number) {\n        await this.tagsRepository.softDelete(id);\n        return { deleted: true, id }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                posts\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, post => post.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:37\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from \"src/post/post.entity\";\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from \"typeorm\";\n\n@Entity()\nexport class User {\n    @PrimaryGeneratedColumn()\n    id: number;\n    @Column({\n        type: \"varchar\",\n        length: 96,\n        nullable: false\n    })\n    firstName: string;\n    @Column(\n        {\n            type: \"varchar\",\n            length: 96,\n            nullable: true\n        }\n    )\n    lastName: string;\n    @Column({\n        type: \"varchar\",\n        length: 96,\n        nullable: false,\n        unique: true\n    })\n    email: string;\n    @Column({\n        type: \"varchar\",\n        length: 96,\n        nullable: false\n    })\n    password: string;\n\n    @OneToMany(() => Post, (post) => post.author)\n    posts: Post[]\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserCreateManyProvider.html":{"url":"injectables/UserCreateManyProvider.html","title":"injectable - UserCreateManyProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserCreateManyProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/user-create-many.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createMany\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataSource: DataSource)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/user-create-many.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMany(createManyUsersDto: CreateManyUsersDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user-create-many.provider.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createManyUsersDto\n                                            \n                                                            CreateManyUsersDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, RequestTimeoutException } from '@nestjs/common';\nimport { User } from '../user.entity';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { DataSource } from 'typeorm';\nimport { CreateManyUsersDTO } from '../dtos/create-many-user.dto';\n\n@Injectable()\nexport class UserCreateManyProvider {\n\n    constructor(private readonly dataSource: DataSource) { }\n    public async createMany(createManyUsersDto: CreateManyUsersDTO) {\n        let newUsers: User[] = []\n\n        const queryRunner = this.dataSource.createQueryRunner();\n        try {\n            await queryRunner.connect();\n\n            await queryRunner.startTransaction();\n        } catch (error) {\n            throw new RequestTimeoutException('could not connect to the database')\n        }\n\n        try {\n            for (let user of createManyUsersDto.users) {\n                let newUser = queryRunner.manager.create(User, user)\n                let result = await queryRunner.manager.save(newUser)\n                newUsers.push(result)\n            }\n            await queryRunner.commitTransaction();\n        } catch (error) {\n            await queryRunner.rollbackTransaction();\n            throw new ConflictException('could not complete the transaction', {\n                description: String(error)\n            })\n        } finally {\n            try {\n                await queryRunner.release()\n            } catch (error) {\n                throw new RequestTimeoutException('could not release to the connection', {\n                    description: String(error)\n                })\n            }\n        }\n        return newUsers\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/user.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to connect to Users table and perform business operations\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createMany\n                            \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, userRepository: Repository, configService: ConfigService, profilConfiguration: ConfigType<>, usersCreateManyProvider: UserCreateManyProvider)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/user.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        profilConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersCreateManyProvider\n                                                  \n                                                        \n                                                                        UserCreateManyProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMany(createManyUsersDto: CreateManyUsersDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user.service.ts:113\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createManyUsersDto\n                                            \n                                                            CreateManyUsersDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user.service.ts:83\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUserParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user.service.ts:30\n                        \n                    \n\n\n            \n                \n                        The method to get all the users from the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user.service.ts:62\n                        \n                    \n\n\n            \n                \n                        Find a single user using the ID of user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, forwardRef, HttpException, HttpStatus, Inject, Injectable, RequestTimeoutException } from \"@nestjs/common\";\nimport { GetUsersParamDto } from \"../dtos/get-users-param.dto\";\nimport { AuthService } from \"src/auth/service/auth.service\";\nimport { DataSource, Repository } from \"typeorm\";\nimport { User } from \"../user.entity\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { CreateUserDto } from \"../dtos/create-user.dto\";\nimport { ConfigService, ConfigType } from \"@nestjs/config\";\nimport profileConfig from \"../config/profile.config\";\nimport { UserCreateManyProvider } from \"./user-create-many.provider\";\nimport { CreateManyUsersDTO } from \"../dtos/create-many-user.dto\";\n\n/**\n * Class to connect to Users table and perform business operations\n */\n@Injectable()\nexport class UserService {\n\n    constructor(\n        @Inject(forwardRef(() => AuthService)) private readonly authService: AuthService,\n        @InjectRepository(User) private userRepository: Repository,\n        private readonly configService: ConfigService,\n        @Inject(profileConfig.KEY) private readonly profilConfiguration: ConfigType,\n        private readonly usersCreateManyProvider: UserCreateManyProvider,\n    ) { }\n\n    /**\n     * The method to get all the users from the database\n     */\n    public findAll(getUserParamDto: GetUsersParamDto, limit: number, page: number) {\n        /* const isAUth = this.authService.isAUth();\n         console.log(isAUth)\n \n         const environment = this.configService.get(\"S3_BUCKET\")\n         console.log(environment)\n         console.log(this.profilConfiguration)\n         console.log(this.profilConfiguration.apiKey)\n         return [\n             {\n                 firstName: 'John',\n                 email: 'john@doe.com'\n             },\n             {\n                 firstName: 'Alice',\n                 email: 'alice@doe.com'\n             }\n         ]*/\n\n        throw new HttpException({\n            status: HttpStatus.MOVED_PERMANENTLY,\n            error: 'The API endpoint does not exist',\n            fileName: 'user.service.ts',\n            lineNumber: 14,\n        }, HttpStatus.MOVED_PERMANENTLY, {\n            description: 'Occured because the API endpoint was permanently moved'\n        })\n    }\n    /**\n     * Find a single user using the ID of user\n     */\n\n    public async findOneById(id: number) {\n        let user = undefined;\n\n        try {\n            user = await this.userRepository.findOneBy({\n                id: id,\n            })\n        } catch (err) {\n            throw new RequestTimeoutException('Unable to process your request at the moment please try later', {\n                description: 'Error connectiong to the database'\n            })\n        }\n\n        if (!user) {\n            throw new BadRequestException('The user id does not exist')\n        }\n        return await this.userRepository.findOneBy({\n            id: id,\n        })\n    }\n\n    public async createUser(createUserDto: CreateUserDto) {\n        let existingUser = undefined;\n        try {\n            existingUser = await this.userRepository.findOne({\n                where: {\n                    email: createUserDto.email\n                }\n            })\n\n        } catch (error) {\n            throw new RequestTimeoutException('Unable to process your request at the moment please try later', {\n                description: 'Error connectiong to the database'\n            })\n        }\n\n        if (existingUser) {\n            throw new BadRequestException('The user already exists, please check your email.')\n        }\n        let newUser = this.userRepository.create(createUserDto);\n\n        try {\n            newUser = await this.userRepository.save(newUser)\n        } catch (err) {\n            throw new RequestTimeoutException('Unable to process your request at the moment please try later', {\n                description: 'Error connecting to the database'\n            })\n        }\n        return newUser\n    }\n\n    public async createMany(createManyUsersDto: CreateManyUsersDTO) {\n        return await this.usersCreateManyProvider.createMany(createManyUsersDto)\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createManyUsers\n                            \n                            \n                                    \n                                    Public\n                                createUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createManyUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createManyUsers(createManyUsersDTO: CreateManyUsersDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create-many')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createManyUsersDTO\n                                            \n                                                            CreateManyUsersDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDTO: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDTO\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUsersParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/:optional?')@ApiOperation({summary: 'Fetches a list of registered users on the application'})@ApiResponse({status: 200, description: 'Users fetched successfully based on the query'})@ApiQuery({name: 'limit', type: 'number', required: false, description: 'the number of entries returned per query', example: 10})@ApiQuery({name: 'page', type: 'number', required: false, description: 'the position of the page number that you want the API to return ', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUsersParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, DefaultValuePipe, Get, Header, Headers, Ip, Param, ParseIntPipe, Patch, Post, Query, ValidationPipe } from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UserService } from './providers/user.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreateManyUsersDTO } from './dtos/create-many-user.dto';\n\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController {\n\n    constructor(private readonly userService: UserService) { }\n    @Get('/:id/:optional?')\n    @ApiOperation({\n        summary: \"Fetches a list of registered users on the application\",\n    })\n    @ApiResponse({\n        status: 200,\n        description: \"Users fetched successfully based on the query\"\n    })\n    @ApiQuery({\n        name: 'limit',\n        type: \"number\",\n        required: false,\n        description: \"the number of entries returned per query\",\n        example: 10\n    })\n    @ApiQuery({\n        name: 'page',\n        type: \"number\",\n        required: false,\n        description: \"the position of the page number that you want the API to return \",\n        example: 1\n    })\n    public getUsers(/*@Param('id', ParseIntPipe) id: number | undefined*/ @Param() getUsersParamDto: GetUsersParamDto,\n        @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n        @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number\n    ) {\n        return this.userService.findAll(getUsersParamDto, limit, page)\n    }\n\n    @Post()\n    public createUsers(@Body() createUserDTO: CreateUserDto,\n    ) {\n        return this.userService.createUser(createUserDTO);\n    }\n\n    @Post('create-many')\n    public createManyUsers(@Body() createManyUsersDTO: CreateManyUsersDTO\n    ) {\n        return this.userService.createMany(createManyUsersDTO);\n    }\n\n    @Patch()\n    public patchUser(@Body() patchUserDto: PatchUserDto) {\n        return patchUserDto\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUsersModule\n\nUsersModule\n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nUserCreateManyProvider\n\nUserCreateManyProvider\n\nUsersModule -->\n\nUserCreateManyProvider->UsersModule\n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserCreateManyProvider\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UserService } from './providers/user.service';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './user.entity';\nimport { ConfigModule } from '@nestjs/config';\nimport { UserCreateManyProvider } from './providers/user-create-many.provider';\nimport profileConfig from './config/profile.config';\n\n@Module({\n    controllers: [UsersController],\n    providers: [UserService, UserCreateManyProvider],\n    exports: [UserService],\n    imports: [forwardRef(() => AuthModule), TypeOrmModule.forFeature([User]), ConfigModule.forFeature(profileConfig)]\n})\nexport class UsersModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.module.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/service/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/pagination/dtos/pagination-query.dto.ts\n            \n            class\n            PaginationQueryDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/pagination/interfaces/paginated.interface.ts\n            \n            interface\n            Paginated\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/pagination/providers/pagination.provider.ts\n            \n            injectable\n            PaginationProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/dtos/create-post-meta-option.dtos.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/meta-option.entity.ts\n            \n            entity\n            MetaOption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/meta-options.controller.ts\n            \n            controller\n            MetaOptionsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/providers/meta-options.service.ts\n            \n            injectable\n            MetaOptionsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/post/dtos/create-post.dtos.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/post/dtos/get-posts.dto.ts\n            \n            class\n            GetPostBaseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/post/dtos/get-posts.dto.ts\n            \n            class\n            GetPostDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/post/dtos/patch-post-dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/post/post.controller.ts\n            \n            controller\n            PostController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/post/post.entity.ts\n            \n            entity\n            Post\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/post/services/post.service.ts\n            \n            injectable\n            PostService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/dtos/create-tag.dto.ts\n            \n            class\n            CreateTagDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/providers/tags.service.ts\n            \n            injectable\n            TagsService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/tag.entity.ts\n            \n            entity\n            Tag\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tags/tags.controller.ts\n            \n            controller\n            TagsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/dtos/create-many-user.dto.ts\n            \n            class\n            CreateManyUsersDTO\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/providers/user-create-many.provider.ts\n            \n            injectable\n            UserCreateManyProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/user.service.ts\n            \n            injectable\n            UserService\n            \n                50 %\n                (3/6)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.23\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.2\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.3.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            joi : ^17.12.2\n        \n            pg : ^8.11.5\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            postStatus   (src/.../status.enum.ts)\n                        \n                        \n                            postType   (src/.../postType.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/post/enums/status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : DRAFT\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : SCHEDULED\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : REVIEW\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : PUBLISHED\n                            \n                        \n            \n        \n\n    src/post/enums/postType.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : POST\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : PAGE\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : STORY\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : SERIES\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MetaOptionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaginationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_exports\n\n\n\ncluster_PaginationModule_providers\n\n\n\ncluster_PostModule\n\n\n\ncluster_PostModule_providers\n\n\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\n\n\nPostModule\n\nPostModule\n\nPostModule -->\n\nPaginationModule->PostModule\n\n\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nPaginationProvider \n\nPaginationProvider \n\nPaginationProvider  -->\n\nPaginationModule->PaginationProvider \n\n\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostModule -->\n\nTagsModule->PostModule\n\n\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nTagsService \n\nTagsService \n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostModule -->\n\nUsersModule->PostModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nPaginationModule -->\n\nPaginationProvider->PaginationModule\n\n\n\n\n\nPostService\n\nPostService\n\nPostModule -->\n\nPostService->PostModule\n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\nUserCreateManyProvider\n\nUserCreateManyProvider\n\nUsersModule -->\n\nUserCreateManyProvider->UsersModule\n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    8 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    11 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ENV   (src/.../app.module.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
