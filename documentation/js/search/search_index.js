var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.062,1,2.19]],["body/controllers/AppController.html",[0,1.772,1,3.654,2,1.451,3,0.355,4,0.308,5,0.308,6,3.815,7,0.434,8,0.028,9,0.935,10,3.265,11,3.815,12,0.355,13,0.018,14,2.275,15,1.676,16,3.815,17,1.451,18,1.676,19,4.531,20,0.023,21,0.023]],["title/modules/AppModule.html",[22,1.062,23,2.19]],["body/modules/AppModule.html",[1,3.123,2,1.298,3,0.222,4,0.193,5,0.193,7,0.495,8,0.028,9,0.585,10,3.104,11,2.386,12,0.222,13,0.011,20,0.017,21,0.017,22,1.515,23,4.331,24,1.216,25,1.216,26,1.423,27,1.423,28,1.216,29,2.375,30,1.423,31,2.386,32,2.386,33,2.386,34,3.104,35,3.398,36,3.398,37,3.327,38,2.853,39,2.035,40,1.423,41,1.313,42,2.834,43,2.214,44,2.834,45,2.834,46,2.834,47,1.423,48,2.834,49,2.834,50,1.695,51,1.128,52,1.613,53,2.834,54,2.834,55,1.313,56,1.313,57,2.834,58,1.313,59,2.834,60,2.834,61,2.834,62,0.499,63,2.834,64,1.548,65,2.834,66,2.035,67,2.834,68,2.834,69,2.834,70,2.834,71,2.834,72,1.871,73,2.834,74,2.834,75,2.834,76,2.386,77,2.834]],["title/injectables/AppService.html",[10,1.813,78,1.062]],["body/injectables/AppService.html",[3,0.353,4,0.307,5,0.307,7,0.353,8,0.027,9,0.931,10,3.016,12,0.353,13,0.018,16,5.233,17,1.768,18,1.669,20,0.023,21,0.023,78,1.768,79,2.265,80,3.799,81,0.671,82,2.197,83,0.862,84,4.512,85,1.796,86,4.512,87,4.512,88,3.799]],["title/controllers/AuthController.html",[0,1.062,89,2.19]],["body/controllers/AuthController.html",[0,1.501,2,1.501,3,0.367,4,0.319,5,0.319,7,0.443,8,0.027,9,0.968,12,0.367,13,0.019,14,2.354,15,1.734,20,0.023,21,0.023,89,3.73,90,3.947,91,2.803,92,4.688,93,2.354,94,3.947,95,4.688,96,4.688]],["title/modules/AuthModule.html",[22,1.062,34,1.813]],["body/modules/AuthModule.html",[2,1.597,3,0.301,4,0.261,5,0.261,7,0.459,8,0.028,9,0.793,12,0.301,13,0.015,20,0.02,21,0.02,22,1.773,24,1.647,25,1.647,26,1.928,27,1.928,28,1.647,29,2.78,30,2.78,34,3.463,38,2.504,39,2.504,40,1.928,41,1.779,43,2.098,89,3.656,93,3.333,94,3.233,97,3.233,98,3.233,99,3.233,100,3.84,101,3.292,102,3.84,103,3.233]],["title/injectables/AuthService.html",[78,1.062,93,1.666]],["body/injectables/AuthService.html",[3,0.283,4,0.246,5,0.246,7,0.375,8,0.028,9,0.745,12,0.283,13,0.014,15,1.335,17,2,18,1.771,20,0.02,21,0.02,52,1.436,62,0.844,66,1.812,72,3.547,78,1.533,79,1.812,81,0.537,82,1.905,83,1.026,85,1.905,93,2.404,101,2.383,104,3.039,105,2.305,106,4.818,107,4.788,108,2.158,109,3.039,110,2.894,111,3.609,112,2.054,113,1.771,114,1.328,115,3.609,116,3.609,117,4.788,118,3.609,119,2.383,120,3.039,121,3.039,122,3.039,123,2.158,124,2.663,125,3.609,126,3.609]],["title/classes/CreatePostDto.html",[13,0.013,127,1.813]],["body/classes/CreatePostDto.html",[3,0.123,4,0.107,5,0.107,7,0.35,8,0.028,12,0.123,13,0.013,17,1.723,20,0.011,21,0.011,55,1.19,62,1.056,66,1.894,81,0.233,83,1.027,114,1.524,127,1.403,128,0.726,129,4.623,130,1.319,131,1.122,132,3.262,133,3.977,134,2.154,135,2.407,136,3.638,137,2.747,138,2.154,139,2.749,140,2.154,141,2.49,142,3.977,143,1.208,144,1.604,145,1.567,146,2.568,147,3.177,148,3.613,149,2.747,150,1.567,151,1.567,152,1.341,153,1.567,154,1.567,155,2.568,156,2.568,157,3.638,158,2.568,159,1.567,160,1.894,161,2.162,162,1.567,163,4.164,164,1.403,165,2.568,166,1.567,167,1.567,168,1.567,169,1.567,170,2.224,171,3.177,172,3.773,173,2.568,174,1.567,175,2.49,176,1.567,177,3.177,178,2.568,179,2.568,180,2.568,181,1.567,182,1.567,183,2.568,184,3.177,185,2.568,186,2.568,187,2.568,188,2.568,189,1.567,190,1.567,191,1.567,192,1.319,193,2.747,194,1.319,195,3.177,196,3.177,197,1.895,198,2.162,199,2.162,200,2.162,201,2.162,202,2.162,203,1.319,204,1.567,205,3.072,206,1.567,207,2.162,208,2.568,209,1.567,210,1.567,211,1.567,212,2.568,213,2.568,214,1.156,215,1.567,216,1.567,217,1.567,218,1.567,219,2.568,220,1.567,221,2.407,222,2.568,223,1.895,224,2.675,225,3.254,226,2.49,227,2.162,228,1.156,229,1.156,230,1.156,231,2.568,232,0.787,233,1.319,234,1.319,235,1.034,236,1.034,237,1.156,238,3.3,239,3.485,240,0.787,241,1.567,242,1.567,243,1.567,244,2.162,245,1.319,246,1.319,247,1.567,248,1.567,249,1.567,250,1.567,251,1.319,252,2.568,253,1.567,254,1.895,255,1.567]],["title/classes/CreatePostMetaOptionsDto.html",[13,0.013,160,1.666]],["body/classes/CreatePostMetaOptionsDto.html",[3,0.342,4,0.297,5,0.297,7,0.342,8,0.027,12,0.342,13,0.022,17,1.732,20,0.022,21,0.022,55,2.507,62,0.769,81,0.649,83,0.834,128,2.023,131,1.861,144,1.302,152,1.298,160,2.716,223,3.992,224,3.236,226,2.882,232,2.192,235,3.571,254,4.338,256,2.321,257,3.676,258,4.366,259,4.366]],["title/classes/CreateTagDto.html",[13,0.013,260,1.984]],["body/classes/CreateTagDto.html",[3,0.227,4,0.197,5,0.197,7,0.323,8,0.028,12,0.227,13,0.016,17,1.989,20,0.017,21,0.017,62,0.971,81,0.432,83,1.053,113,1.773,114,1.589,128,1.345,131,1.418,134,3.165,138,3.165,139,3.639,144,1.643,148,3.425,152,0.696,157,3.042,170,2.077,192,2.444,193,4.036,194,2.444,195,4.394,196,4.394,197,3.042,198,3.471,199,3.471,200,3.471,201,3.471,202,3.471,203,2.444,223,3.042,224,2.867,225,3.445,226,3.445,227,3.471,228,2.142,229,2.142,230,2.142,232,1.457,238,3.537,239,3.851,240,1.457,245,2.444,246,3.471,251,2.444,260,2.465,261,4.822,262,2.444,263,2.903,264,2.903,265,2.903,266,2.903,267,2.903,268,2.903,269,2.903,270,2.903,271,2.903,272,2.444]],["title/classes/CreateUserDto.html",[13,0.013,273,1.813]],["body/classes/CreateUserDto.html",[3,0.246,4,0.213,5,0.213,7,0.246,8,0.027,12,0.246,13,0.017,17,1.966,20,0.018,21,0.018,62,0.952,72,3.746,81,0.467,83,1.031,114,1.208,119,3.301,128,1.454,131,1.498,143,1.394,144,1.61,197,3.213,224,3.23,225,2.875,226,3.746,228,2.316,229,2.316,230,2.316,232,1.576,272,3.667,273,2.379,274,4.777,275,2.316,276,3.69,277,4.21,278,3.138,279,3.138,280,3.138,281,3.138,282,3.138,283,3.138,284,3.138,285,5.402,286,4.355,287,4.355,288,4.355,289,4.355,290,4.355,291,4.355,292,6.139,293,4.355,294,5.402,295,4.355,296,4.355,297,4.355,298,3.138,299,4.355,300,5.001,301,3.138,302,3.138]],["title/classes/GetUsersParamDto.html",[13,0.013,303,1.984]],["body/classes/GetUsersParamDto.html",[3,0.31,4,0.269,5,0.269,7,0.44,8,0.028,12,0.31,13,0.022,20,0.021,21,0.021,52,2.022,62,0.989,81,0.588,83,0.755,114,1.41,128,1.831,131,1.748,143,1.798,144,1.178,148,3.038,170,1.573,221,3.749,225,3.354,232,1.984,237,2.916,239,3.749,240,1.984,303,3.038,304,4.277,305,3.354,306,3.327,307,2.267,308,3.952,309,5.08,310,5.08,311,3.952,312,3.952,313,3.952]],["title/entities/MetaOption.html",[314,1.423,315,1.537]],["body/entities/MetaOption.html",[3,0.253,4,0.22,5,0.22,7,0.348,8,0.028,12,0.253,13,0.013,17,1.423,20,0.018,21,0.018,56,2.745,62,1.044,64,1.766,81,0.481,83,1.095,131,1.529,143,1.423,144,1.709,152,1.505,164,2.428,175,3.611,184,3.742,254,3.748,256,2.542,307,1.878,314,1.906,315,2.059,316,2.721,317,4.276,318,4.276,319,4.276,320,3.232,321,3.353,322,3.232,323,2.134,324,2.934,325,3.232,326,2.721,327,3.742,328,4.444,329,3.232,330,3.232,331,4.276,332,3.232,333,2.721,334,2.934,335,3.742,336,3.742,337,1.386,338,2.721]],["title/controllers/MetaOptionsController.html",[0,1.062,339,2.19]],["body/controllers/MetaOptionsController.html",[0,1.225,2,1.225,3,0.3,4,0.26,5,0.26,7,0.433,8,0.028,9,0.79,12,0.3,13,0.015,14,1.921,15,1.415,18,1.415,20,0.02,21,0.02,55,2.305,56,2.305,62,0.674,81,0.569,82,1.98,83,0.731,85,1.523,91,2.288,105,2.371,112,1.641,113,1.415,114,1.062,144,1.141,152,1.404,160,2.939,236,2.526,256,2.134,339,3.284,340,3.222,341,4.975,342,2.975,343,3.826,344,3.826,345,4.975,346,2.526,347,1.773,348,2.718,349,3.222,350,3.222,351,3.826,352,3.826,353,3.222,354,3.826]],["title/modules/MetaOptionsModule.html",[22,1.062,35,1.984]],["body/modules/MetaOptionsModule.html",[2,1.612,3,0.305,4,0.265,5,0.265,7,0.478,8,0.028,9,0.804,12,0.305,13,0.016,20,0.021,21,0.021,22,1.785,24,1.671,25,1.671,26,1.956,27,1.956,28,1.671,29,2.8,30,1.956,35,3.738,39,2.527,40,1.956,41,1.805,43,2.128,50,2.329,51,1.55,55,2.332,56,1.805,256,1.671,315,1.805,339,3.681,348,3.415,349,3.279,350,3.279,355,3.279,356,3.279,357,3.895,358,3.895,359,2.329,360,3.895]],["title/injectables/MetaOptionsService.html",[78,1.062,348,1.813]],["body/injectables/MetaOptionsService.html",[3,0.278,4,0.241,5,0.241,7,0.464,8,0.028,9,0.733,12,0.278,13,0.014,15,1.313,18,1.313,20,0.019,21,0.019,51,1.413,55,2.194,62,0.835,78,1.516,79,1.782,81,0.528,82,1.885,83,0.904,85,1.413,105,2.286,108,2.123,112,2.031,113,1.751,114,1.314,123,2.123,152,0.852,160,2.973,236,2.343,256,2.286,315,2.194,337,1.523,342,2.832,347,1.645,348,2.587,359,2.123,361,4.487,362,2.989,363,3.518,364,3.55,365,3.4,366,3.55,367,3.987,368,4.736,369,3.55,370,2.343,371,2.343,372,3.55,373,3.55,374,2.343,375,3.55]],["title/classes/PatchPostDto.html",[13,0.013,376,1.984]],["body/classes/PatchPostDto.html",[3,0.314,4,0.273,5,0.273,7,0.443,8,0.028,12,0.314,13,0.02,20,0.021,21,0.021,62,0.707,81,0.596,83,0.766,127,2.191,128,1.858,131,1.764,143,1.642,144,1.195,152,1.43,170,1.596,221,3.784,224,3.067,232,2.013,238,3.784,240,2.013,307,2.277,342,2.398,376,3.067,377,4.318,378,3.377,379,4.318,380,5.129,381,4.011,382,5.129,383,4.011,384,4.011,385,3.377,386,2.959,387,3.377]],["title/classes/PatchUserDto.html",[13,0.013,388,2.19]],["body/classes/PatchUserDto.html",[3,0.366,4,0.318,5,0.318,7,0.441,8,0.027,12,0.366,13,0.019,20,0.023,21,0.023,128,2.163,273,2.55,275,3.444,342,2.791,379,4.745,385,3.93,388,3.72,389,3.93,390,5.636,391,3.93,392,3.93,393,3.444]],["title/entities/Post.html",[152,0.796,314,1.423]],["body/entities/Post.html",[3,0.149,4,0.129,5,0.129,7,0.4,8,0.028,12,0.149,13,0.008,17,1.787,20,0.012,21,0.012,52,1.943,55,1.391,56,0.882,62,1.102,64,1.039,66,3.019,81,0.283,83,1.106,114,1.606,131,1.033,133,3.131,134,2.454,135,3.39,136,3.909,137,3.131,138,2.454,139,2.454,140,2.454,141,2.224,142,3.131,143,0.961,144,1.726,152,0.892,160,0.955,164,2.894,175,1.982,205,3.39,214,2.215,233,1.602,234,1.602,235,1.256,236,1.256,244,4.461,256,0.816,307,1.375,314,1.288,315,1.956,321,2.454,323,3.497,324,3.926,326,1.602,334,3.599,335,2.528,336,2.528,337,0.816,338,2.528,359,1.138,394,1.602,395,2.454,396,1.903,397,3.002,398,4.883,399,1.903,400,3.554,401,1.903,402,3.603,403,3.603,404,2.528,405,1.903,406,1.903,407,3.002,408,1.903,409,4.222,410,1.903,411,3.002,412,1.903,413,1.903,414,2.528,415,2.215,416,1.903,417,1.903,418,2.306,419,1.903,420,1.903,421,1.903,422,3.002,423,1.903,424,3.002,425,3.002,426,3.002,427,1.903,428,1.903,429,1.903,430,1.903]],["title/controllers/PostController.html",[0,1.062,431,2.19]],["body/controllers/PostController.html",[0,0.791,2,0.791,3,0.194,4,0.168,5,0.168,7,0.405,8,0.028,9,0.51,12,0.194,13,0.01,14,1.241,15,0.914,17,1.401,18,1.618,20,0.015,21,0.015,47,2.196,62,0.853,81,0.368,82,1.46,83,0.924,85,1.926,91,1.478,105,2.637,112,2.076,113,1.79,114,1.343,127,2.959,140,2.422,143,1.401,144,1.443,152,1.436,157,3.571,170,1.926,240,1.241,307,1.357,346,1.632,347,1.145,376,3.239,386,1.824,387,3.089,431,2.422,432,2.081,433,3.089,434,3.668,435,3.668,436,3.668,437,2.081,438,3.668,439,3.668,440,2.707,441,3.668,442,4.84,443,4.84,444,3.668,445,2.472,446,2.472,447,2.472,448,3.683,449,2.472,450,2.472,451,3.668,452,2.472,453,3.089,454,2.472,455,3.089,456,3.668,457,4.075,458,2.472,459,2.472,460,2.472,461,2.081,462,3.089,463,3.089,464,2.081,465,2.081,466,3.683,467,3.683,468,2.081,469,1.824,470,2.081,471,2.472,472,2.472,473,2.472,474,2.472,475,3.089,476,3.089,477,2.472,478,2.472,479,2.472,480,2.472,481,2.472,482,2.472]],["title/modules/PostModule.html",[22,1.062,36,1.984]],["body/modules/PostModule.html",[2,1.503,3,0.275,4,0.238,5,0.238,7,0.494,8,0.028,9,0.723,12,0.275,13,0.014,20,0.019,21,0.019,22,1.695,24,1.503,25,1.503,26,1.759,27,1.759,28,1.503,29,2.658,30,1.759,36,3.855,37,3.316,38,3.047,39,2.357,40,1.759,41,1.624,43,2.565,47,3.047,50,2.096,51,1.394,56,1.624,103,2.95,152,0.841,256,1.503,315,2.175,359,2.096,431,3.495,465,2.95,483,2.95,484,3.504,485,2.95,486,3.504,487,3.504,488,2.95,489,3.504,490,3.504]],["title/injectables/PostService.html",[47,1.666,78,1.062]],["body/injectables/PostService.html",[3,0.157,4,0.136,5,0.136,7,0.434,8,0.028,9,0.414,12,0.157,13,0.008,14,1.007,15,1.607,17,1.231,18,1.422,20,0.013,21,0.013,47,1.57,51,0.798,52,0.798,56,0.929,58,2.416,62,0.83,66,2.365,78,1.002,79,1.007,81,0.298,82,1.245,83,0.9,85,1.729,105,2.516,108,1.199,109,1.688,110,2.313,112,2.021,113,1.742,114,1.307,121,1.688,123,2.3,124,1.479,127,2.727,135,3.476,141,2.598,143,1.231,152,1.251,161,1.688,256,0.86,307,1.846,315,0.929,327,1.688,337,0.86,347,0.929,359,1.199,363,3.872,365,3.118,367,3.238,370,2.539,371,1.323,374,3.872,376,2.817,386,1.479,395,2.868,433,2.633,437,2.633,448,2.633,453,1.688,469,1.479,470,1.688,488,1.688,491,1.688,492,2.633,493,3.128,494,3.846,495,2.005,496,2.005,497,3.128,498,2.005,499,3.128,500,2.005,501,3.128,502,2.005,503,2.005,504,2.005,505,2.005,506,2.005,507,2.633,508,2.005,509,3.128,510,2.005,511,2.005,512,2.005,513,2.005,514,2.005,515,2.005,516,2.005,517,3.128,518,2.005,519,2.005,520,2.005,521,2.005,522,2.005,523,2.005,524,2.005,525,2.005,526,2.005,527,3.128,528,2.005,529,3.128,530,2.005,531,3.128,532,2.005,533,3.128,534,2.005]],["title/entities/Tag.html",[314,1.423,418,1.813]],["body/entities/Tag.html",[3,0.207,4,0.18,5,0.18,7,0.207,8,0.028,12,0.207,13,0.011,17,1.947,20,0.016,21,0.016,62,1.118,64,1.443,66,3.053,81,0.393,83,1.143,113,1.681,114,1.386,131,1.325,134,3.001,138,3.001,139,3.001,143,1.233,144,1.784,164,2.73,170,1.809,175,3.661,307,1.681,314,1.652,317,3.827,318,3.827,319,3.827,321,3.001,323,3.507,324,4.014,331,3.827,334,3.661,337,1.133,400,4.207,402,4.092,403,4.092,404,3.243,414,4.207,415,3.687,418,2.104,535,2.223,536,4.546,537,2.641,538,4.546,539,2.641,540,2.641,541,2.641,542,2.641,543,2.641,544,2.641,545,2.641,546,2.641]],["title/controllers/TagsController.html",[0,1.062,547,2.19]],["body/controllers/TagsController.html",[0,1.265,2,1.265,3,0.31,4,0.269,5,0.269,7,0.44,8,0.028,9,0.816,12,0.31,13,0.016,14,1.984,15,1.461,18,1.461,20,0.021,21,0.021,58,2.601,62,0.696,81,0.588,82,2.022,83,0.755,85,1.573,91,2.363,105,2.408,112,1.695,113,1.461,114,1.096,141,2.363,144,1.178,152,1.347,260,3.752,342,3.038,346,2.609,347,1.831,353,3.327,547,3.354,548,3.327,549,3.952,550,3.952,551,3.327,552,3.327,553,3.952,554,3.952]],["title/modules/TagsModule.html",[22,1.062,37,1.813]],["body/modules/TagsModule.html",[2,1.589,3,0.299,4,0.259,5,0.259,7,0.475,8,0.028,9,0.787,12,0.299,13,0.015,20,0.02,21,0.02,22,1.767,24,1.635,25,1.635,26,1.914,27,1.914,28,1.635,29,2.771,30,2.771,37,3.457,39,2.492,40,1.914,41,1.767,43,2.083,50,2.28,51,1.517,58,3.073,418,2.083,547,3.643,552,3.21,555,3.21,556,3.21,557,3.21,558,3.813,559,3.813,560,3.21,561,3.813]],["title/injectables/TagsService.html",[58,1.537,78,1.062]],["body/injectables/TagsService.html",[3,0.255,4,0.221,5,0.221,7,0.45,8,0.028,9,0.671,12,0.255,13,0.013,15,1.202,18,1.65,20,0.018,21,0.018,51,1.294,58,2.068,62,0.898,78,1.429,79,1.632,81,0.483,82,1.776,83,0.973,85,1.776,105,2.546,108,1.944,112,2.185,113,1.884,114,1.414,123,1.944,141,1.944,143,1.631,260,3.437,307,1.202,337,1.395,347,1.507,363,3.919,365,3.279,370,2.946,371,2.146,374,2.946,418,2.438,551,2.738,560,2.738,562,2.738,563,4.462,564,4.462,565,3.252,566,3.252,567,4.462,568,4.462,569,3.252,570,4.462,571,3.252,572,3.252,573,3.252,574,3.252,575,4.462,576,3.252,577,3.252]],["title/entities/User.html",[52,1.32,314,1.423]],["body/entities/User.html",[3,0.228,4,0.198,5,0.198,7,0.324,8,0.028,12,0.228,13,0.012,17,1.929,20,0.017,21,0.017,52,1.644,62,1.095,64,1.59,66,2.623,72,3.169,81,0.433,83,1.095,119,3.169,131,1.421,143,1.323,144,1.709,152,1.375,164,3.132,276,3.543,277,4.042,307,1.775,314,1.772,321,3.169,323,3.449,324,3.976,333,2.451,334,3.642,337,1.248,402,4.445,403,4.445,415,3.048,507,4.042,578,2.451,579,6.024,580,2.911,581,2.911,582,2.911,583,2.911,584,2.911,585,2.911,586,4.13,587,2.911,588,4.13]],["title/injectables/UserService.html",[78,1.062,110,1.537]],["body/injectables/UserService.html",[3,0.184,4,0.159,5,0.159,7,0.432,8,0.028,9,0.484,12,0.184,13,0.017,15,0.867,18,1.567,20,0.014,21,0.014,51,0.933,52,2.011,62,0.831,76,2.968,78,1.129,79,1.177,81,0.348,82,1.403,83,0.9,85,1.686,93,2.766,101,1.547,105,2.488,106,1.973,108,1.401,110,1.633,112,2.022,113,1.743,114,1.308,119,2.797,120,1.973,122,1.973,123,2.108,124,2.601,143,1.857,170,0.933,273,2.761,276,2.601,303,2.819,305,3.336,307,1.869,337,1.005,347,1.086,363,3.505,365,2.819,370,2.327,371,1.547,374,2.797,393,1.729,492,2.968,589,1.973,590,3.525,591,2.968,592,3.525,593,3.525,594,3.525,595,3.525,596,3.525,597,2.343,598,4.237,599,2.343,600,3.525,601,2.343,602,3.525,603,3.568,604,3.127,605,2.343,606,3.525,607,2.343,608,3.525,609,2.343,610,3.525,611,3.525,612,2.968,613,1.973,614,1.973,615,2.343,616,1.973,617,2.343,618,2.343,619,2.343,620,2.343,621,2.343,622,2.343,623,2.343,624,2.343,625,2.343,626,2.343,627,2.343,628,4.237,629,2.343,630,2.343]],["title/controllers/UsersController.html",[0,1.062,631,2.19]],["body/controllers/UsersController.html",[0,0.713,2,0.713,3,0.175,4,0.152,5,0.152,7,0.408,8,0.028,9,0.46,12,0.175,13,0.009,14,1.118,15,0.824,18,1.828,20,0.014,21,0.014,62,0.954,81,0.331,82,1.35,83,0.785,85,1.635,91,1.332,105,2.453,110,1.904,112,1.762,113,1.828,114,1.14,140,1.47,143,1.986,144,1.225,147,3.867,148,2.747,149,2.856,152,0.986,164,2.51,170,2.073,214,1.644,240,1.118,273,2.845,303,3.114,305,3.438,307,0.824,346,1.47,347,1.032,388,3.684,393,2.503,440,2.503,457,2.856,461,2.856,462,3.867,463,3.459,464,3.867,466,2.856,467,2.856,468,1.876,469,1.644,475,1.876,476,2.856,603,4.385,604,4.118,613,1.876,614,1.876,631,2.239,632,1.876,633,3.393,634,3.393,635,3.393,636,2.228,637,2.228,638,2.228,639,2.228,640,3.393,641,3.393,642,3.393,643,2.228,644,3.393,645,2.856,646,2.228,647,3.393,648,3.393,649,3.393,650,2.228,651,3.393,652,3.393,653,3.393,654,2.228,655,2.228,656,2.228,657,2.228,658,2.228,659,2.228,660,2.228,661,2.228,662,1.876,663,4.109,664,2.228,665,2.228,666,2.228,667,1.876,668,2.228,669,2.228,670,2.228,671,2.228,672,2.228,673,2.228,674,2.228,675,2.228,676,2.228,677,2.228]],["title/modules/UsersModule.html",[22,1.062,38,1.666]],["body/modules/UsersModule.html",[2,1.557,3,0.29,4,0.251,5,0.251,7,0.483,8,0.028,9,0.763,12,0.29,13,0.015,20,0.02,21,0.02,22,1.741,24,1.585,25,1.585,26,1.855,27,1.855,28,1.585,29,2.729,30,2.729,34,2.657,38,3.154,39,2.442,40,1.855,41,1.712,43,2.019,50,2.21,51,1.471,52,1.471,101,3.21,110,3.059,616,3.112,631,3.588,662,3.112,678,3.112,679,3.112,680,3.112,681,3.696,682,3.696,683,3.696,684,3.696]],["title/coverage.html",[685,3.339]],["body/coverage.html",[0,1.831,1,1.906,5,0.196,6,2.431,8,0.028,10,1.577,13,0.023,20,0.017,21,0.017,28,1.238,47,1.45,52,1.149,55,1.338,56,1.903,58,1.338,62,0.509,78,1.831,80,2.431,89,1.906,90,2.431,93,1.45,104,2.431,110,1.338,127,1.577,129,2.431,130,2.431,152,1.147,160,1.45,235,1.906,256,2.233,257,2.431,260,1.727,261,2.431,262,2.431,273,1.577,274,2.431,275,3.03,303,1.727,304,2.431,305,1.906,306,2.431,314,2.233,315,1.338,316,2.431,339,1.906,340,2.431,348,1.577,361,2.431,362,2.431,376,1.727,377,2.431,378,2.431,388,1.906,389,2.431,394,2.431,418,1.577,431,1.906,432,2.431,440,2.13,491,2.431,535,2.431,547,1.906,548,2.431,562,2.431,578,2.431,589,2.431,591,2.431,631,1.906,632,2.431,685,2.13,686,2.431,687,2.887,688,2.887,689,6.685,690,6.011,691,5.717,692,4.78,693,2.431,694,2.887,695,2.887,696,2.887,697,4.107,698,4.107,699,2.887,700,2.887,701,2.887]],["title/dependencies.html",[25,1.711,702,2.334]],["body/dependencies.html",[8,0.028,9,0.898,13,0.022,20,0.022,21,0.022,25,1.865,51,1.731,232,2.183,237,3.209,240,2.183,337,1.865,391,3.662,392,3.662,703,4.349,704,4.349,705,5.868,706,4.349,707,4.349,708,4.349,709,4.349,710,4.349,711,4.349,712,4.349,713,4.349,714,4.349,715,4.349,716,4.349,717,4.349,718,4.349,719,4.349,720,4.349,721,4.349]],["title/miscellaneous/enumerations.html",[722,1.83,723,3.359]],["body/miscellaneous/enumerations.html",[8,0.027,20,0.022,21,0.022,81,0.652,136,4.002,152,1.301,177,4.567,205,4.002,207,4.567,604,4.002,722,2.894,723,3.691,724,4.384,725,4.384,726,4.384,727,6.598,728,5.424,729,5.424,730,4.384,731,5.424,732,5.424]],["title/miscellaneous/functions.html",[722,1.83,733,3.359]],["body/miscellaneous/functions.html",[8,0.024,20,0.024,21,0.024,28,2.697,81,0.76,693,4.301,722,3.372,733,4.301,734,5.108]],["title/index.html",[81,0.412,735,2.773,736,2.773]],["body/index.html",[4,0.166,8,0.026,20,0.015,21,0.015,41,2.497,88,4.83,148,2.875,170,0.97,171,2.053,365,1.458,395,1.61,455,2.053,612,2.053,645,2.053,667,4.538,685,1.799,686,3.058,737,2.438,738,2.438,739,4.339,740,3.632,741,2.438,742,2.438,743,2.438,744,2.438,745,3.632,746,4.339,747,2.438,748,2.438,749,4.808,750,2.438,751,5.737,752,2.438,753,5.583,754,2.438,755,2.438,756,2.438,757,3.632,758,2.438,759,3.632,760,2.438,761,4.339,762,2.438,763,3.632,764,2.438,765,2.438,766,2.438,767,2.438,768,2.438,769,4.808,770,2.438,771,3.632,772,2.438,773,2.438,774,2.438,775,2.438,776,5.39,777,3.632,778,4.808,779,2.438,780,3.632,781,2.438,782,3.632,783,5.39,784,4.808,785,2.438,786,3.632,787,2.438,788,2.438,789,2.438,790,2.438,791,4.808,792,2.438,793,2.438,794,2.438,795,2.438,796,3.632,797,2.438,798,2.438,799,2.438,800,2.438,801,2.438,802,3.632,803,2.438,804,2.438,805,2.438,806,3.632,807,2.438,808,2.438,809,4.048,810,3.632,811,2.438,812,2.438,813,2.438,814,2.438,815,2.438,816,2.438,817,2.438,818,2.438,819,3.632,820,2.438,821,2.438,822,2.438,823,2.438,824,4.339,825,2.438,826,2.438,827,2.438,828,2.438,829,2.438,830,3.632,831,2.438,832,2.438,833,2.438,834,2.438,835,3.632,836,2.438,837,2.438,838,2.438,839,3.632,840,3.632,841,2.438,842,2.438,843,2.438,844,2.438,845,2.438,846,2.438,847,2.438,848,2.438,849,2.438,850,2.438,851,2.438,852,2.438,853,2.438,854,2.438,855,2.438,856,2.438,857,2.438,858,2.053]],["title/modules.html",[24,1.941]],["body/modules.html",[8,0.023,20,0.023,21,0.023,23,3.042,24,1.976,34,2.518,35,2.756,36,2.756,37,2.518,38,2.314,809,5.49,859,6.52,860,6.52,861,6.52]],["title/overview.html",[862,3.81]],["body/overview.html",[2,1.02,8,0.027,10,2.753,20,0.018,21,0.018,22,1.02,23,4.358,24,1.366,25,1.366,26,1.599,27,1.599,28,1.366,29,1.599,30,1.599,31,2.681,32,2.681,33,2.681,34,3.223,35,3.411,36,3.74,37,3.366,38,3.035,39,2.209,40,1.599,41,1.475,47,2.53,58,2.801,64,1.74,79,1.599,93,3.035,97,2.681,98,2.681,99,2.681,110,2.801,128,1.475,348,2.753,355,2.681,356,2.681,483,2.681,485,2.681,555,2.681,556,2.681,557,2.681,678,2.681,679,2.681,680,2.681,862,2.681,863,5.04,864,3.185,865,3.185]],["title/properties.html",[131,1.372,702,2.334]],["body/properties.html",[8,0.027,20,0.024,21,0.024,131,1.733,170,2.004,395,3.325,858,4.241,866,5.037,867,5.037,868,5.037]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":689,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":867,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":713,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":718,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":721,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":712,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":690,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":696,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":691,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":695,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":692,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":697,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":698,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":179,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":149,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["1.1.23",{"_index":704,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":668,"title":{},"body":{"controllers/UsersController.html":{}}}],["10.0.0",{"_index":705,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":711,"title":{},"body":{"dependencies.html":{}}}],["1024",{"_index":404,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["10})@apiquery({name",{"_index":650,"title":{},"body":{"controllers/UsersController.html":{}}}],["1234",{"_index":313,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["1234})@isoptional()@isint()@type(undefined",{"_index":311,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["16t07:46:32+0000",{"_index":180,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["188.213.130.121",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["2",{"_index":253,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["2.0.5",{"_index":707,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":457,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":442,"title":{},"body":{"controllers/PostController.html":{}}}],["2024",{"_index":178,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["256",{"_index":414,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["3/5",{"_index":700,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":864,"title":{},"body":{"overview.html":{}}}],["512",{"_index":422,"title":{},"body":{"entities/Post.html":{}}}],["5432",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["6",{"_index":863,"title":{},"body":{"overview.html":{}}}],["60",{"_index":699,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":865,"title":{},"body":{"overview.html":{}}}],["7.3.0",{"_index":710,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":720,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":288,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["8.11.5",{"_index":715,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":196,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["96",{"_index":579,"title":{},"body":{"entities/User.html":{}}}],["alice",{"_index":622,"title":{},"body":{"injectables/UserService.html":{}}}],["alice@doe.com",{"_index":623,"title":{},"body":{"injectables/UserService.html":{}}}],["allowing",{"_index":797,"title":{},"body":{"index.html":{}}}],["amazing",{"_index":845,"title":{},"body":{"index.html":{}}}],["api",{"_index":653,"title":{},"body":{"controllers/UsersController.html":{}}}],["apioperation",{"_index":466,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":438,"title":{},"body":{"controllers/PostController.html":{}}}],["apiproperty",{"_index":238,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty()@isstring()@minlength(3)@isnotempty()@maxlength(256",{"_index":267,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apiproperty({description",{"_index":381,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["apiproperty({example",{"_index":216,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional",{"_index":239,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional()@isoptional()@isjson",{"_index":269,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional()@isoptional()@isstring",{"_index":263,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional()@isoptional()@isurl()@maxlength(1024",{"_index":265,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional({description",{"_index":308,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["apiquery",{"_index":663,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":467,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":468,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["apitags('posts",{"_index":472,"title":{},"body":{"controllers/PostController.html":{}}}],["apitags('users",{"_index":665,"title":{},"body":{"controllers/UsersController.html":{}}}],["app.controller",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":667,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["application'})@apiresponse({status",{"_index":643,"title":{},"body":{"controllers/UsersController.html":{}}}],["applications",{"_index":745,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":23,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":10,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":212,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["async",{"_index":363,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["atgs",{"_index":524,"title":{},"body":{"injectables/PostService.html":{}}}],["auth",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":102,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":89,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authmodule",{"_index":34,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":395,"title":{},"body":{"entities/Post.html":{},"injectables/PostService.html":{},"index.html":{},"properties.html":{}}}],["authorid",{"_index":132,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["authservice",{"_index":93,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["authservice:authservice",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{}}}],["autoloadentities",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["await",{"_index":374,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["aws",{"_index":786,"title":{},"body":{"index.html":{}}}],["backers",{"_index":846,"title":{},"body":{"index.html":{}}}],["based",{"_index":645,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["blog",{"_index":157,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"controllers/PostController.html":{}}}],["board",{"_index":838,"title":{},"body":{"index.html":{}}}],["body",{"_index":346,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":116,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":861,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":859,"title":{},"body":{"modules.html":{}}}],["building",{"_index":740,"title":{},"body":{"index.html":{}}}],["business",{"_index":593,"title":{},"body":{"injectables/UserService.html":{}}}],["cascade",{"_index":338,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["cascade'})@joincolumn",{"_index":329,"title":{},"body":{"entities/MetaOption.html":{}}}],["changeme",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["channel",{"_index":812,"title":{},"body":{"index.html":{}}}],["character",{"_index":297,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":289,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["check",{"_index":776,"title":{},"body":{"index.html":{}}}],["class",{"_index":13,"title":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":128,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"overview.html":{}}}],["clicks",{"_index":796,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":781,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":97,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":99,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":98,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule",{"_index":355,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_providers",{"_index":356,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_postmodule",{"_index":483,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_postmodule_imports",{"_index":484,"title":{},"body":{"modules/PostModule.html":{}}}],["cluster_postmodule_providers",{"_index":485,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_tagsmodule",{"_index":555,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_exports",{"_index":556,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_providers",{"_index":557,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":678,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":679,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":680,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":334,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["column({type",{"_index":323,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["come",{"_index":803,"title":{},"body":{"index.html":{}}}],["compodoc/compodoc",{"_index":703,"title":{},"body":{"dependencies.html":{}}}],["connect",{"_index":590,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(isauth",{"_index":619,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(patchpostdto",{"_index":480,"title":{},"body":{"controllers/PostController.html":{}}}],["const",{"_index":124,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["constructor",{"_index":108,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["constructor(@inject(forwardref",{"_index":122,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["constructor(@injectrepository(metaoption",{"_index":372,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["constructor(@injectrepository(tag",{"_index":572,"title":{},"body":{"injectables/TagsService.html":{}}}],["constructor(authservice",{"_index":597,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(metaoptionrepository",{"_index":364,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["constructor(private",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["constructor(tagsrepository",{"_index":565,"title":{},"body":{"injectables/TagsService.html":{}}}],["constructor(userservice",{"_index":109,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{}}}],["contain",{"_index":291,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["content",{"_index":133,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["context",{"_index":188,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('meta",{"_index":351,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["controller('post",{"_index":471,"title":{},"body":{"controllers/PostController.html":{}}}],["controller('tags",{"_index":553,"title":{},"body":{"controllers/TagsController.html":{}}}],["controller('users",{"_index":664,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["courses",{"_index":818,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":685,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":342,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/TagsController.html":{}}}],["create(@body",{"_index":353,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/TagsController.html":{}}}],["create(createpostmetaoptiondto",{"_index":343,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["create(createpostmetaoptionsdto",{"_index":368,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["create(createtagdto",{"_index":549,"title":{},"body":{"controllers/TagsController.html":{}}}],["created",{"_index":444,"title":{},"body":{"controllers/PostController.html":{}}}],["createdate",{"_index":317,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createdatecolumn",{"_index":319,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createpost",{"_index":433,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["createpost(@body",{"_index":477,"title":{},"body":{"controllers/PostController.html":{}}}],["createpost(createpostdto",{"_index":437,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["createpostdto",{"_index":127,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["createpostdto.metaoptions",{"_index":510,"title":{},"body":{"injectables/PostService.html":{}}}],["createpostmetaoptiondto",{"_index":345,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createpostmetaoptionsdto",{"_index":160,"title":{"classes/CreatePostMetaOptionsDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"coverage.html":{}}}],["creates",{"_index":439,"title":{},"body":{"controllers/PostController.html":{}}}],["createtagdto",{"_index":260,"title":{"classes/CreateTagDto.html":{}},"body":{"classes/CreateTagDto.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["createtags",{"_index":563,"title":{},"body":{"injectables/TagsService.html":{}}}],["createtags(createtagdto",{"_index":568,"title":{},"body":{"injectables/TagsService.html":{}}}],["createuser",{"_index":595,"title":{},"body":{"injectables/UserService.html":{}}}],["createuser(createuserdto",{"_index":600,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto",{"_index":273,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":627,"title":{},"body":{"injectables/UserService.html":{}}}],["createusers",{"_index":633,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(@body",{"_index":675,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(createuserdto",{"_index":636,"title":{},"body":{"controllers/UsersController.html":{}}}],["database",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserService.html":{}}}],["date",{"_index":175,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["declarations",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":144,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":814,"title":{},"body":{"index.html":{}}}],["default",{"_index":409,"title":{},"body":{"entities/Post.html":{}}}],["defaultvaluepipe",{"_index":657,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":673,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":671,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":83,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["delete",{"_index":448,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["delete(id",{"_index":497,"title":{},"body":{"injectables/PostService.html":{}}}],["deleteat",{"_index":536,"title":{},"body":{"entities/Tag.html":{}}}],["deleted",{"_index":523,"title":{},"body":{"injectables/PostService.html":{}}}],["deletedatecolumn",{"_index":538,"title":{},"body":{"entities/Tag.html":{}}}],["deletepost",{"_index":434,"title":{},"body":{"controllers/PostController.html":{}}}],["deletepost(@query(\"id",{"_index":481,"title":{},"body":{"controllers/PostController.html":{}}}],["deletepost(id",{"_index":447,"title":{},"body":{"controllers/PostController.html":{}}}],["dependencies",{"_index":25,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":769,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":785,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":777,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":795,"title":{},"body":{"index.html":{}}}],["description",{"_index":170,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"entities/Tag.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":754,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":825,"title":{},"body":{"index.html":{}}}],["discord",{"_index":811,"title":{},"body":{"index.html":{}}}],["dive",{"_index":813,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":686,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["draft",{"_index":207,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["dto",{"_index":470,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["dto.ts",{"_index":378,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["dto.ts:12",{"_index":384,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["dtos/create",{"_index":347,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["dtos/get",{"_index":613,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["dtos/patch",{"_index":469,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/UsersController.html":{}}}],["e2e",{"_index":764,"title":{},"body":{"index.html":{}}}],["each",{"_index":252,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["eager",{"_index":398,"title":{},"body":{"entities/Post.html":{}}}],["efficient",{"_index":741,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":775,"title":{},"body":{"index.html":{}}}],["email",{"_index":119,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["ensure",{"_index":773,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":829,"title":{},"body":{"index.html":{}}}],["entities",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":314,"title":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"coverage.html":{}}}],["entries",{"_index":647,"title":{},"body":{"controllers/UsersController.html":{}}}],["enum",{"_index":244,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enumerations",{"_index":723,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/posttype.enum",{"_index":233,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enums/status.enum",{"_index":234,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["error",{"_index":186,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["example",{"_index":148,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["existing",{"_index":456,"title":{},"body":{"controllers/PostController.html":{}}}],["existinguser",{"_index":625,"title":{},"body":{"injectables/UserService.html":{}}}],["experience",{"_index":816,"title":{},"body":{"index.html":{}}}],["export",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["exports",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":709,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":379,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["false",{"_index":164,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["fast",{"_index":789,"title":{},"body":{"index.html":{}}}],["featured",{"_index":155,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["featuredimageurl",{"_index":134,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["features",{"_index":799,"title":{},"body":{"index.html":{}}}],["fetched",{"_index":644,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetches",{"_index":640,"title":{},"body":{"controllers/UsersController.html":{}}}],["few",{"_index":791,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["find",{"_index":610,"title":{},"body":{"injectables/UserService.html":{}}}],["findall",{"_index":492,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["findall(getuserparamdto",{"_index":602,"title":{},"body":{"injectables/UserService.html":{}}}],["findall(userid",{"_index":499,"title":{},"body":{"injectables/PostService.html":{}}}],["findmultpletags",{"_index":564,"title":{},"body":{"injectables/TagsService.html":{}}}],["findmultpletags(tags",{"_index":570,"title":{},"body":{"injectables/TagsService.html":{}}}],["findonebyid",{"_index":596,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid(id",{"_index":608,"title":{},"body":{"injectables/UserService.html":{}}}],["firstname",{"_index":276,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["focus",{"_index":798,"title":{},"body":{"index.html":{}}}],["follow",{"_index":832,"title":{},"body":{"index.html":{}}}],["forwardref",{"_index":101,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["framework",{"_index":739,"title":{},"body":{"index.html":{}}}],["full",{"_index":828,"title":{},"body":{"index.html":{}}}],["function",{"_index":694,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":733,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":794,"title":{},"body":{"index.html":{}}}],["ger",{"_index":309,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["get('/:id/:optional",{"_index":666,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id/:optional?')@apioperation({summary",{"_index":639,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:userid",{"_index":451,"title":{},"body":{"controllers/PostController.html":{}}}],["gethello",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getpost",{"_index":435,"title":{},"body":{"controllers/PostController.html":{}}}],["getpost(@param('userid",{"_index":473,"title":{},"body":{"controllers/PostController.html":{}}}],["getpost(userid",{"_index":450,"title":{},"body":{"controllers/PostController.html":{}}}],["getting",{"_index":735,"title":{"index.html":{}},"body":{}}],["getuserparamdto",{"_index":607,"title":{},"body":{"injectables/UserService.html":{}}}],["getusers",{"_index":634,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(/*@param('id",{"_index":669,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getusersparamdto",{"_index":638,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersparamdto",{"_index":303,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["graph",{"_index":821,"title":{},"body":{"index.html":{}}}],["grow",{"_index":842,"title":{},"body":{"index.html":{}}}],["hands",{"_index":815,"title":{},"body":{"index.html":{}}}],["handy",{"_index":804,"title":{},"body":{"index.html":{}}}],["header",{"_index":658,"title":{},"body":{"controllers/UsersController.html":{}}}],["headers",{"_index":659,"title":{},"body":{"controllers/UsersController.html":{}}}],["hello",{"_index":86,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":819,"title":{},"body":{"index.html":{}}}],["here",{"_index":850,"title":{},"body":{"index.html":{}}}],["host",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["http://localhost.com/images/image1.jpg",{"_index":158,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://nestjs.com",{"_index":855,"title":{},"body":{"index.html":{}}}],["https://schema.org",{"_index":189,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https:\\/\\/schema.org\\\",\\r\\n",{"_index":249,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["id",{"_index":307,"title":{},"body":{"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["identifier",{"_index":687,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":213,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["image",{"_index":156,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["import",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["imports",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["in(tags",{"_index":577,"title":{},"body":{"injectables/TagsService.html":{}}}],["index",{"_index":81,"title":{"index.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["information",{"_index":779,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":801,"title":{},"body":{"index.html":{}}}],["inject",{"_index":120,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["injectable",{"_index":78,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":79,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":371,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["injectrepository(metaoption",{"_index":505,"title":{},"body":{"injectables/PostService.html":{}}}],["injectrepository(post",{"_index":504,"title":{},"body":{"injectables/PostService.html":{}}}],["injectrepository(user",{"_index":617,"title":{},"body":{"injectables/UserService.html":{}}}],["install",{"_index":793,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":752,"title":{},"body":{"index.html":{}}}],["integer",{"_index":146,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["interact",{"_index":822,"title":{},"body":{"index.html":{}}}],["inversepost",{"_index":520,"title":{},"body":{"injectables/PostService.html":{}}}],["ip",{"_index":660,"title":{},"body":{"controllers/UsersController.html":{}}}],["isarray",{"_index":219,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isauth",{"_index":106,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["isemail",{"_index":299,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":220,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":247,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus)@isnotempty()@apiproperty({enum",{"_index":206,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":243,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype)@isnotempty()@apiproperty({enum",{"_index":169,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isint",{"_index":221,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["isint()@isnotempty()@apiproperty({type",{"_index":145,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isiso8601",{"_index":222,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isiso8601()@isoptional()@apipropertyoptional({description",{"_index":176,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":223,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{}}}],["isnotempty",{"_index":224,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["isnotempty()@isjson",{"_index":258,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["isoptional",{"_index":225,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isoptional()@apipropertyoptional({type",{"_index":162,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional()@isarray()@isint({each",{"_index":210,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional()@isjson()@apipropertyoptional({description",{"_index":182,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional()@isurl()@maxlength(1024)@apipropertyoptional({description",{"_index":154,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isstring",{"_index":226,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@apiproperty({description",{"_index":192,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["isstring()@isnotempty()@isemail()@maxlength(96",{"_index":278,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":280,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(8)@matches(/^(?=.*[a",{"_index":284,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@apipropertyoptional({description",{"_index":151,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":282,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isurl",{"_index":227,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["items",{"_index":165,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["job",{"_index":835,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":837,"title":{},"body":{"index.html":{}}}],["john",{"_index":620,"title":{},"body":{"injectables/UserService.html":{}}}],["john@doe.com",{"_index":621,"title":{},"body":{"injectables/UserService.html":{}}}],["join",{"_index":848,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":335,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["jointable",{"_index":424,"title":{},"body":{"entities/Post.html":{}}}],["json",{"_index":184,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{}}}],["kamil",{"_index":852,"title":{},"body":{"index.html":{}}}],["key",{"_index":770,"title":{},"body":{"index.html":{}}}],["lastname",{"_index":277,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["learn",{"_index":807,"title":{},"body":{"index.html":{}}}],["legend",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":403,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["letter",{"_index":294,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letters",{"_index":199,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["license",{"_index":858,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":840,"title":{},"body":{"index.html":{}}}],["limit",{"_index":603,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["linkedin",{"_index":834,"title":{},"body":{"index.html":{}}}],["list",{"_index":641,"title":{},"body":{"controllers/UsersController.html":{}}}],["login",{"_index":107,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(email",{"_index":117,"title":{},"body":{"injectables/AuthService.html":{}}}],["long",{"_index":290,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["looking",{"_index":780,"title":{},"body":{"index.html":{}}}],["loop",{"_index":831,"title":{},"body":{"index.html":{}}}],["lowercase",{"_index":295,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["makes",{"_index":787,"title":{},"body":{"index.html":{}}}],["managing",{"_index":800,"title":{},"body":{"index.html":{}}}],["manytomany",{"_index":425,"title":{},"body":{"entities/Post.html":{}}}],["manytomany(undefined",{"_index":419,"title":{},"body":{"entities/Post.html":{}}}],["manytoone",{"_index":426,"title":{},"body":{"entities/Post.html":{}}}],["manytoone(undefined",{"_index":396,"title":{},"body":{"entities/Post.html":{}}}],["matches",{"_index":228,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":302,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":245,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["matching",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["mau",{"_index":783,"title":{},"body":{"index.html":{}}}],["maxlength",{"_index":229,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(1024",{"_index":251,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(256",{"_index":246,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(512",{"_index":242,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["maxlength(96",{"_index":300,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":197,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["meta",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"coverage.html":{}}}],["metadata",{"_index":717,"title":{},"body":{"dependencies.html":{}}}],["metaoption",{"_index":315,"title":{"entities/MetaOption.html":{}},"body":{"entities/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["metaoptionrepository",{"_index":367,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostService.html":{}}}],["metaoptions",{"_index":135,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostService.html":{}}}],["metaoptions.post",{"_index":407,"title":{},"body":{"entities/Post.html":{}}}],["metaoptionscontroller",{"_index":339,"title":{"controllers/MetaOptionsController.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"coverage.html":{}}}],["metaoptionservice",{"_index":352,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["metaoptionsmodule",{"_index":35,"title":{"modules/MetaOptionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules.html":{},"overview.html":{}}}],["metaoptionsservice",{"_index":348,"title":{"injectables/MetaOptionsService.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{},"overview.html":{}}}],["metavalue",{"_index":254,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{}}}],["method",{"_index":606,"title":{},"body":{"injectables/UserService.html":{}}}],["methods",{"_index":82,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["minlength",{"_index":230,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":272,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":241,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":301,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":722,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mit",{"_index":839,"title":{},"body":{"index.html":{}}}],["mode",{"_index":757,"title":{},"body":{"index.html":{}}}],["module",{"_index":22,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":24,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":778,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":853,"title":{},"body":{"index.html":{}}}],["name",{"_index":113,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateTagDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["need",{"_index":826,"title":{},"body":{"index.html":{}}}],["needs",{"_index":382,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["nest",{"_index":746,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":857,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":88,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":706,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":391,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":708,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":240,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjsconnectiontrainingcourse",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["new",{"_index":440,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["newuser",{"_index":628,"title":{},"body":{"injectables/UserService.html":{}}}],["node.js",{"_index":738,"title":{},"body":{"index.html":{}}}],["npm",{"_index":751,"title":{},"body":{"index.html":{}}}],["null",{"_index":161,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostService.html":{}}}],["nullable",{"_index":324,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["number",{"_index":143,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["object",{"_index":163,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["offer",{"_index":836,"title":{},"body":{"index.html":{}}}],["official",{"_index":784,"title":{},"body":{"index.html":{}}}],["ondelete",{"_index":328,"title":{},"body":{"entities/MetaOption.html":{}}}],["one",{"_index":292,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["onetomany",{"_index":588,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":585,"title":{},"body":{"entities/User.html":{}}}],["onetoone",{"_index":336,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["onetoone(undefined",{"_index":326,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["open",{"_index":841,"title":{},"body":{"index.html":{}}}],["operations",{"_index":594,"title":{},"body":{"injectables/UserService.html":{}}}],["option.dtos",{"_index":236,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{}}}],["option.dtos.ts",{"_index":257,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["option.dtos.ts:6",{"_index":259,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["option.entity",{"_index":359,"title":{},"body":{"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{}}}],["option.entity.ts",{"_index":316,"title":{},"body":{"entities/MetaOption.html":{},"coverage.html":{}}}],["option.entity.ts:13",{"_index":325,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:16",{"_index":320,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:19",{"_index":332,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:26",{"_index":330,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:7",{"_index":322,"title":{},"body":{"entities/MetaOption.html":{}}}],["optional",{"_index":114,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["options",{"_index":341,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options.controller",{"_index":358,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.controller.ts",{"_index":340,"title":{},"body":{"controllers/MetaOptionsController.html":{},"coverage.html":{}}}],["options.controller.ts:11",{"_index":344,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options.module",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["options.module.ts",{"_index":357,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.service",{"_index":350,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["options.service.ts",{"_index":362,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["options.service.ts:12",{"_index":369,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options.service.ts:8",{"_index":366,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options/dtos/create",{"_index":235,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/Post.html":{},"coverage.html":{}}}],["options/meta",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"entities/Post.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["options/providers/meta",{"_index":361,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["out",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":862,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":702,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":604,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["page','story','series",{"_index":173,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["param",{"_index":461,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["param.dto",{"_index":614,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["param.dto.ts",{"_index":306,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:13",{"_index":312,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parameters",{"_index":112,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["parseintpipe",{"_index":462,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["part",{"_index":827,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":385,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":380,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":390,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["password",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["patch",{"_index":463,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["patchpostdto",{"_index":376,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["patchpostdto.content",{"_index":530,"title":{},"body":{"injectables/PostService.html":{}}}],["patchpostdto.id",{"_index":526,"title":{},"body":{"injectables/PostService.html":{}}}],["patchpostdto.slug",{"_index":534,"title":{},"body":{"injectables/PostService.html":{}}}],["patchpostdto.status",{"_index":532,"title":{},"body":{"injectables/PostService.html":{}}}],["patchpostdto.title",{"_index":528,"title":{},"body":{"injectables/PostService.html":{}}}],["patchuser",{"_index":635,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":677,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(patchuserdto",{"_index":655,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":388,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["per",{"_index":649,"title":{},"body":{"controllers/UsersController.html":{}}}],["perform",{"_index":592,"title":{},"body":{"injectables/UserService.html":{}}}],["person",{"_index":190,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["person\\\"\\r\\n",{"_index":250,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["pg",{"_index":714,"title":{},"body":{"dependencies.html":{}}}],["platform",{"_index":782,"title":{},"body":{"index.html":{}}}],["please",{"_index":810,"title":{},"body":{"index.html":{}}}],["port",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["position",{"_index":651,"title":{},"body":{"controllers/UsersController.html":{}}}],["possible",{"_index":171,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["post",{"_index":152,"title":{"entities/Post.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":441,"title":{},"body":{"controllers/PostController.html":{}}}],["post'})@isstring()@minlength(4)@maxlength(512)@isnotempty",{"_index":217,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@matches(/^[a",{"_index":194,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["post.author",{"_index":586,"title":{},"body":{"entities/User.html":{}}}],["post.content",{"_index":529,"title":{},"body":{"injectables/PostService.html":{}}}],["post.controller",{"_index":487,"title":{},"body":{"modules/PostModule.html":{}}}],["post.dtos",{"_index":386,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["post.dtos.ts",{"_index":130,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["post.dtos.ts:115",{"_index":168,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:124",{"_index":150,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:17",{"_index":218,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:25",{"_index":174,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:32",{"_index":153,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:44",{"_index":204,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:53",{"_index":209,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:61",{"_index":191,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:71",{"_index":159,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:80",{"_index":181,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:92",{"_index":215,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.entity",{"_index":488,"title":{},"body":{"modules/PostModule.html":{},"injectables/PostService.html":{}}}],["post.metaoptions",{"_index":327,"title":{},"body":{"entities/MetaOption.html":{},"injectables/PostService.html":{}}}],["post.metaoptions.id",{"_index":522,"title":{},"body":{"injectables/PostService.html":{}}}],["post.slug",{"_index":533,"title":{},"body":{"injectables/PostService.html":{}}}],["post.status",{"_index":531,"title":{},"body":{"injectables/PostService.html":{}}}],["post.title",{"_index":527,"title":{},"body":{"injectables/PostService.html":{}}}],["post/post.module",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["post/services/post.service",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["postcontroller",{"_index":431,"title":{"controllers/PostController.html":{}},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{},"coverage.html":{}}}],["postgres",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["postmodule",{"_index":36,"title":{"modules/PostModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"modules.html":{},"overview.html":{}}}],["postrepository",{"_index":494,"title":{},"body":{"injectables/PostService.html":{}}}],["posts",{"_index":507,"title":{},"body":{"injectables/PostService.html":{},"entities/User.html":{}}}],["postservice",{"_index":47,"title":{"injectables/PostService.html":{}},"body":{"modules/AppModule.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":205,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["poststatus.draft",{"_index":430,"title":{},"body":{"entities/Post.html":{}}}],["posttype",{"_index":136,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["posttype.post",{"_index":429,"title":{},"body":{"entities/Post.html":{}}}],["prefix",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["primarygeneratedcolumn",{"_index":321,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["private",{"_index":123,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["production",{"_index":759,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":737,"title":{},"body":{"index.html":{}}}],["project",{"_index":749,"title":{},"body":{"index.html":{}}}],["properties",{"_index":131,"title":{"properties.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"properties.html":{}}}],["providers",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/meta",{"_index":349,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["providers/tags.service",{"_index":552,"title":{},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{}}}],["providers/user.service",{"_index":662,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":105,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["published",{"_index":177,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["publishon",{"_index":137,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["query",{"_index":464,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["query'})@apiquery({name",{"_index":646,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit",{"_index":670,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":672,"title":{},"body":{"controllers/UsersController.html":{}}}],["questions",{"_index":808,"title":{},"body":{"index.html":{}}}],["r\\n",{"_index":248,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["read",{"_index":849,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["ready",{"_index":768,"title":{},"body":{"index.html":{}}}],["real",{"_index":823,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":716,"title":{},"body":{"dependencies.html":{}}}],["registered",{"_index":642,"title":{},"body":{"controllers/UsersController.html":{}}}],["relations",{"_index":509,"title":{},"body":{"injectables/PostService.html":{}}}],["repository",{"_index":365,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["required",{"_index":147,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["requiring",{"_index":790,"title":{},"body":{"index.html":{}}}],["reset",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":802,"title":{},"body":{"index.html":{}}}],["response",{"_index":443,"title":{},"body":{"controllers/PostController.html":{}}}],["result",{"_index":575,"title":{},"body":{"injectables/TagsService.html":{}}}],["results",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["returned",{"_index":648,"title":{},"body":{"controllers/UsersController.html":{}}}],["returns",{"_index":85,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["review",{"_index":729,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["run",{"_index":753,"title":{},"body":{"index.html":{}}}],["runs",{"_index":774,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":719,"title":{},"body":{"dependencies.html":{}}}],["sample_token",{"_index":126,"title":{},"body":{"injectables/AuthService.html":{}}}],["scalable",{"_index":742,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":728,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["scheduled','review",{"_index":208,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["schema",{"_index":138,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["serialize",{"_index":183,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":732,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["server",{"_index":743,"title":{},"body":{"index.html":{}}}],["service/auth.service",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["services/post.service",{"_index":465,"title":{},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{}}}],["setup",{"_index":750,"title":{},"body":{"index.html":{}}}],["side",{"_index":744,"title":{},"body":{"index.html":{}}}],["sidebarenabled\":true",{"_index":255,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["simple",{"_index":792,"title":{},"body":{"index.html":{}}}],["single",{"_index":611,"title":{},"body":{"injectables/UserService.html":{}}}],["slug",{"_index":139,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["small",{"_index":198,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["spaces",{"_index":202,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["special",{"_index":296,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":310,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["sponsors",{"_index":844,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":734,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../posttype.enum.ts",{"_index":725,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../status.enum.ts",{"_index":724,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":80,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":84,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.module",{"_index":683,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":100,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/service/auth.service",{"_index":615,"title":{},"body":{"injectables/UserService.html":{}}}],["src/auth/service/auth.service.ts",{"_index":104,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/service/auth.service.ts:14",{"_index":115,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/service/auth.service.ts:5",{"_index":111,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/service/auth.service.ts:8",{"_index":118,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":693,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/meta",{"_index":256,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["src/post/dtos/create",{"_index":129,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/post/dtos/patch",{"_index":377,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/post/enums/posttype.enum.ts",{"_index":730,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/post/enums/status.enum.ts",{"_index":726,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/post/post.controller.ts",{"_index":432,"title":{},"body":{"controllers/PostController.html":{},"coverage.html":{}}}],["src/post/post.controller.ts:14",{"_index":452,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:26",{"_index":446,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:37",{"_index":459,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:42",{"_index":449,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.entity",{"_index":333,"title":{},"body":{"entities/MetaOption.html":{},"entities/User.html":{}}}],["src/post/post.entity.ts",{"_index":394,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/post/post.entity.ts:12",{"_index":406,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:18",{"_index":423,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:25",{"_index":410,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:33",{"_index":416,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:40",{"_index":417,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:46",{"_index":401,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:52",{"_index":413,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:59",{"_index":405,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:64",{"_index":412,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:74",{"_index":408,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:79",{"_index":399,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:86",{"_index":421,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.module.ts",{"_index":486,"title":{},"body":{"modules/PostModule.html":{}}}],["src/post/services/post.service.ts",{"_index":491,"title":{},"body":{"injectables/PostService.html":{},"coverage.html":{}}}],["src/post/services/post.service.ts:11",{"_index":495,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/services/post.service.ts:19",{"_index":500,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/services/post.service.ts:31",{"_index":496,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/services/post.service.ts:52",{"_index":498,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/services/post.service.ts:72",{"_index":502,"title":{},"body":{"injectables/PostService.html":{}}}],["src/tags/dtos/create",{"_index":261,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service",{"_index":503,"title":{},"body":{"injectables/PostService.html":{}}}],["src/tags/providers/tags.service.ts",{"_index":562,"title":{},"body":{"injectables/TagsService.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service.ts:12",{"_index":569,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:18",{"_index":571,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:8",{"_index":566,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tag.entity",{"_index":428,"title":{},"body":{"entities/Post.html":{}}}],["src/tags/tag.entity.ts",{"_index":535,"title":{},"body":{"entities/Tag.html":{},"coverage.html":{}}}],["src/tags/tag.entity.ts:14",{"_index":543,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:22",{"_index":545,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:28",{"_index":540,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:34",{"_index":544,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:41",{"_index":541,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:44",{"_index":537,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:47",{"_index":546,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:50",{"_index":539,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:6",{"_index":542,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.controller.ts",{"_index":548,"title":{},"body":{"controllers/TagsController.html":{},"coverage.html":{}}}],["src/tags/tags.controller.ts:10",{"_index":550,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.module",{"_index":489,"title":{},"body":{"modules/PostModule.html":{}}}],["src/tags/tags.module.ts",{"_index":558,"title":{},"body":{"modules/TagsModule.html":{}}}],["src/users/dtos/create",{"_index":274,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":304,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":389,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/providers/user.service",{"_index":121,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{}}}],["src/users/providers/user.service.ts",{"_index":589,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/users/providers/user.service.ts:13",{"_index":599,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/user.service.ts:20",{"_index":605,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/user.service.ts:38",{"_index":609,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/user.service.ts:44",{"_index":601,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/user.entity",{"_index":427,"title":{},"body":{"entities/Post.html":{}}}],["src/users/user.entity.ts",{"_index":578,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:13",{"_index":581,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:21",{"_index":583,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:28",{"_index":580,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:34",{"_index":584,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:37",{"_index":587,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:7",{"_index":582,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":632,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:35",{"_index":654,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:43",{"_index":637,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:49",{"_index":656,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":103,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostModule.html":{}}}],["src/users/users.module.ts",{"_index":681,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":755,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":758,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":760,"title":{},"body":{"index.html":{}}}],["started",{"_index":736,"title":{"index.html":{}},"body":{}}],["starter",{"_index":748,"title":{},"body":{"index.html":{}}}],["statements",{"_index":688,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":140,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["stay",{"_index":830,"title":{},"body":{"index.html":{}}}],["steps",{"_index":771,"title":{},"body":{"index.html":{}}}],["story",{"_index":731,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["straightforward",{"_index":788,"title":{},"body":{"index.html":{}}}],["string",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["studentscompany_users",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["successfully",{"_index":476,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["successfully'})@patch",{"_index":458,"title":{},"body":{"controllers/PostController.html":{}}}],["successfully'})@post",{"_index":445,"title":{},"body":{"controllers/PostController.html":{}}}],["summary",{"_index":475,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":809,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":860,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":591,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":701,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":418,"title":{"entities/Tag.html":{}},"body":{"entities/Post.html":{},"entities/Tag.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["tag.dto",{"_index":551,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tag.dto.ts",{"_index":262,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["tag.dto.ts:10",{"_index":268,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:22",{"_index":271,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:28",{"_index":264,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:33",{"_index":270,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:39",{"_index":266,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.entity",{"_index":560,"title":{},"body":{"modules/TagsModule.html":{},"injectables/TagsService.html":{}}}],["tags",{"_index":141,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tags.controller",{"_index":559,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags/providers/tags.service",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["tags/tags.module",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["tagscontroller",{"_index":547,"title":{"controllers/TagsController.html":{}},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tagsmodule",{"_index":37,"title":{"modules/TagsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules.html":{},"overview.html":{}}}],["tagsrepository",{"_index":567,"title":{},"body":{"injectables/TagsService.html":{}}}],["tagsservice",{"_index":58,"title":{"injectables/TagsService.html":{}},"body":{"modules/AppModule.html":{},"injectables/PostService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{},"overview.html":{}}}],["take",{"_index":772,"title":{},"body":{"index.html":{}}}],["test",{"_index":763,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":766,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":765,"title":{},"body":{"index.html":{}}}],["tests",{"_index":761,"title":{},"body":{"index.html":{}}}],["text",{"_index":400,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["thanks",{"_index":843,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":19,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.isauth",{"_index":618,"title":{},"body":{"injectables/UserService.html":{}}}],["this.metaoptionrepository.create(createpostdto.metaoptions",{"_index":511,"title":{},"body":{"injectables/PostService.html":{}}}],["this.metaoptionrepository.create(createpostmetaoptionsdto",{"_index":373,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionrepository.delete(post.metaoptions.id",{"_index":519,"title":{},"body":{"injectables/PostService.html":{}}}],["this.metaoptionrepository.find",{"_index":521,"title":{},"body":{"injectables/PostService.html":{}}}],["this.metaoptionrepository.save(metaoption",{"_index":375,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionrepository.save(metaoptions",{"_index":515,"title":{},"body":{"injectables/PostService.html":{}}}],["this.metaoptionservice.create(createpostmetaoptiondto",{"_index":354,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["this.postrepository.create",{"_index":514,"title":{},"body":{"injectables/PostService.html":{}}}],["this.postrepository.delete(id",{"_index":518,"title":{},"body":{"injectables/PostService.html":{}}}],["this.postrepository.find",{"_index":508,"title":{},"body":{"injectables/PostService.html":{}}}],["this.postrepository.findoneby",{"_index":517,"title":{},"body":{"injectables/PostService.html":{}}}],["this.postrepository.save(post",{"_index":516,"title":{},"body":{"injectables/PostService.html":{}}}],["this.postservice.createpost(createpostdto",{"_index":478,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.delete(id",{"_index":482,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.findall(userid",{"_index":474,"title":{},"body":{"controllers/PostController.html":{}}}],["this.tagsrepository.create(createtagdto",{"_index":573,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.find",{"_index":576,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.save(tag",{"_index":574,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsservice.createtags(createtagdto",{"_index":554,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.findmultpletags(createpostdto.tags",{"_index":512,"title":{},"body":{"injectables/PostService.html":{}}}],["this.tagsservice.findmultpletags(patchpostdto.tags",{"_index":525,"title":{},"body":{"injectables/PostService.html":{}}}],["this.userrepository.create(createuserdto",{"_index":629,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findone",{"_index":626,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findoneby",{"_index":624,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save(newuser",{"_index":630,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.createuser(createuserdto",{"_index":676,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.findall(getusersparamdto",{"_index":674,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.findonebyid(+'1234",{"_index":125,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findonebyid(+userid",{"_index":506,"title":{},"body":{"injectables/PostService.html":{}}}],["this.userservice.findonebyid(createpostdto.authorid",{"_index":513,"title":{},"body":{"injectables/PostService.html":{}}}],["thrown",{"_index":187,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["time",{"_index":824,"title":{},"body":{"index.html":{}}}],["timestamp",{"_index":411,"title":{},"body":{"entities/Post.html":{}}}],["title",{"_index":142,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["touch",{"_index":851,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":237,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"dependencies.html":{}}}],["true",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["true})@apipropertyoptional({description",{"_index":211,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@jointable",{"_index":420,"title":{},"body":{"entities/Post.html":{}}}],["true})@type(undefined",{"_index":167,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["twitter",{"_index":856,"title":{},"body":{"index.html":{}}}],["type",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["typeorm",{"_index":337,"title":{},"body":{"entities/MetaOption.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([metaoption",{"_index":360,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["typeormmodule.forfeature([post",{"_index":490,"title":{},"body":{"modules/PostModule.html":{}}}],["typeormmodule.forfeature([tag",{"_index":561,"title":{},"body":{"modules/TagsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":684,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":392,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":747,"title":{},"body":{"index.html":{}}}],["undefined",{"_index":214,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/UsersController.html":{}}}],["undefined})@isoptional()@validatenested({each",{"_index":166,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unique",{"_index":415,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["unit",{"_index":762,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":370,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostService.html":{},"injectables/TagsService.html":{},"injectables/UserService.html":{}}}],["unlicensed",{"_index":868,"title":{},"body":{"properties.html":{}}}],["update",{"_index":493,"title":{},"body":{"injectables/PostService.html":{}}}],["update(patchpostdto",{"_index":501,"title":{},"body":{"injectables/PostService.html":{}}}],["updated",{"_index":387,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostController.html":{}}}],["updated'})@isint()@isnotempty",{"_index":383,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["updatedate",{"_index":318,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatedatecolumn",{"_index":331,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatepost",{"_index":436,"title":{},"body":{"controllers/PostController.html":{}}}],["updatepost(@body",{"_index":479,"title":{},"body":{"controllers/PostController.html":{}}}],["updatepost(patchpostdto",{"_index":454,"title":{},"body":{"controllers/PostController.html":{}}}],["updates",{"_index":455,"title":{},"body":{"controllers/PostController.html":{},"index.html":{}}}],["uppercase",{"_index":293,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["url",{"_index":193,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["url'})@maxlength(256",{"_index":203,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["usefactory",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":52,"title":{"entities/User.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"entities/Post.html":{},"injectables/PostService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["user.dto",{"_index":393,"title":{},"body":{"classes/PatchUserDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["user.dto.ts",{"_index":275,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:14",{"_index":283,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:20",{"_index":279,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:28",{"_index":298,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:8",{"_index":281,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.entity",{"_index":616,"title":{},"body":{"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["user.posts",{"_index":397,"title":{},"body":{"entities/Post.html":{}}}],["userid",{"_index":453,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["username",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["userrepository",{"_index":598,"title":{},"body":{"injectables/UserService.html":{}}}],["users",{"_index":305,"title":{},"body":{"classes/GetUsersParamDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["users.controller",{"_index":682,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/user.entity",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.module",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":631,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":110,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["usersmodule",{"_index":38,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["uses",{"_index":200,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["using",{"_index":612,"title":{},"body":{"injectables/UserService.html":{},"index.html":{}}}],["validatenested",{"_index":231,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validation",{"_index":185,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validationpipe",{"_index":661,"title":{},"body":{"controllers/UsersController.html":{}}}],["validator",{"_index":232,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["value",{"_index":727,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["values",{"_index":172,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["varchar",{"_index":402,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["version",{"_index":866,"title":{},"body":{"properties.html":{}}}],["video",{"_index":817,"title":{},"body":{"index.html":{}}}],["visit",{"_index":806,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":820,"title":{},"body":{"index.html":{}}}],["void",{"_index":460,"title":{},"body":{"controllers/PostController.html":{}}}],["want",{"_index":652,"title":{},"body":{"controllers/UsersController.html":{}}}],["watch",{"_index":756,"title":{},"body":{"index.html":{}}}],["website",{"_index":854,"title":{},"body":{"index.html":{}}}],["without",{"_index":201,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["working",{"_index":805,"title":{},"body":{"index.html":{}}}],["world",{"_index":87,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":833,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":847,"title":{},"body":{"index.html":{}}}],["you're",{"_index":767,"title":{},"body":{"index.html":{}}}],["z0",{"_index":195,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["z\\d@$!%*#?&]{8",{"_index":287,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*#?&])[a",{"_index":286,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":285,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) { }\n\n  /* @Get()\n   getHello(): string {\n     return this.appService.getHello();\n   }*/\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPostModule\n\nPostModule\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            MetaOptionsModule\n                        \n                        \n                            PostModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostModule } from './post/post.module';\nimport { PostService } from './post/services/post.service';\nimport { AuthModule } from './auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './users/user.entity';\nimport { TagsModule } from './tags/tags.module';\nimport { MetaOptionsModule } from './meta-options/meta-options.module';\nimport { TagsService } from './tags/providers/tags.service';\n@Module({\n  imports: [UsersModule, PostModule, AuthModule, TagsModule,\n    TypeOrmModule.forRootAsync({\n      useFactory: () => ({\n        type: 'postgres',\n        //entities: [User],\n        autoLoadEntities: true,\n        synchronize: true,\n        port: 5432,\n        username: 'studentscompany_users',\n        password: 'changeme',\n        host: \"188.213.130.121\",\n        database: 'nestJsConnectionTrainingCourse'\n      })\n\n    }),\n    TagsModule,\n    MetaOptionsModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World NestJs!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AuthService } from './service/auth.service';\n\n@Controller('auth')\nexport class AuthController {\n\n    constructor(private readonly authService:AuthService){}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthService } from './service/auth.service';\nimport { AuthController } from './auth.controller';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  providers: [AuthService],\n  controllers: [AuthController],\n  imports: [forwardRef(() => UsersModule)],\n  exports: [AuthService]\n})\nexport class AuthModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/service/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAUth\n                            \n                            \n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/service/auth.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAUth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAUth()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/service/auth.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n            \n                \nlogin(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/service/auth.service.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { UserService } from 'src/users/providers/user.service';\n\n@Injectable()\nexport class AuthService {\n\n    constructor(@Inject(forwardRef(() => UserService)) private readonly userService: UserService) { }\n    login(email: string, password: string) {\n        const user = this.userService.findOneById(+'1234');\n        return \"SAMPLE_TOKEN\"\n    }\n\n\n    public isAUth() {\n        return true;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dtos/create-post.dtos.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                authorId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsNotEmpty()@ApiProperty({type: 'integer', required: true, example: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:124\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({description: 'This is the content of the post', example: 'the post content'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsUrl()@MaxLength(1024)@ApiPropertyOptional({description: 'featured image for your blog post', example: 'http://localhost.com/images/image1.jpg'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionsDto | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ApiPropertyOptional({type: 'object', required: false, items: undefined})@IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:115\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(postType)@IsNotEmpty()@ApiProperty({enum: postType, description: 'Possible values, 'POST', 'PAGE','STORY','SERIES''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsISO8601()@IsOptional()@ApiPropertyOptional({description: 'The date on which the blog post is published', example: '2024-03-16T07:46:32+0000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsJSON()@ApiPropertyOptional({description: 'Serialize your JSON object else a validation error will be thrown', example: '{\n \"@context\": \"https://schema.org\",\n \"@type\": \"Person\"\n}'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty({description: 'For example - 'my-url'', example: 'my-blog-post'})@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url'})@MaxLength(256)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(postStatus)@IsNotEmpty()@ApiProperty({enum: postStatus, description: ' Possible values, 'DRAFT', 'SCHEDULED','REVIEW', 'PUBLISHED''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()@IsInt({each: true})@ApiPropertyOptional({description: 'Array of ids of tags', example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'This is a title', description: 'this is the title of the blog post'})@IsString()@MinLength(4)@MaxLength(512)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsEnum, IsInt, IsISO8601, IsJSON, IsNotEmpty, IsOptional, IsString, IsUrl, Matches, MaxLength, MinLength, ValidateNested } from \"class-validator\";\nimport { postType } from \"../enums/postType.enum\";\nimport { postStatus } from \"../enums/status.enum\";\nimport { CreatePostMetaOptionsDto } from \"../../meta-options/dtos/create-post-meta-option.dtos\";\nimport { Type } from \"class-transformer\";\nimport { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\n\nexport class CreatePostDto {\n    @ApiProperty({\n        example: \"This is a title\",\n        description: \"this is the title of the blog post\"\n    })\n    @IsString()\n    @MinLength(4)\n    @MaxLength(512)\n    @IsNotEmpty()\n    title: string;\n\n    @IsEnum(postType)\n    @IsNotEmpty()\n    @ApiProperty({\n        enum: postType,\n        description: \"Possible values, 'POST', 'PAGE','STORY','SERIES'\",\n    })\n    postType: postType;\n    @IsString()\n    @IsOptional()\n    @ApiPropertyOptional({\n        description: \"This is the content of the post\",\n        example: \"the post content\"\n    })\n    content?: string;\n\n    @IsString()\n    @IsNotEmpty()\n    @ApiProperty({\n        description: \"For example - 'my-url'\",\n        example: \"my-blog-post\"\n    })\n    @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n        message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url'\n    })\n    @MaxLength(256)\n    slug: string;\n\n\n    @IsEnum(postStatus)\n    @IsNotEmpty()\n    @ApiProperty({\n        enum: postStatus,\n        description: \" Possible values, 'DRAFT', 'SCHEDULED','REVIEW', 'PUBLISHED'\"\n    })\n    status: postStatus;\n\n    @IsOptional()\n    @IsJSON()\n    @ApiPropertyOptional({\n        description: \"Serialize your JSON object else a validation error will be thrown\",\n        example: \"{\\r\\n \\\"@context\\\": \\\"https:\\/\\/schema.org\\\",\\r\\n \\\"@type\\\": \\\"Person\\\"\\r\\n}\"\n    })\n    schema?: string;\n\n\n    @IsOptional()\n    @IsUrl()\n    @MaxLength(1024)\n    @ApiPropertyOptional({\n        description: \"featured image for your blog post\",\n        example: \"http://localhost.com/images/image1.jpg\"\n    })\n    featuredImageUrl?: string;\n\n\n    @IsISO8601()\n    @IsOptional()\n    @ApiPropertyOptional({\n        description: \"The date on which the blog post is published\",\n        example: \"2024-03-16T07:46:32+0000\",\n    })\n    publishOn?: Date;\n\n\n    @IsOptional()\n    @IsArray()\n    @IsInt({\n        each: true\n    })\n    @ApiPropertyOptional({\n        description: \"Array of ids of tags\",\n        example: [1, 2],\n    })\n    tags?: number[];\n\n\n\n    @IsOptional()\n    @ApiPropertyOptional({\n        type: 'object',\n        required: false,\n        items: {\n            type: 'object',\n            properties: {\n                metaValue: {\n                    type: 'json',\n                    description: 'The metaValue is JSON string',\n                    example: '{\"sidebarEnabled\":true}'\n                }\n            }\n        }\n    })\n\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => CreatePostMetaOptionsDto)\n    metaOptions?: CreatePostMetaOptionsDto | null;\n\n    @IsInt()\n    @IsNotEmpty()\n    @ApiProperty({\n        type: 'integer',\n        required: true,\n        example: 1\n    })\n    authorId: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto.html":{"url":"classes/CreatePostMetaOptionsDto.html","title":"class - CreatePostMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/dtos/create-post-meta-option.dtos.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                metaValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/dtos/create-post-meta-option.dtos.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsJSON, IsNotEmpty, IsString } from \"class-validator\";\n\nexport class CreatePostMetaOptionsDto {\n    @IsNotEmpty()\n    @IsJSON()\n    metaValue: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagDto.html":{"url":"classes/CreateTagDto.html","title":"class - CreateTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/dtos/create-tag.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsUrl()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@MinLength(3)@IsNotEmpty()@MaxLength(256)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty({description: 'For example - 'my-url'', example: 'my-blog-post'})@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url'})@MaxLength(256)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsJSON, IsNotEmpty, IsOptional, IsString, IsUrl, Matches, MaxLength, MinLength } from \"class-validator\";\n\nexport class CreateTagDto {\n    @ApiProperty()\n    @IsString()\n    @MinLength(3)\n    @IsNotEmpty()\n    @MaxLength(256)\n    name: string;\n\n    @IsString()\n    @IsNotEmpty()\n    @ApiProperty({\n        description: \"For example - 'my-url'\",\n        example: \"my-blog-post\"\n    })\n    @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n        message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url'\n    })\n    @MaxLength(256)\n    slug: string;\n\n\n    @ApiPropertyOptional()\n    @IsOptional()\n    @IsString()\n    description?: string;\n\n    @ApiPropertyOptional()\n    @IsOptional()\n    @IsJSON()\n    schema?: string;\n\n    @ApiPropertyOptional()\n    @IsOptional()\n    @IsUrl()\n    @MaxLength(1024)\n    featuredImageUrl?: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsEmail()@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {message: 'Password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, one number, and one special character.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsOptional, IsString, Matches, MaxLength, MinLength } from \"class-validator\";\n\nexport class CreateUserDto {\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(3)\n    @MaxLength(96)\n    firstName: string;\n\n    @IsString()\n    @IsOptional()\n    @MinLength(3)\n    @MaxLength(96)\n    lastName?: string;\n\n    @IsString()\n    @IsNotEmpty()\n    @IsEmail()\n    @MaxLength(96)\n    email: string;\n\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(8)\n    @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {\n        message: 'Password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, one number, and one special character.'\n    })\n    password: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Ger user  with a specific id', example: 1234})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-param.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsInt, IsOptional } from \"class-validator\";\n\nexport class GetUsersParamDto {\n    @ApiPropertyOptional({\n        description: \"Ger user  with a specific id\",\n        example: 1234\n    })\n    @IsOptional()\n    @IsInt()\n    @Type(() => Number)\n    id?: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/MetaOption.html":{"url":"entities/MetaOption.html","title":"entity - MetaOption","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  MetaOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-option.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                metaValue\n                            \n                            \n                                    \n                                    \n                                post\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, post => post.metaOptions, {onDelete: 'CASCADE'})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:19\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from \"src/post/post.entity\";\nimport { Column, CreateDateColumn, Entity, JoinColumn, OneToOne, PrimaryGeneratedColumn, UpdateDateColumn } from \"typeorm\";\n\n@Entity()\nexport class MetaOption {\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column({\n        type: \"json\",\n        nullable: false\n    })\n    metaValue: string;\n\n    @CreateDateColumn()\n    createDate: Date\n\n    @UpdateDateColumn()\n    updateDate: Date;\n\n\n    @OneToOne(() => Post, (post) => post.metaOptions, {\n        onDelete: 'CASCADE'\n    })\n    @JoinColumn()\n    post: Post;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MetaOptionsController.html":{"url":"controllers/MetaOptionsController.html","title":"controller - MetaOptionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MetaOptionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-options.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                meta-options\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostMetaOptionDto: CreatePostMetaOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/meta-options/meta-options.controller.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostMetaOptionDto\n                                            \n                                                            CreatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { CreatePostMetaOptionsDto } from './dtos/create-post-meta-option.dtos';\nimport { MetaOptionsService } from './providers/meta-options.service';\n\n@Controller('meta-options')\nexport class MetaOptionsController {\n\n\n    constructor(private readonly metaOptionService: MetaOptionsService) { }\n    @Post()\n    public create(@Body() createPostMetaOptionDto: CreatePostMetaOptionsDto) {\n        return this.metaOptionService.create(createPostMetaOptionDto);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MetaOptionsModule.html":{"url":"modules/MetaOptionsModule.html","title":"module - MetaOptionsModule","body":"\n                   \n\n\n\n\n    Modules\n    MetaOptionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/meta-options/meta-options.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MetaOptionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MetaOptionsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MetaOptionsController } from './meta-options.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MetaOption } from './meta-option.entity';\nimport { MetaOptionsService } from './providers/meta-options.service';\n\n@Module({\n  controllers: [MetaOptionsController],\n  imports: [TypeOrmModule.forFeature([MetaOption])],\n  providers: [MetaOptionsService]\n})\nexport class MetaOptionsModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MetaOptionsService.html":{"url":"injectables/MetaOptionsService.html","title":"injectable - MetaOptionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MetaOptionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/providers/meta-options.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(metaOptionRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/meta-options/providers/meta-options.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        metaOptionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostMetaOptionsDto: CreatePostMetaOptionsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/meta-options/providers/meta-options.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostMetaOptionsDto\n                                            \n                                                            CreatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreatePostMetaOptionsDto } from '../dtos/create-post-meta-option.dtos';\nimport { Repository } from 'typeorm';\nimport { MetaOption } from '../meta-option.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class MetaOptionsService {\n\n    constructor(@InjectRepository(MetaOption) private readonly metaOptionRepository: Repository) { }\n\n    public async create(createPostMetaOptionsDto: CreatePostMetaOptionsDto) {\n        let metaOption = this.metaOptionRepository.create(createPostMetaOptionsDto);\n        return await this.metaOptionRepository.save(metaOption);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dtos/patch-post-dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The id of the post that needs to be updated'})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/patch-post-dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from \"@nestjs/swagger\";\nimport { IsInt, IsNotEmpty } from \"class-validator\";\nimport { CreatePostDto } from \"./create-post.dtos\";\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n    @ApiProperty({\n        description: \"The id of the post that needs to be updated\"\n    })\n    @IsInt()\n    @IsNotEmpty()\n    id: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \"@nestjs/mapped-types\";\nimport { CreateUserDto } from \"./create-user.dto\";\n\nexport class PatchUserDto extends PartialType(CreateUserDto) {\n   \n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                postType\n                            \n                            \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.posts, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MetaOption\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, metaOptions => metaOptions.post, {cascade: true, eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: postType, nullable: false, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: postStatus, nullable: false, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Tag[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, {eager: true})@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:18\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, JoinTable, ManyToMany, ManyToOne, OneToOne, PrimaryGeneratedColumn } from \"typeorm\";\nimport { CreatePostMetaOptionsDto } from \"../meta-options/dtos/create-post-meta-option.dtos\";\nimport { postType } from \"./enums/postType.enum\";\nimport { postStatus } from \"./enums/status.enum\";\nimport { MetaOption } from \"src/meta-options/meta-option.entity\";\nimport { User } from \"src/users/user.entity\";\nimport { Tag } from \"src/tags/tag.entity\";\n\n@Entity()\nexport class Post {\n    @PrimaryGeneratedColumn()\n    id: number;\n    @Column({\n        type: \"varchar\",\n        length: 512,\n        nullable: false\n    })\n    title: string;\n    @Column({\n        type: \"enum\",\n        enum: postType,\n        nullable: false,\n        default: postType.POST\n    })\n    postType: postType;\n\n    @Column({\n        type: \"varchar\",\n        length: 256,\n        nullable: false,\n        unique: true\n    })\n    slug: string;\n    @Column({\n        type: \"enum\",\n        enum: postStatus,\n        nullable: false,\n        default: postStatus.DRAFT\n    })\n    status: postStatus;\n\n    @Column({\n        type: \"text\",\n        nullable: true\n    })\n    content?: string;\n\n    @Column({\n        type: \"text\",\n        nullable: true\n    })\n    schema?: string;\n\n    @Column({\n        type: \"varchar\",\n        length: 1024,\n        nullable: true\n    })\n    featuredImageUrl?: string;\n\n    @Column({\n        type: \"timestamp\",\n    })\n    publishOn?: Date;\n\n\n\n\n    @OneToOne(() => MetaOption, (metaOptions) => metaOptions.post, {\n        cascade: true,\n        eager: true\n    })\n    //@JoinColumn()\n    metaOptions?: MetaOption;\n\n    @ManyToOne(() => User, (user) => user.posts, {\n        eager: true\n    })\n    author: User;\n\n\n    @ManyToMany(() => Tag, {\n        eager: true\n    })\n    @JoinTable()\n    tags?: Tag[];\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostController.html":{"url":"controllers/PostController.html","title":"controller - PostController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                post\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    Public\n                                deletePost\n                            \n                            \n                                    \n                                    Public\n                                getPost\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new blog post'})@ApiResponse({status: 201, description: 'you get a 201 response if your post is created successfully'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPost(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:userId?')\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Updates an existing blog post'})@ApiResponse({status: 200, description: 'A 200 response if the post is updated successfully'})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Param, ParseIntPipe, Patch, Post, Query } from '@nestjs/common';\nimport { PostService } from './services/post.service';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreatePostDto } from './dtos/create-post.dtos';\nimport { PatchPostDto } from './dtos/patch-post-dto';\n\n@Controller('post')\n@ApiTags('posts')\nexport class PostController {\n\n    constructor(private readonly postService: PostService) { }\n\n    @Get('/:userId?')\n    public getPost(@Param('userId') userId: string) {\n        return this.postService.findAll(userId)\n    }\n\n    @ApiOperation({\n        summary: \"Creates a new blog post\"\n    })\n    @ApiResponse({\n        status: 201,\n        description: \"you get a 201 response if your post is created successfully\"\n    })\n    @Post()\n    public createPost(@Body() createPostDto: CreatePostDto) {\n        return this.postService.createPost(createPostDto)\n    }\n    @ApiOperation({\n        summary: \"Updates an existing blog post\"\n    })\n    @ApiResponse({\n        status: 200,\n        description: \"A 200 response if the post is updated successfully\"\n    })\n    @Patch()\n    public updatePost(@Body() patchPostDto: PatchPostDto) {\n        console.log(patchPostDto)\n    }\n\n    @Delete()\n    public deletePost(@Query(\"id\", ParseIntPipe) id: number) {\n        return this.postService.delete(id)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostModule.html":{"url":"modules/PostModule.html","title":"module - PostModule","body":"\n                   \n\n\n\n\n    Modules\n    PostModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostModule\n\n\n\ncluster_PostModule_imports\n\n\n\ncluster_PostModule_providers\n\n\n\n\nTagsModule\n\nTagsModule\n\n\n\nPostModule\n\nPostModule\n\nPostModule -->\n\nTagsModule->PostModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostModule -->\n\nUsersModule->PostModule\n\n\n\n\n\nPostService\n\nPostService\n\nPostModule -->\n\nPostService->PostModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/post/post.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostController } from './post.controller';\nimport { PostService } from './services/post.service';\nimport { UsersModule } from 'src/users/users.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Post } from './post.entity';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { TagsModule } from 'src/tags/tags.module';\n\n@Module({\n  controllers: [PostController],\n  providers: [PostService],\n  imports: [UsersModule, TagsModule, TypeOrmModule.forFeature([Post, MetaOption])]\n})\nexport class PostModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostService.html":{"url":"injectables/PostService.html","title":"injectable - PostService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/services/post.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createPost\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, postRepository: Repository, metaOptionRepository: Repository, tagsService: TagsService)\n                    \n                \n                        \n                            \n                                Defined in src/post/services/post.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        metaOptionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tagsService\n                                                  \n                                                        \n                                                                        TagsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/services/post.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/services/post.service.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/services/post.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(patchPostDto: PatchPostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/services/post.service.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UserService } from 'src/users/providers/user.service';\nimport { CreatePostDto } from '../dtos/create-post.dtos';\nimport { Repository } from 'typeorm';\nimport { Post } from '../post.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { TagsService } from 'src/tags/providers/tags.service';\nimport { PatchPostDto } from '../dtos/patch-post-dto';\n@Injectable()\nexport class PostService {\n\n    constructor(private readonly userService: UserService,\n        @InjectRepository(Post) private readonly postRepository: Repository,\n\n        @InjectRepository(MetaOption) private readonly metaOptionRepository: Repository,\n\n        private readonly tagsService: TagsService) { }\n    public async findAll(userId: string) {\n        const user = await this.userService.findOneById(+userId);\n        let posts = await this.postRepository.find({\n            relations: {\n                metaOptions: true,\n                author: true,\n                tags: true\n            }\n        })\n        return posts\n    }\n\n    public async createPost(createPostDto: CreatePostDto) {\n        //let metaOptions = createPostDto.metaOptions ? this.metaOptionRepository.create(createPostDto.metaOptions) : null\n\n        let tags = await this.tagsService.findMultpleTags(createPostDto.tags)\n        let author = await this.userService.findOneById(createPostDto.authorId);\n        let post = this.postRepository.create({\n            ...createPostDto,\n            author: author,\n            tags: tags\n        })\n        /*\n        if (metaOptions) {\n                    await this.metaOptionRepository.save(metaOptions);\n                }\n                if (metaOptions) {\n                    post.metaOptions = metaOptions\n                }*/\n\n        return await this.postRepository.save(post)\n    }\n\n    public async delete(id: number) {\n\n        let post = await this.postRepository.findOneBy({ id: id })\n\n        await this.postRepository.delete(id)\n\n        /*await this.metaOptionRepository.delete(post.metaOptions.id)\n*/\n        /*let inversePost = await this.metaOptionRepository.find({\n            where: {\n                id: post.metaOptions.id\n            },\n            relations: {\n                post: true\n            }\n        })*/\n        return { deleted: true, id }\n    }\n\n\n    public async update(patchPostDto: PatchPostDto) {\n        let atgs = await this.tagsService.findMultpleTags(patchPostDto.tags);\n\n        let post = await this.postRepository.findOneBy({ id: patchPostDto.id })\n        \n        post.title = patchPostDto.title ?? post.title;\n        post.content = patchPostDto.content ?? post.content\n        post.status = patchPostDto.status ?? post.status\n        post.slug = patchPostDto.slug ?? post.slug\n        post.\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Tag.html":{"url":"entities/Tag.html","title":"entity - Tag","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Tag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tag.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                deleteAt\n                            \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:47\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, CreateDateColumn, DeleteDateColumn, Entity, PrimaryGeneratedColumn, UpdateDateColumn } from \"typeorm\";\n\n@Entity()\nexport class Tag {\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column({\n        type: \"varchar\",\n        length: 256,\n        nullable: false,\n        unique: true\n    })\n    name: string;\n\n    @Column({\n        type: \"varchar\",\n        length: 256,\n        nullable: false,\n        unique: true\n    })\n    slug: string;\n\n    @Column({\n        type: \"text\",\n        nullable: true,\n    })\n    description?: string;\n\n    @Column({\n        type: \"text\",\n        nullable: true,\n    })\n    schema?: string;\n\n    @Column({\n        type: \"varchar\",\n        length: 1024,\n        nullable: true,\n    })\n    featuredImageUrl: string;\n\n    @CreateDateColumn()\n    createDate: Date;\n\n    @UpdateDateColumn()\n    updateDate: Date;\n\n    @DeleteDateColumn()\n    deleteAt: Date;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagsController.html":{"url":"controllers/TagsController.html","title":"controller - TagsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tags\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTagDto: CreateTagDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTagDto\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { CreateTagDto } from './dtos/create-tag.dto';\nimport { TagsService } from './providers/tags.service';\n\n@Controller('tags')\nexport class TagsController {\n\n    constructor(private readonly tagsService: TagsService) { }\n    @Post()\n    public create(@Body() createTagDto: CreateTagDto) {\n        return this.tagsService.createTags(createTagDto)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagsModule.html":{"url":"modules/TagsModule.html","title":"module - TagsModule","body":"\n                   \n\n\n\n\n    Modules\n    TagsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\n\nTagsService \n\nTagsService \n\n\n\nTagsModule\n\nTagsModule\n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tags/tags.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TagsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TagsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TagsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TagsController } from './tags.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Tag } from './tag.entity';\nimport { TagsService } from './providers/tags.service';\n\n@Module({\n  controllers: [TagsController],\n  imports: [TypeOrmModule.forFeature([Tag])],\n  providers: [TagsService],\n  exports: [TagsService]\n})\nexport class TagsModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TagsService.html":{"url":"injectables/TagsService.html","title":"injectable - TagsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TagsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/providers/tags.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createTags\n                            \n                            \n                                    Public\n                                    Async\n                                findMultpleTags\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/tags/providers/tags.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tagsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTags(createTagDto: CreateTagDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTagDto\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findMultpleTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    findMultpleTags(tags: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tags\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateTagDto } from '../dtos/create-tag.dto';\nimport { In, Repository } from 'typeorm';\nimport { Tag } from '../tag.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class TagsService {\n\n    constructor(@InjectRepository(Tag) private readonly tagsRepository: Repository) { }\n\n    public async createTags(createTagDto: CreateTagDto) {\n        let tag = this.tagsRepository.create(createTagDto)\n\n        return await this.tagsRepository.save(tag)\n    }\n\n    public async findMultpleTags(tags: number[]) {\n        let result = await this.tagsRepository.find({\n            where: {\n                id: In(tags)\n            }\n        })\n\n        return result;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                posts\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, post => post.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:37\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from \"src/post/post.entity\";\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from \"typeorm\";\n\n@Entity()\nexport class User {\n    @PrimaryGeneratedColumn()\n    id: number;\n    @Column({\n        type: \"varchar\",\n        length: 96,\n        nullable: false\n    })\n    firstName: string;\n    @Column(\n        {\n            type: \"varchar\",\n            length: 96,\n            nullable: true\n        }\n    )\n    lastName: string;\n    @Column({\n        type: \"varchar\",\n        length: 96,\n        nullable: false,\n        unique: true\n    })\n    email: string;\n    @Column({\n        type: \"varchar\",\n        length: 96,\n        nullable: false\n    })\n    password: string;\n\n    @OneToMany(() => Post, (post) => post.author)\n    posts: Post[]\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/user.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to connect to Users table and perform business operations\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/user.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user.service.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUserParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user.service.ts:20\n                        \n                    \n\n\n            \n                \n                        The method to get all the users from the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user.service.ts:38\n                        \n                    \n\n\n            \n                \n                        Find a single user using the ID of user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from \"@nestjs/common\";\nimport { GetUsersParamDto } from \"../dtos/get-users-param.dto\";\nimport { AuthService } from \"src/auth/service/auth.service\";\nimport { Repository } from \"typeorm\";\nimport { User } from \"../user.entity\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { CreateUserDto } from \"../dtos/create-user.dto\";\n\n/**\n * Class to connect to Users table and perform business operations\n */\n@Injectable()\nexport class UserService {\n\n    constructor(@Inject(forwardRef(() => AuthService)) private readonly authService: AuthService, @InjectRepository(User) private userRepository: Repository) { }\n\n    /**\n     * The method to get all the users from the database\n     */\n    public findAll(getUserParamDto: GetUsersParamDto, limit: number, page: number) {\n        const isAUth = this.authService.isAUth();\n        console.log(isAUth)\n        return [\n            {\n                firstName: 'John',\n                email: 'john@doe.com'\n            },\n            {\n                firstName: 'Alice',\n                email: 'alice@doe.com'\n            }\n        ]\n    }\n    /**\n     * Find a single user using the ID of user\n     */\n\n    public async findOneById(id: number) {\n        return await this.userRepository.findOneBy({\n            id: id,\n        })\n    }\n\n    public async createUser(createUserDto: CreateUserDto) {\n        const existingUser = await this.userRepository.findOne({\n            where: {\n                email: createUserDto.email\n            }\n        })\n        let newUser = this.userRepository.create(createUserDto);\n        newUser = await this.userRepository.save(newUser)\n        return newUser\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDTO: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDTO\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUsersParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/:optional?')@ApiOperation({summary: 'Fetches a list of registered users on the application'})@ApiResponse({status: 200, description: 'Users fetched successfully based on the query'})@ApiQuery({name: 'limit', type: 'number', required: false, description: 'the number of entries returned per query', example: 10})@ApiQuery({name: 'page', type: 'number', required: false, description: 'the position of the page number that you want the API to return ', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUsersParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, DefaultValuePipe, Get, Header, Headers, Ip, Param, ParseIntPipe, Patch, Post, Query, ValidationPipe } from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UserService } from './providers/user.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\n\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController {\n\n    constructor(private readonly userService: UserService) { }\n    @Get('/:id/:optional?')\n    @ApiOperation({\n        summary: \"Fetches a list of registered users on the application\",\n    })\n    @ApiResponse({\n        status: 200,\n        description: \"Users fetched successfully based on the query\"\n    })\n    @ApiQuery({\n        name: 'limit',\n        type: \"number\",\n        required: false,\n        description: \"the number of entries returned per query\",\n        example: 10\n    })\n    @ApiQuery({\n        name: 'page',\n        type: \"number\",\n        required: false,\n        description: \"the position of the page number that you want the API to return \",\n        example: 1\n    })\n    public getUsers(/*@Param('id', ParseIntPipe) id: number | undefined*/ @Param() getUsersParamDto: GetUsersParamDto,\n        @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n        @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number\n    ) {\n        return this.userService.findAll(getUsersParamDto, limit, page)\n    }\n\n    @Post()\n    public createUsers(@Body() createUserDTO: CreateUserDto,\n    ) {\n        return this.userService.createUser(createUserDTO);\n    }\n\n    @Patch()\n    public patchUser(@Body() patchUserDto: PatchUserDto) {\n        return patchUserDto\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUsersModule\n\nUsersModule\n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UserService } from './providers/user.service';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './user.entity';\n\n@Module({\n    controllers: [UsersController],\n    providers: [UserService],\n    exports: [UserService],\n    imports: [forwardRef(() => AuthModule), TypeOrmModule.forFeature([User])]\n})\nexport class UsersModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/service/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/dtos/create-post-meta-option.dtos.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/meta-option.entity.ts\n            \n            entity\n            MetaOption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/meta-options.controller.ts\n            \n            controller\n            MetaOptionsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/providers/meta-options.service.ts\n            \n            injectable\n            MetaOptionsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/post/dtos/create-post.dtos.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/post/dtos/patch-post-dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/post/post.controller.ts\n            \n            controller\n            PostController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/post/post.entity.ts\n            \n            entity\n            Post\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/post/services/post.service.ts\n            \n            injectable\n            PostService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/dtos/create-tag.dto.ts\n            \n            class\n            CreateTagDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/providers/tags.service.ts\n            \n            injectable\n            TagsService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/tags/tag.entity.ts\n            \n            entity\n            Tag\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tags/tags.controller.ts\n            \n            controller\n            TagsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/providers/user.service.ts\n            \n            injectable\n            UserService\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.23\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.3.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            pg : ^8.11.5\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            postStatus   (src/.../status.enum.ts)\n                        \n                        \n                            postType   (src/.../postType.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/post/enums/status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : DRAFT\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : SCHEDULED\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : REVIEW\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : PUBLISHED\n                            \n                        \n            \n        \n\n    src/post/enums/postType.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : POST\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : PAGE\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : STORY\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : SERIES\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MetaOptionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\ncluster_PostModule\n\n\n\ncluster_PostModule_providers\n\n\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPostModule\n\nPostModule\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostModule -->\n\nTagsModule->PostModule\n\n\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nTagsService \n\nTagsService \n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostModule -->\n\nUsersModule->PostModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\nPostService\n\nPostService\n\nPostModule -->\n\nPostService->PostModule\n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
