var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/guards/AccessTokenGuard.html",[0,3.114,1,2.34]],["body/guards/AccessTokenGuard.html",[1,2.903,2,2.708,3,0.12,4,0.106,5,0.106,6,4.51,7,3.005,8,0.25,9,1.094,10,1.77,11,5.765,12,2.244,13,4.932,14,1.104,15,2.708,16,4.605,17,3.841,18,3.92,19,0.611,20,3.456,21,1.323,22,0.014,23,1.141,24,0.469,25,0.942,26,3.005,27,4.51,28,3.456,29,3.547,30,1.054,31,2.903,32,4.932,33,4.31,34,3.456,35,1.422,36,2.364,37,0.331,38,1.737,39,0.524,40,3.595,41,0.481,42,1.515,43,1.826,44,2.708,45,2.486,46,1.924,47,2.308,48,2.486,49,2.708,50,3.005,51,0.12,52,0.049,53,2.308,54,1.452,55,1.22,56,2.308,57,2.527,58,3.456,59,5.194,60,3.456,61,2.072,62,1.698,63,1.515,64,4.288,65,1.146,66,3.456,67,3.456,68,3.005,69,1.515,70,1.452,71,1.054,72,1.737,73,3.456,74,3.456,75,3.456,76,3.456,77,3.005,78,3.005,79,2.708,80,3.456,81,3.456,82,3.456,83,0.008,84,0.008]],["title/interfaces/ActiveUserData.html",[85,2.34,86,1.998]],["body/interfaces/ActiveUserData.html",[3,0.191,4,0.17,5,0.17,8,0.399,22,0.013,24,0.549,35,1.794,51,0.191,83,0.011,84,0.011,85,3.246,86,3.379,87,3.966,88,3.683,89,1.994,90,4.795,91,1.854,92,3.794,93,5.566,94,2.404,95,2.317,96,3.683]],["title/controllers/AppController.html",[97,1.479,98,2.859]],["body/controllers/AppController.html",[3,0.193,4,0.172,5,0.172,22,0.014,35,1.38,37,0.315,41,0.777,51,0.193,52,0.079,54,2.343,55,1.38,71,1.193,83,0.012,84,0.012,97,2.518,98,4.868,99,2.159,100,4.85,101,4.556,102,4.85,103,4.85,104,5.579]],["title/modules/AppModule.html",[105,1.369,106,2.859]],["body/modules/AppModule.html",[1,2.422,3,0.094,4,0.083,5,0.083,22,0.014,24,0.221,37,0.37,38,1.359,41,0.377,42,1.185,43,1.428,46,1.505,51,0.094,52,0.038,57,1.09,72,1.359,83,0.007,84,0.007,89,1.221,96,1.806,98,3.583,99,1.593,101,3.945,102,2.351,105,1.715,106,5.674,107,1.239,108,1.239,109,1.359,110,1.359,111,1.239,112,2.504,113,1.359,114,2.351,115,2.351,116,2.351,117,3.945,118,4.215,119,4.215,120,3.945,121,4.215,122,4.33,123,4.215,124,3.714,125,2.068,126,1.359,127,1.296,128,2.118,129,2.932,130,2.704,131,2.704,132,2.704,133,1.592,134,2.704,135,2.704,136,1.691,137,1.006,138,2.704,139,2.704,140,1.359,141,1.505,142,2.704,143,1.428,144,2.704,145,3.224,146,3.719,147,2.704,148,4.115,149,2.704,150,4.115,151,2.704,152,4.115,153,2.704,154,2.118,155,2.704,156,3.578,157,4.115,158,1.806,159,2.704,160,1.945,161,2.96,162,2.704,163,1.592,164,2.704,165,2.118,166,2.96,167,2.704,168,2.118,169,2.704,170,2.704,171,2.704,172,3.903,173,2.351,174,2.704,175,2.704,176,4.115,177,2.704,178,2.704,179,2.704,180,2.704,181,2.704,182,2.704,183,2.704,184,1.592,185,2.704,186,2.704,187,2.704,188,2.704,189,2.704,190,2.704,191,2.704,192,2.704,193,1.691,194,2.704,195,2.704,196,2.704,197,2.704,198,2.118,199,2.118,200,3.578,201,3.578]],["title/injectables/AppService.html",[39,0.422,101,2.485]],["body/injectables/AppService.html",[3,0.192,4,0.171,5,0.171,8,0.402,9,1.498,19,0.59,22,0.014,30,1.188,35,1.67,37,0.259,39,0.717,41,0.774,51,0.192,52,0.078,71,1.188,83,0.012,84,0.012,101,4.222,103,6.58,202,1.589,203,4.832,204,5.557,205,5.557,206,5.557,207,4.354]],["title/controllers/AuthController.html",[97,1.479,208,2.859]],["body/controllers/AuthController.html",[3,0.141,4,0.125,5,0.125,8,0.294,9,1.225,10,2.233,19,0.587,21,1.27,22,0.014,23,1.096,24,0.512,25,0.905,30,1.18,37,0.338,41,0.566,51,0.141,52,0.057,54,1.708,55,1.006,71,1.18,83,0.009,84,0.009,97,1.512,99,1.573,208,3.971,209,3.534,210,2.393,211,3.452,212,1.93,213,3.971,214,4.326,215,3.534,216,4.536,217,1.579,218,5.522,219,4.065,220,4.065,221,1.976,222,3.185,223,4.536,224,5.522,225,4.065,226,4.065,227,2.393,228,4.065,229,3.534,230,1.251,231,3.691,232,3.534,233,3.185,234,4.065,235,2.715,236,3.534,237,3.185,238,2.715,239,4.065,240,5.522,241,4.801,242,4.065,243,4.065,244,4.065,245,4.065,246,4.065]],["title/modules/AuthModule.html",[105,1.369,117,2.485]],["body/modules/AuthModule.html",[3,0.124,4,0.11,5,0.11,22,0.014,37,0.364,41,0.498,42,1.567,43,1.888,46,1.99,47,2.388,51,0.124,52,0.05,83,0.009,84,0.009,99,1.955,105,2.017,107,1.638,108,1.638,109,1.797,110,1.797,111,1.638,112,2.944,113,2.944,117,4.946,124,2.974,125,2.539,126,1.797,127,1.714,129,2.104,145,2.801,154,2.801,198,2.801,199,2.801,200,3.109,201,3.109,208,4.213,231,4.534,232,3.109,247,3.109,248,3.109,249,3.109,250,4.074,251,3.682,252,4.358,253,4.358,254,4.358,255,3.575,256,4.213,257,2.812,258,3.575,259,3.109,260,3.575,261,3.633,262,3.575,263,3.109,264,3.109,265,3.109,266,3.374,267,3.109,268,3.575,269,3.575,270,3.575,271,3.109]],["title/injectables/AuthService.html",[39,0.422,231,2.34]],["body/injectables/AuthService.html",[3,0.133,4,0.118,5,0.118,8,0.279,9,1.18,10,2.196,12,2.181,14,1.23,19,0.647,21,1.402,22,0.014,23,1.21,24,0.498,25,0.999,30,1.137,37,0.341,38,1.935,39,0.565,41,0.536,51,0.133,52,0.054,55,1.508,65,1.764,71,1.137,83,0.009,84,0.009,202,1.101,212,1.898,213,3.826,214,4.168,215,4.625,216,4.314,221,1.904,222,4.168,223,4.314,231,3.131,233,3.016,237,3.016,238,2.571,251,2.033,253,4.111,254,4.573,257,2.143,263,3.347,264,3.347,265,3.347,266,3.553,267,3.347,272,3.347,273,3.016,274,3.351,275,6.096,276,3.85,277,3.85,278,3.85,279,2.407,280,3.85,281,3.85,282,3.85]],["title/guards/AuthenticationGuard.html",[0,3.114,161,2.859]],["body/guards/AuthenticationGuard.html",[1,4.227,2,4.608,3,0.125,4,0.111,5,0.111,8,0.261,9,1.126,10,1.81,11,6.375,12,2.41,14,1.15,19,0.539,21,1.168,22,0.014,23,1.008,24,0.48,25,0.832,26,3.132,27,4.594,29,3.652,30,0.77,31,2.989,37,0.326,39,0.539,40,3.175,41,0.502,44,2.822,45,2.59,50,3.132,51,0.125,52,0.051,53,2.406,54,1.513,55,1.728,57,2.714,61,1.513,62,1.24,65,1.194,70,2.471,71,0.77,72,2.552,83,0.009,84,0.009,91,0.993,158,2.406,160,2.59,161,3.652,235,2.406,236,3.132,283,3.132,284,5.078,285,5.078,286,5.078,287,3.602,288,6.988,289,3.602,290,3.602,291,3.602,292,2.822,293,5.078,294,3.602,295,3.602,296,3.602,297,3.132,298,3.602,299,3.602,300,3.602,301,3.602,302,3.602,303,3.602,304,3.602,305,3.602,306,3.602,307,3.602,308,3.602]],["title/injectables/BcryptProvider.html",[39,0.422,261,2.859]],["body/injectables/BcryptProvider.html",[3,0.151,4,0.134,5,0.134,8,0.316,9,1.283,10,1.999,19,0.615,21,1.331,22,0.014,23,1.149,24,0.472,25,0.948,30,1.237,31,4.073,35,1.921,37,0.303,39,0.615,41,0.607,51,0.151,52,0.061,53,2.91,57,1.756,65,1.445,71,1.237,83,0.01,84,0.01,202,1.246,212,1.727,250,3.22,261,4.161,309,3.789,310,5.03,311,5.03,312,5.03,313,6.437,314,6.016,315,4.358,316,3.617,317,5.03,318,4.358,319,3.789,320,5.03,321,5.786,322,4.358,323,4.358,324,4.358]],["title/injectables/CreateGoogleUserProvider.html",[39,0.422,325,2.485]],["body/injectables/CreateGoogleUserProvider.html",[3,0.147,4,0.13,5,0.13,8,0.307,9,1.26,10,1.973,12,1.518,14,1.815,19,0.604,21,1.307,22,0.014,23,1.128,24,0.464,25,0.932,30,0.907,37,0.333,39,0.604,41,0.591,51,0.147,52,0.06,57,1.71,61,1.783,62,1.957,63,1.86,65,1.407,69,1.86,70,1.783,71,0.907,83,0.01,84,0.01,89,1.901,137,1.579,202,1.214,212,1.705,221,1.518,325,3.554,326,4.61,327,3.568,328,3.052,329,4.942,330,3.324,331,3.136,332,4.243,333,4.088,334,4.942,335,4.768,336,4.243,337,3.052,338,1.518,339,2.498,340,2.133,341,3.689,342,3.689,343,2.834,344,4.243,345,4.243,346,3.324,347,1.579,348,1.944]],["title/classes/CreateManyUsersDTO.html",[52,0.056,349,2.485]],["body/classes/CreateManyUsersDTO.html",[3,0.164,4,0.146,5,0.146,8,0.343,19,0.504,22,0.014,24,0.604,37,0.333,51,0.164,52,0.095,72,3.401,83,0.01,84,0.01,89,1.407,91,1.686,217,1.356,348,2.172,349,3.823,350,1.835,351,4.79,352,4.084,353,3.41,354,4.52,355,3.776,356,4.742,357,5.316,358,4.79,359,5.316,360,4.742,361,4.122,362,4.742,363,5.316,364,3.229,365,5.316,366,1.992,367,2.964,368,2.964,369,4.397,370,2.273,371,4.122]],["title/classes/CreatePostDto.html",[52,0.056,372,2.34]],["body/classes/CreatePostDto.html",[3,0.072,4,0.064,5,0.064,8,0.151,19,0.697,22,0.014,24,0.599,25,1.119,29,2.416,35,1.658,36,1,37,0.264,51,0.072,52,0.059,70,1.411,72,2.119,83,0.006,84,0.006,91,1.163,94,1.398,140,1.688,217,1.875,230,2.136,347,2.581,350,0.808,357,2.921,358,3.303,359,2.921,361,1.814,363,2.921,364,2.989,365,2.921,366,0.877,368,1.305,369,4.07,370,1,371,2.921,372,1.977,373,5.828,374,1.814,375,4.662,376,3.032,377,3.032,378,4.849,379,3.666,380,3.032,381,3.538,382,2.816,383,3.311,384,5.174,385,2.087,386,4.936,387,2.087,388,2.087,389,3.359,390,2.632,391,4.849,392,3.359,393,2.087,394,2.844,395,2.921,396,2.087,397,5.297,398,1.87,399,2.087,400,2.087,401,2.087,402,4.201,403,4.832,404,3.359,405,2.087,406,2.844,407,2.087,408,4.201,409,3.359,410,3.359,411,3.359,412,2.087,413,2.087,414,3.359,415,4.201,416,3.359,417,3.359,418,2.087,419,2.087,420,2.087,421,1.814,422,3.666,423,1.814,424,4.201,425,3.786,426,2.632,427,2.921,428,2.921,429,2.921,430,2.921,431,2.921,432,1.814,433,2.087,434,4.15,435,2.087,436,2.921,437,3.359,438,2.087,439,2.087,440,2.087,441,2.632,442,2.087,443,2.087,444,2.087,445,2.087,446,2.087,447,3.303,448,3.359,449,2.632,450,3.643,451,2.844,452,2.921,453,1.635,454,1.635,455,1.635,456,1.814,457,1.814,458,1.501,459,1.501,460,4.662,461,2.087,462,2.087,463,2.087,464,2.632,465,1.814,466,1.814,467,2.087,468,2.087,469,2.087,470,2.087,471,1.814,472,2.244,473,1.814,474,2.632,475,2.087,476,2.087,477,2.087]],["title/classes/CreatePostMetaOptionsDto.html",[52,0.056,394,2.34]],["body/classes/CreatePostMetaOptionsDto.html",[3,0.187,4,0.166,5,0.166,8,0.39,19,0.573,22,0.014,24,0.44,35,1.64,37,0.251,51,0.187,52,0.093,83,0.011,84,0.011,91,1.828,140,3.332,217,1.542,230,2.041,350,2.087,364,3.502,366,2.265,394,3.903,449,5.194,451,3.174,458,4.768,474,5.625,478,3.502,479,4.688,480,5.392,481,5.392]],["title/injectables/CreatePostProvider.html",[39,0.422,163,2.34]],["body/injectables/CreatePostProvider.html",[3,0.113,4,0.101,5,0.101,8,0.237,9,1.053,10,1.718,12,1.997,14,1.516,19,0.504,21,1.092,22,0.014,23,0.942,24,0.387,25,0.778,30,0.701,36,2.275,37,0.333,39,0.504,41,0.456,51,0.113,52,0.046,55,1.38,61,2.344,62,1.922,63,2.081,65,2.029,69,2.081,70,1.994,71,0.701,83,0.008,84,0.008,86,3.075,88,2.189,89,1.815,137,1.219,143,3.689,163,2.794,202,0.937,212,1.484,221,1.173,230,1.718,274,3.199,279,2.049,331,2.803,337,2.357,338,1.173,340,1.647,346,3.719,347,1.219,372,3.985,377,4.4,381,2.189,383,3.825,395,2.849,441,2.567,482,4.852,483,2.849,484,3.719,485,3.277,486,3.277,487,4.127,488,4.127,489,3.277,490,2.189,491,1.571,492,2.357,493,2.567,494,2.849,495,2.049,496,2.849,497,3.277,498,3.277,499,4.087,500,3.277,501,3.277,502,3.277,503,2.849,504,3.277,505,3.277,506,1.824,507,3.277,508,3.277,509,2.849,510,2.849,511,2.567,512,2.357,513,3.277,514,3.277]],["title/classes/CreateTagDto.html",[52,0.056,515,2.655]],["body/classes/CreateTagDto.html",[3,0.128,4,0.113,5,0.113,8,0.267,19,0.721,22,0.014,23,1.182,24,0.554,25,1.154,35,1.878,37,0.24,51,0.128,52,0.073,83,0.009,84,0.009,91,1.423,217,1.942,230,1.134,347,2.4,350,1.426,364,3.145,366,1.548,369,4.282,370,1.766,376,4.282,380,4.282,381,4.536,386,4.701,391,4.042,421,3.203,422,5.177,423,3.203,424,5.609,425,5.054,426,4.042,427,4.486,428,4.486,429,4.486,430,4.486,431,4.486,432,3.203,449,4.042,450,3.797,451,3.797,452,4.486,453,2.886,454,2.886,455,2.886,460,5.054,465,3.203,466,4.486,471,3.203,515,3.446,516,6.12,517,3.203,518,3.684,519,3.684,520,3.684,521,3.684,522,3.684,523,3.684,524,3.684,525,3.684,526,3.684,527,3.203]],["title/classes/CreateUserDto.html",[52,0.056,355,2.1]],["body/classes/CreateUserDto.html",[3,0.137,4,0.122,5,0.122,8,0.287,19,0.707,22,0.014,24,0.543,25,0.89,35,1.857,37,0.185,51,0.137,52,0.076,83,0.009,84,0.009,91,1.497,92,3.112,94,1.8,193,4.36,217,1.904,350,1.535,351,5.464,353,2.852,355,2.868,364,3.517,366,1.666,426,4.253,450,3.196,451,4.105,453,3.107,454,3.107,455,3.107,527,4.72,528,4.135,529,4.453,530,3.966,531,3.966,532,3.966,533,3.966,534,3.966,535,3.966,536,3.966,537,6.658,538,5.429,539,5.429,540,4.72,541,5.429,542,5.429,543,5.429,544,4.694,545,5.429,546,6.658,547,5.429,548,5.429,549,5.429,550,3.966,551,4.72,552,6.191,553,3.966,554,3.966]],["title/injectables/CreateUserProvider.html",[39,0.422,555,2.485]],["body/injectables/CreateUserProvider.html",[3,0.116,4,0.103,5,0.103,8,0.242,9,1.067,10,1.735,12,1.721,14,1.536,19,0.511,21,1.106,22,0.014,23,0.955,24,0.393,25,0.788,30,0.713,33,3.007,36,2.305,37,0.318,38,1.677,39,0.511,41,0.465,51,0.116,52,0.047,55,1.19,61,2.592,62,2.125,63,2.705,65,1.87,69,2.108,70,2.369,71,0.713,83,0.008,84,0.008,89,1.427,92,2.417,96,3.212,137,1.242,193,2.086,202,0.954,212,1.5,221,1.194,250,4.001,257,1.858,326,4.055,328,2.4,330,2.615,331,2.826,333,3.459,338,1.194,339,1.964,340,1.677,343,2.229,347,1.789,355,3.599,367,2.086,490,2.229,491,1.6,555,3.525,556,4.182,557,3.337,558,4.182,559,3.337,560,1.964,561,3.337,562,2.229,563,5.639,564,3.337,565,3.337,566,3.768,567,3.768,568,4.182,569,4.055,570,3.768,571,2.902,572,2.615,573,2.902,574,3.337,575,2.615,576,4.418,577,3.337,578,3.337,579,3.337,580,2.615,581,3.337,582,2.902,583,2.615,584,3.337,585,3.337,586,3.337,587,3.337,588,2.902,589,2.4,590,3.337,591,3.337]],["title/injectables/DataResponseInterceptor.html",[39,0.422,166,2.859]],["body/injectables/DataResponseInterceptor.html",[3,0.156,4,0.139,5,0.139,8,0.326,9,1.312,14,1.439,19,0.628,21,1.361,22,0.014,23,1.174,24,0.483,25,0.97,27,5.043,29,3.241,30,0.963,37,0.308,39,0.628,41,0.627,42,1.975,44,5.173,45,3.241,51,0.156,52,0.063,53,3.01,54,1.893,55,1.115,71,0.963,83,0.01,84,0.01,146,4.991,166,4.254,168,5.173,202,1.289,316,3.698,592,5.741,593,3.918,594,5.915,595,3.918,596,4.506,597,5.915,598,5.173,599,7.012,600,4.506,601,5.915,602,4.506,603,4.506,604,4.506,605,4.506,606,4.506]],["title/injectables/FindOneByGoogleIdProvider.html",[39,0.422,607,2.485]],["body/injectables/FindOneByGoogleIdProvider.html",[3,0.157,4,0.139,5,0.139,8,0.327,9,1.314,10,2.035,12,1.617,14,1.893,19,0.63,21,1.363,22,0.014,23,1.177,24,0.484,25,0.972,30,0.966,35,1.636,37,0.327,39,0.63,41,0.629,51,0.157,52,0.064,55,1.118,71,0.966,83,0.01,84,0.01,89,1.341,137,1.682,202,1.293,212,1.759,221,1.617,327,3.681,330,3.541,331,3.215,333,4.263,338,1.617,339,2.661,340,2.272,343,3.019,544,4.135,607,3.706,608,5.181,609,3.93,610,5.154,611,4.52,612,5.154,613,4.52,614,4.417,615,3.93]],["title/injectables/FindOneUserByEmailProvider.html",[39,0.422,616,2.485]],["body/injectables/FindOneUserByEmailProvider.html",[3,0.142,4,0.126,5,0.126,8,0.296,9,1.229,10,1.936,12,1.463,14,1.77,19,0.589,21,1.275,22,0.014,23,1.1,24,0.452,25,0.909,30,0.874,35,1.556,36,2.657,37,0.314,39,0.589,40,2.556,41,0.569,51,0.142,52,0.058,55,1.011,61,2.329,62,1.909,63,1.792,65,1.355,69,1.792,70,1.717,71,0.874,83,0.009,84,0.009,89,2.299,92,3.161,137,1.521,202,1.169,212,1.673,221,1.463,331,3.089,338,1.463,339,2.406,340,2.055,343,2.73,347,1.521,544,3.932,560,2.406,608,4.927,616,3.465,617,3.554,618,4.819,619,4.088,620,4.088,621,5.543,622,4.819,623,4.088,624,4.088,625,3.203,626,4.088,627,4.088,628,3.203]],["title/injectables/GenerateTokensProvider.html",[39,0.422,251,2.1]],["body/injectables/GenerateTokensProvider.html",[3,0.123,4,0.109,5,0.109,8,0.257,9,1.114,10,2.14,12,1.798,14,1.605,16,4.776,17,3.357,18,3.967,19,0.62,21,1.46,22,0.014,23,1.158,24,0.518,25,0.956,30,1.074,37,0.324,38,1.784,39,0.534,41,0.494,42,1.556,43,1.875,46,1.975,47,2.37,51,0.123,52,0.05,55,1.243,56,2.37,57,1.43,64,5.517,65,1.666,71,1.074,83,0.009,84,0.009,86,1.784,89,2.063,92,1.784,93,2.552,94,2.306,202,1.015,212,1.85,213,3.614,221,1.798,251,2.654,495,2.219,629,4.971,630,2.78,631,5.026,632,5.026,633,3.549,634,3.549,635,5.026,636,3.549,637,5.026,638,6.346,639,4.971,640,3.549,641,3.937,642,3.549,643,3.086,644,2.78,645,3.549,646,3.086,647,3.086,648,3.086,649,3.086,650,3.086,651,3.086,652,5.026,653,3.549,654,3.549,655,3.549,656,3.549,657,3.549,658,3.549]],["title/classes/GetPostBaseDto.html",[52,0.056,659,2.859]],["body/classes/GetPostBaseDto.html",[3,0.168,4,0.149,5,0.149,8,0.351,19,0.659,22,0.014,24,0.507,25,1.182,37,0.319,51,0.168,52,0.096,83,0.011,84,0.011,91,1.711,217,1.775,350,1.878,366,2.038,370,2.326,406,4.245,450,4.027,659,4.463,660,5.36,661,3.801,662,5.949,663,5.949,664,6.206,665,4.852,666,4.852,667,4.219,668,5.949,669,3.88,670,3.49,671,3.801,672,3.034,673,3.49,674,4.219]],["title/classes/GetPostDto.html",[52,0.056,672,2.485]],["body/classes/GetPostDto.html",[3,0.184,4,0.163,5,0.163,22,0.014,37,0.332,51,0.184,52,0.1,83,0.011,84,0.011,350,2.057,366,2.232,370,2.547,406,3.867,450,4.198,659,3.821,660,4.163,661,4.163,662,4.62,663,4.62,667,4.62,668,6.202,669,4.459,670,3.821,671,4.163,672,4.108,673,4.725,674,5.713]],["title/classes/GetUsersParamDto.html",[52,0.056,675,2.655]],["body/classes/GetUsersParamDto.html",[3,0.17,4,0.151,5,0.151,8,0.356,19,0.522,22,0.014,24,0.562,25,1.026,37,0.321,51,0.17,52,0.097,83,0.011,84,0.011,89,1.857,91,1.726,94,2.283,95,3.144,217,1.407,347,1.83,350,1.904,354,4.18,366,2.066,368,3.075,370,2.357,386,4.18,447,4.904,450,3.684,460,4.904,675,4.18,676,5.442,677,4.276,678,4.918,679,6.259,680,6.259,681,4.918,682,4.918,683,4.918]],["title/controllers/GoogleAuthenticationController.html",[97,1.479,256,2.859]],["body/controllers/GoogleAuthenticationController.html",[3,0.167,4,0.149,5,0.149,8,0.35,9,1.373,19,0.514,21,1.112,22,0.014,23,0.96,24,0.395,25,0.793,30,1.034,37,0.318,41,0.673,51,0.167,52,0.068,54,2.032,55,1.196,71,1.034,83,0.011,84,0.011,97,1.799,99,1.872,210,2.847,212,1.817,217,1.383,227,2.847,230,2.102,238,3.23,252,4.271,256,4.454,271,4.205,327,2.692,684,5.384,685,4.205,686,6.193,687,5.384,688,4.205,689,5.087,690,4.836,691,4.836,692,4.205,693,4.836,694,4.836,695,4.836]],["title/injectables/GoogleAuthenticationService.html",[39,0.422,252,2.485]],["body/injectables/GoogleAuthenticationService.html",[3,0.109,4,0.097,5,0.097,8,0.229,9,1.024,10,1.681,12,2.391,14,1.008,15,2.473,16,4.463,17,3.648,18,3.758,19,0.638,21,1.062,22,0.014,23,0.917,24,0.446,25,0.757,30,0.987,37,0.33,38,1.586,39,0.491,40,1.973,41,0.439,42,1.383,43,1.667,46,1.757,51,0.109,52,0.044,53,2.108,54,1.326,55,1.487,56,2.108,57,2.693,61,1.326,62,1.59,63,1.383,65,1.811,69,1.383,70,1.326,71,0.987,83,0.008,84,0.008,89,1.37,91,1.274,92,2.745,93,2.27,202,0.903,211,1.973,212,1.453,221,1.129,238,2.108,251,3.646,252,2.887,257,1.757,266,2.108,274,3.242,279,1.973,327,1.757,528,3.648,529,3.928,562,2.108,576,2.473,589,2.27,614,3.648,629,2.473,687,4.016,688,4.016,689,4.272,692,2.744,696,5.562,697,2.744,698,5.462,699,6.683,700,4.619,701,3.156,702,3.156,703,5.462,704,2.744,705,2.744,706,3.156,707,3.156,708,4.619,709,3.156,710,3.156,711,3.156,712,3.156,713,3.156,714,3.156,715,3.156,716,3.156,717,3.156,718,3.156,719,3.156,720,2.744,721,3.156,722,3.156,723,2.744]],["title/classes/GoogleTokenDto.html",[52,0.056,689,2.655]],["body/classes/GoogleTokenDto.html",[3,0.192,4,0.17,5,0.17,8,0.401,19,0.588,22,0.014,24,0.452,35,1.667,37,0.258,51,0.192,52,0.095,59,5.69,83,0.012,84,0.012,91,1.858,217,1.583,350,2.143,364,3.559,366,2.326,451,3.966,689,4.5,724,5.858,725,4.337,726,4.813,727,4.813]],["title/classes/GoogleUser.html",[52,0.056,335,2.655]],["body/classes/GoogleUser.html",[3,0.179,4,0.159,5,0.159,8,0.375,19,0.784,22,0.014,24,0.603,35,1.966,51,0.179,52,0.073,83,0.011,84,0.011,91,1.784,92,3.544,335,4.32,350,2.005,528,4.71,529,5.072,614,4.71,728,6.609,729,4.504,730,5.181,731,5.181,732,5.181,733,5.181]],["title/injectables/HashingProvider.html",[39,0.422,250,2.213]],["body/injectables/HashingProvider.html",[3,0.163,4,0.145,5,0.145,8,0.341,9,1.35,19,0.647,21,1.4,22,0.014,23,1.209,24,0.497,25,0.998,30,1.302,31,4.198,35,1.95,37,0.22,39,0.647,41,0.656,51,0.163,52,0.066,83,0.01,84,0.01,202,1.347,250,3.389,310,5.294,311,5.294,312,5.294,313,6.576,314,5.866,316,3.807,317,5.294,734,4.096,735,7.697,736,4.711,737,4.711]],["title/modules/MailModule.html",[105,1.369,118,2.655]],["body/modules/MailModule.html",[3,0.185,4,0.164,5,0.164,22,0.014,37,0.307,41,0.743,51,0.185,52,0.075,83,0.011,84,0.011,105,2.46,107,2.443,108,2.443,109,2.68,110,2.68,111,2.443,112,3.591,113,2.68,118,5.215,125,3.31,126,2.68,127,2.556,738,4.637,739,4.637,740,5.215,741,5.333,742,5.333]],["title/injectables/MailService.html",[39,0.422,740,2.655]],["body/injectables/MailService.html",[3,0.208,4,0.185,5,0.185,22,0.014,37,0.28,39,0.752,41,0.838,51,0.208,52,0.085,83,0.012,84,0.012,202,1.721,740,4.73,743,5.232]],["title/entities/MetaOption.html",[744,1.906,745,2.213]],["body/entities/MetaOption.html",[3,0.141,4,0.125,5,0.125,8,0.295,19,0.748,22,0.014,24,0.593,35,1.368,37,0.258,51,0.141,52,0.057,83,0.009,84,0.009,91,1.526,94,1.834,95,2.638,141,4.042,184,2.4,217,2.014,230,2.358,338,1.459,398,3.079,406,3.964,415,4.81,474,4.92,478,3.835,509,4.81,744,2.652,745,3.079,746,3.544,747,4.92,748,4.92,749,4.92,750,4.077,751,4.195,752,4.077,753,2.723,754,3.695,755,4.077,756,3.544,757,4.81,758,4.077,759,4.077,760,4.92,761,4.077,762,3.194,763,3.695,764,4.81,765,4.81,766,3.194]],["title/controllers/MetaOptionsController.html",[97,1.479,767,2.859]],["body/controllers/MetaOptionsController.html",[3,0.165,4,0.147,5,0.147,8,0.346,9,1.362,19,0.507,21,1.098,22,0.014,23,0.947,24,0.39,25,0.782,30,1.02,37,0.316,41,0.665,51,0.165,52,0.067,54,2.005,55,1.18,71,1.02,83,0.01,84,0.01,97,1.775,99,1.847,140,3.086,141,3.418,210,2.809,212,1.805,217,1.365,227,2.809,230,2.206,348,2.812,394,4.219,459,3.432,478,3.243,491,2.288,767,4.416,768,4.15,769,6.14,770,4.773,771,4.773,772,6.14,773,3.839,774,4.15,775,4.15,776,4.773,777,4.773,778,4.15,779,4.773]],["title/modules/MetaOptionsModule.html",[105,1.369,119,2.655]],["body/modules/MetaOptionsModule.html",[3,0.168,4,0.149,5,0.149,22,0.014,37,0.347,41,0.676,51,0.168,52,0.068,83,0.011,84,0.011,99,2.402,105,2.356,107,2.222,108,2.222,109,2.439,110,2.439,111,2.222,112,3.439,113,2.439,119,5.092,125,3.119,126,2.439,127,2.326,129,2.856,136,3.034,137,1.805,140,3.119,141,2.701,478,2.563,745,2.701,767,4.921,773,4.766,774,4.219,775,4.219,780,4.219,781,4.219,782,4.852,783,4.852,784,3.241,785,4.852]],["title/injectables/MetaOptionsService.html",[39,0.422,773,2.485]],["body/injectables/MetaOptionsService.html",[3,0.154,4,0.137,5,0.137,8,0.322,9,1.301,10,2.02,12,1.593,14,1.422,19,0.623,21,1.35,22,0.014,23,1.165,24,0.479,25,0.962,30,0.952,37,0.338,39,0.623,41,0.62,51,0.154,52,0.063,55,1.101,65,1.476,71,0.952,83,0.01,84,0.01,137,1.656,140,2.949,202,1.273,212,1.746,221,1.593,230,1.37,331,3.196,338,1.593,340,2.237,348,2.687,394,4.269,459,3.201,478,3.467,491,2.134,745,3.266,773,3.668,784,2.973,786,5.707,787,3.87,788,4.451,789,4.451,790,5.102,791,5.868,792,4.451,793,4.451,794,4.451,795,4.451]],["title/interfaces/Paginated.html",[85,2.34,796,2.655]],["body/interfaces/Paginated.html",[3,0.173,4,0.154,5,0.154,8,0.362,22,0.014,24,0.637,35,1.861,51,0.173,83,0.011,84,0.011,85,2.945,87,3.598,91,1.745,94,2.418,140,3.665,316,4.559,598,3.919,639,5.437,796,4.226,797,4.349,798,6.341,799,7.293,800,4.349,801,4.349,802,4.349,803,4.349,804,4.349,805,4.349,806,4.349,807,4.349]],["title/modules/PaginationModule.html",[105,1.369,120,2.485]],["body/modules/PaginationModule.html",[3,0.177,4,0.157,5,0.157,22,0.014,37,0.299,41,0.711,51,0.177,52,0.072,83,0.011,84,0.011,105,2.413,107,2.34,108,2.34,109,2.567,110,2.567,111,2.34,112,3.522,113,3.522,120,4.901,125,3.222,126,2.567,127,2.448,808,4.441,809,4.441,810,4.441,811,5.09,812,5.108,813,5.108]],["title/injectables/PaginationProvider.html",[39,0.422,811,2.485]],["body/injectables/PaginationProvider.html",[3,0.117,4,0.104,5,0.104,8,0.246,9,1.079,10,1.751,12,1.214,14,1.554,19,0.517,21,1.309,22,0.014,23,0.966,24,0.464,25,0.798,30,0.725,31,2.864,33,4.412,37,0.319,38,1.705,39,0.517,41,0.472,48,2.439,51,0.117,52,0.048,55,0.839,57,2.844,62,1.168,65,1.613,71,0.725,83,0.011,84,0.008,140,1.705,158,2.265,202,0.97,212,1.513,316,2.12,331,3.232,338,1.214,472,4.152,598,2.657,639,2.657,669,3.887,671,2.657,796,3.25,798,2.949,800,2.949,801,4.947,802,2.949,803,5.405,804,2.949,805,2.949,806,2.949,807,2.949,811,3.042,814,2.949,815,4.866,816,3.392,817,3.392,818,4.866,819,3.392,820,3.392,821,3.392,822,3.392,823,3.392,824,3.392,825,3.392,826,2.949,827,7.219,828,6.217,829,2.657,830,4.866,831,3.392,832,3.392,833,3.392,834,3.392,835,3.392,836,3.392,837,3.392,838,3.392,839,3.392,840,4.866,841,3.392,842,3.392,843,3.392,844,3.392,845,3.392]],["title/classes/PaginationQueryDto.html",[52,0.056,669,2.485]],["body/classes/PaginationQueryDto.html",[3,0.16,4,0.143,5,0.143,8,0.336,19,0.64,22,0.014,24,0.6,25,1.162,37,0.281,51,0.16,52,0.094,83,0.01,84,0.01,91,1.662,94,2.497,217,1.723,350,1.794,366,1.947,368,2.898,450,3.941,472,4.024,573,4.03,669,3.767,670,4.815,846,4.03,847,4.815,848,4.471,849,4.334,850,4.721,851,5.239,852,6.026,853,4.636,854,4.636,855,6.695,856,4.03,857,4.636,858,4.636,859,4.636,860,4.636,861,4.636,862,4.636]],["title/classes/PatchPostDto.html",[52,0.056,863,2.655]],["body/classes/PatchPostDto.html",[3,0.173,4,0.153,5,0.153,8,0.361,19,0.53,22,0.014,24,0.407,37,0.323,51,0.173,52,0.089,83,0.011,84,0.011,91,1.741,94,2.093,95,3.157,217,1.426,230,2.242,347,1.855,348,2.283,350,1.93,364,3.335,366,2.094,369,4.541,370,2.39,372,2.934,447,4.946,492,3.585,673,4.541,863,4.217,864,5.489,865,4.335,866,6.314,867,4.986,868,6.314,869,4.986,870,4.986,871,4.335,872,4.335]],["title/classes/PatchUserDto.html",[52,0.056,873,2.859]],["body/classes/PatchUserDto.html",[3,0.198,4,0.176,5,0.176,22,0.014,37,0.321,51,0.198,52,0.081,83,0.012,84,0.012,348,2.626,350,2.219,353,4.123,355,3.028,367,3.584,673,4.949,871,4.984,873,4.949,874,4.984,875,6.882,876,4.984,877,4.984]],["title/entities/Post.html",[230,1.223,744,1.906]],["body/entities/Post.html",[3,0.084,4,0.075,5,0.075,8,0.176,19,0.755,22,0.014,24,0.623,25,1.165,35,1.699,36,1.821,37,0.295,51,0.084,52,0.034,72,3.701,83,0.006,84,0.006,89,1.795,91,1.047,94,1.259,95,1.961,140,1.909,141,1.356,184,1.434,217,2.033,230,1.436,338,0.872,375,3.656,376,3.357,377,4.109,378,5.121,379,4.058,380,3.357,381,3.117,382,3.117,383,2.918,384,4.058,394,1.434,398,3.639,406,2.236,434,4.476,456,2.119,457,2.119,458,1.752,459,1.752,464,5.121,478,1.287,499,3.117,506,3.369,512,2.731,643,2.119,744,1.821,745,2.933,751,3.117,753,4.366,754,4.868,756,2.119,763,4.486,764,3.302,765,3.302,766,2.975,784,1.627,849,3.79,878,2.119,879,2.437,880,3.798,881,6.052,882,2.437,883,4.582,884,2.437,885,4.353,886,4.353,887,2.975,888,2.437,889,2.437,890,3.798,891,2.437,892,2.437,893,3.302,894,2.437,895,2.437,896,3.302,897,2.437,898,2.437,899,2.119,900,3.798,901,2.437,902,2.437,903,3.798,904,2.437,905,3.798,906,3.302,907,3.798,908,2.437,909,2.437,910,2.437]],["title/controllers/PostController.html",[97,1.479,911,2.859]],["body/controllers/PostController.html",[3,0.102,4,0.09,5,0.09,8,0.212,9,0.97,19,0.616,21,1.334,22,0.014,23,1.152,24,0.473,25,0.951,30,1.24,35,1.294,37,0.323,41,0.408,51,0.102,52,0.041,54,1.232,55,0.726,62,1.507,71,1.24,83,0.007,84,0.007,86,2.916,88,1.959,89,1.721,94,1.735,95,1.838,97,1.091,99,1.135,133,3.08,210,1.727,212,1.971,217,1.659,227,2.575,230,2.219,347,2.158,370,1.406,372,3.969,382,2.922,391,4.545,484,3.428,491,1.406,492,2.11,495,1.834,641,4.099,672,3.627,863,4.347,872,3.804,911,3.147,912,2.55,913,4.375,914,4.375,915,4.375,916,2.933,917,4.375,918,4.375,919,4.375,920,5.801,921,5.801,922,4.375,923,2.933,924,2.933,925,2.933,926,3.763,927,2.933,928,2.933,929,4.55,930,4.375,931,2.933,932,2.933,933,3.804,934,4.375,935,5.044,936,2.933,937,2.933,938,2.55,939,3.428,940,3.804,941,3.428,942,2.933,943,2.55,944,4.099,945,4.55,946,2.55,947,2.298,948,2.55,949,2.11,950,2.55,951,2.298,952,2.298,953,2.933,954,2.933,955,2.933,956,2.933,957,2.933,958,3.428,959,3.804,960,2.933,961,2.933,962,2.933,963,2.933,964,2.933,965,2.933]],["title/modules/PostModule.html",[105,1.369,121,2.655]],["body/modules/PostModule.html",[3,0.14,4,0.124,5,0.124,22,0.014,37,0.36,41,0.563,51,0.14,52,0.057,83,0.009,84,0.009,99,2.129,105,2.153,107,1.852,108,1.852,109,2.032,110,2.032,111,1.852,112,3.143,113,2.032,120,4.528,121,5.319,122,4.528,124,4.264,125,2.765,126,2.032,127,1.938,129,3.238,133,4.264,136,2.527,137,1.504,141,2.25,163,4.264,165,3.167,230,1.244,259,3.515,478,2.135,493,3.167,745,3.062,784,2.7,911,4.497,943,3.515,966,3.515,967,4.043,968,3.515,969,4.043,970,4.043,971,4.043,972,4.043,973,4.043,974,4.043]],["title/injectables/PostService.html",[39,0.422,133,2.34]],["body/injectables/PostService.html",[3,0.072,4,0.064,5,0.064,8,0.151,9,0.743,10,2.1,12,2.022,14,1.07,19,0.562,21,1.217,22,0.014,23,1.05,24,0.432,25,0.867,30,1.031,31,1.973,33,2.631,35,1.041,36,1.606,37,0.328,39,0.356,41,0.29,51,0.072,52,0.029,55,1.398,57,0.839,61,2.222,62,1.821,63,2.478,65,2.221,69,1.844,71,1.031,72,2.658,83,0.006,84,0.006,86,2.425,88,1.39,89,1.677,94,1.395,95,2.497,133,1.973,137,0.774,141,1.158,143,3.139,163,3.498,165,1.63,202,0.595,212,1.815,221,1.506,230,1.964,273,1.63,274,2.589,279,1.301,331,2.423,338,0.745,340,1.046,348,0.953,372,3.113,377,1.497,383,3.307,441,1.63,472,1.39,478,1.099,484,2.626,487,3.658,488,2.914,490,1.39,491,0.997,492,1.497,493,1.63,494,1.809,495,1.301,496,1.809,499,1.39,503,1.809,506,1.158,510,1.809,511,1.63,560,1.225,566,3.297,567,3.297,569,3.026,570,3.297,572,1.63,575,1.63,580,2.626,628,1.63,641,3.297,672,3.016,745,1.158,784,1.39,790,1.809,796,1.39,811,3.716,826,1.809,829,1.63,847,1.497,848,1.39,863,3.532,926,2.41,929,1.809,947,1.63,948,1.809,949,1.497,950,1.809,975,1.809,976,2.914,977,3.351,978,2.081,979,2.081,980,2.626,981,2.081,982,3.351,983,2.081,984,3.351,985,2.081,986,2.081,987,2.081,988,2.081,989,2.081,990,3.297,991,2.081,992,3.351,993,3.351,994,4.208,995,2.081,996,2.081,997,2.081,998,3.351,999,2.081,1000,2.081,1001,2.081,1002,2.081,1003,2.081,1004,1.809,1005,2.081,1006,2.081,1007,2.081,1008,2.081,1009,2.081,1010,2.081,1011,3.351,1012,2.081,1013,3.351,1014,2.081,1015,3.351,1016,2.081,1017,3.351,1018,2.081,1019,3.351,1020,2.081,1021,3.351,1022,2.081,1023,3.351,1024,2.081,1025,1.809]],["title/classes/RefreshTokenDto.html",[52,0.056,216,2.485]],["body/classes/RefreshTokenDto.html",[3,0.192,4,0.17,5,0.17,8,0.401,19,0.588,22,0.014,24,0.452,35,1.667,37,0.258,51,0.192,52,0.095,83,0.012,84,0.012,91,1.858,213,5.224,216,4.212,217,1.583,350,2.143,364,3.559,366,2.326,451,3.966,725,4.337,726,4.813,727,4.813,1026,5.858]],["title/injectables/RefreshTokensProvider.html",[39,0.422,253,2.485]],["body/injectables/RefreshTokensProvider.html",[3,0.127,4,0.113,5,0.113,8,0.266,9,1.142,10,1.83,12,2.306,14,1.645,15,2.879,16,4.697,17,3.971,18,4.029,19,0.547,21,1.185,22,0.014,23,1.022,24,0.42,25,0.844,30,0.786,37,0.343,38,1.847,39,0.547,40,2.297,41,0.512,42,1.611,43,1.941,46,2.045,47,2.454,51,0.127,52,0.052,55,1.594,56,2.454,57,2.076,61,1.544,62,1.265,63,1.611,65,1.972,69,1.611,70,1.544,71,0.786,83,0.009,84,0.009,86,1.847,89,1.528,93,2.643,202,1.051,212,1.581,216,4.242,221,1.315,237,2.879,238,2.454,251,3.404,253,3.22,257,2.045,266,2.454,274,3.376,279,2.297,495,2.297,562,2.454,630,2.879,644,2.879,646,3.195,647,3.195,648,3.195,649,3.195,650,3.195,651,3.195,723,3.195,1027,5.17,1028,5.15,1029,5.946,1030,3.675,1031,5.15,1032,3.675,1033,3.195,1034,3.675,1035,3.675,1036,3.675]],["title/classes/SignInDto.html",[52,0.056,223,2.485]],["body/classes/SignInDto.html",[3,0.183,4,0.162,5,0.162,8,0.382,19,0.695,22,0.014,24,0.534,35,1.838,37,0.246,51,0.183,52,0.092,83,0.011,84,0.011,91,1.804,92,3.573,193,4.445,217,1.871,223,4.089,350,2.042,364,3.755,366,2.216,451,3.85,551,5.687,1037,4.586,1038,5.275,1039,5.275,1040,5.275,1041,5.275]],["title/injectables/SignInProvider.html",[39,0.422,254,2.485]],["body/injectables/SignInProvider.html",[3,0.122,4,0.108,5,0.108,8,0.254,9,1.107,10,1.786,12,2.388,14,1.594,16,4.762,17,3.876,18,3.95,19,0.53,21,1.148,22,0.014,23,0.991,24,0.407,25,0.818,30,0.751,37,0.345,38,1.767,39,0.53,40,2.197,41,0.489,42,1.541,43,1.856,46,1.956,47,2.347,51,0.122,52,0.049,55,1.651,56,2.347,61,2.097,62,1.719,63,1.541,65,1.924,69,1.541,70,1.477,71,0.751,83,0.009,84,0.009,86,1.767,89,1.481,193,3.12,202,1.005,212,1.543,214,3.91,221,1.258,222,3.91,223,4.172,233,2.754,250,3.969,251,3.766,254,3.12,257,1.956,266,2.347,273,2.754,274,3.266,279,2.197,319,3.056,347,1.308,398,1.956,495,2.197,560,2.069,562,2.347,625,2.754,644,2.754,720,3.056,1033,3.056,1042,5.046,1043,3.056,1044,3.515,1045,3.515,1046,3.515,1047,5.804,1048,3.515,1049,3.515,1050,3.515,1051,3.515,1052,3.515]],["title/entities/Tag.html",[506,2.213,744,1.906]],["body/entities/Tag.html",[3,0.108,4,0.096,5,0.096,8,0.227,19,0.778,22,0.014,23,1.079,24,0.629,25,0.981,35,1.812,37,0.214,51,0.108,52,0.044,72,3.681,83,0.008,84,0.008,91,1.266,94,1.522,95,2.283,184,1.842,217,2.095,230,2.05,338,1.12,347,2.022,376,3.909,380,3.909,381,3.63,398,3.332,406,3.922,506,2.554,512,4.305,744,2.2,747,4.258,748,4.258,749,4.258,751,3.63,753,4.257,754,4.892,757,3.99,760,4.258,762,2.451,763,4.45,766,3.595,883,5.205,885,4.792,886,4.792,887,3.595,896,5.205,899,2.72,906,3.99,990,4.258,1025,3.99,1053,2.72,1054,5.435,1055,3.129,1056,5.435,1057,3.129,1058,3.129,1059,3.129,1060,3.129,1061,3.129,1062,3.129,1063,3.129,1064,3.129,1065,3.129]],["title/controllers/TagsController.html",[97,1.479,1066,2.859]],["body/controllers/TagsController.html",[3,0.14,4,0.124,5,0.124,8,0.292,9,1.218,19,0.663,21,1.436,22,0.014,23,1.24,24,0.51,25,1.023,30,1.335,37,0.291,41,0.561,51,0.14,52,0.057,54,1.694,55,0.997,71,1.335,83,0.009,84,0.009,94,2.4,95,2.816,97,1.5,99,1.56,143,3.298,210,2.373,212,2.032,217,1.786,227,2.373,230,1.922,348,2.515,383,2.52,491,1.932,515,4.834,778,3.505,926,5.326,939,4.892,941,3.158,980,3.158,1066,3.949,1067,3.505,1068,5.491,1069,4.032,1070,4.032,1071,4.032,1072,4.032,1073,4.032,1074,4.032,1075,3.505,1076,3.505,1077,4.032,1078,4.032,1079,4.032,1080,4.032,1081,4.032,1082,4.032,1083,4.032]],["title/modules/TagsModule.html",[105,1.369,122,2.485]],["body/modules/TagsModule.html",[3,0.165,4,0.146,5,0.146,22,0.014,37,0.345,41,0.662,51,0.165,52,0.067,83,0.01,84,0.01,99,2.372,105,2.334,107,2.179,108,2.179,109,2.391,110,2.391,111,2.179,112,3.407,113,3.407,122,4.823,125,3.08,126,2.391,127,2.28,129,2.8,136,2.974,137,1.77,143,4.258,506,2.648,1066,4.875,1076,4.136,1084,4.136,1085,4.136,1086,4.136,1087,4.757,1088,4.757,1089,4.136,1090,4.757]],["title/injectables/TagsService.html",[39,0.422,143,2.1]],["body/injectables/TagsService.html",[3,0.119,4,0.106,5,0.106,8,0.249,9,1.09,10,2.354,12,1.231,14,1.099,19,0.703,21,1.522,22,0.014,23,1.314,24,0.54,25,1.085,30,1.338,37,0.308,39,0.522,41,0.479,51,0.119,52,0.048,55,0.851,65,2.075,71,1.338,72,2.47,83,0.008,84,0.008,94,2.445,95,2.78,137,1.28,143,2.596,202,0.984,212,2.034,221,2.239,331,2.866,338,1.231,340,1.729,383,2.151,491,1.649,506,2.736,515,4.42,926,3.535,980,3.851,1004,4.274,1075,2.991,1089,2.991,1091,2.991,1092,4.915,1093,4.915,1094,4.915,1095,3.44,1096,3.44,1097,4.915,1098,4.915,1099,3.44,1100,3.44,1101,4.915,1102,3.44,1103,4.915,1104,3.44,1105,3.44,1106,3.44,1107,3.44,1108,4.274,1109,3.44,1110,3.44,1111,3.44,1112,3.44]],["title/entities/Upload.html",[744,1.906,1113,2.485]],["body/entities/Upload.html",[3,0.12,4,0.107,5,0.107,8,0.251,19,0.771,22,0.014,23,1.143,24,0.643,35,1.796,36,1.661,37,0.23,51,0.12,52,0.049,83,0.008,84,0.008,91,1.362,94,2.081,95,2.419,184,2.039,217,2.076,338,1.24,398,4.171,406,3.695,464,4.918,744,2.368,747,4.511,748,4.511,749,4.511,751,3.846,753,4.432,754,5.005,760,4.511,763,4.608,849,3.553,885,5.221,886,4.962,887,5.405,1113,3.089,1114,3.012,1115,4.511,1116,4.141,1117,4.511,1118,3.465,1119,3.465,1120,3.465,1121,3.465,1122,3.465,1123,3.465,1124,4.141,1125,3.465,1126,3.465,1127,2.714,1128,2.714,1129,3.012]],["title/interfaces/UploadFile.html",[85,2.34,1130,2.655]],["body/interfaces/UploadFile.html",[3,0.173,4,0.153,5,0.153,8,0.361,22,0.014,23,1.446,24,0.65,35,1.97,37,0.232,51,0.173,83,0.011,84,0.011,85,2.934,87,3.585,91,1.741,94,2.297,1115,5.706,1116,5.238,1117,5.706,1124,5.238,1127,3.906,1128,3.906,1130,4.217,1131,4.335,1132,4.335]],["title/injectables/UploadToAwsProvider.html",[39,0.422,1133,2.485]],["body/injectables/UploadToAwsProvider.html",[3,0.132,4,0.117,5,0.186,8,0.275,9,1.169,10,1.863,14,1.214,19,0.643,21,1.392,22,0.014,23,1.363,24,0.494,25,0.992,30,1.127,31,2.236,35,0.94,37,0.32,39,0.56,41,0.529,42,1.666,51,0.132,52,0.053,54,1.596,55,0.94,57,2.125,61,1.596,62,2.085,63,1.666,65,1.26,69,1.666,70,1.596,71,1.127,83,0.009,84,0.009,146,4.747,202,1.087,212,1.61,221,1.36,227,2.236,560,2.236,595,3.304,625,2.977,893,4.583,1116,3.791,1133,3.296,1134,5.685,1135,3.304,1136,5.272,1137,5.272,1138,3.8,1139,5.272,1140,5.568,1141,3.8,1142,5.272,1143,3.8,1144,6.054,1145,2.977,1146,3.304,1147,3.8,1148,3.8,1149,3.304,1150,3.8,1151,3.8,1152,3.8,1153,3.8,1154,3.8,1155,3.304,1156,3.8,1157,3.8,1158,3.304,1159,3.8,1160,3.8,1161,3.8,1162,3.8,1163,3.8,1164,3.8,1165,3.8,1166,3.8]],["title/controllers/UploadsController.html",[97,1.479,1167,2.859]],["body/controllers/UploadsController.html",[3,0.149,4,0.132,5,0.198,8,0.311,9,1.27,19,0.456,21,0.987,22,0.014,23,1.28,24,0.468,25,0.704,30,0.918,37,0.334,41,0.598,48,4.637,51,0.149,52,0.06,54,1.804,55,1.062,59,3.364,62,1.973,71,0.918,79,3.364,83,0.01,84,0.01,97,1.597,99,1.662,210,2.527,212,1.715,217,1.228,230,1.321,316,2.684,347,2.131,370,2.058,375,3.364,390,4.488,944,4.488,958,3.364,1113,3.582,1130,3.826,1140,5.051,1167,4.12,1168,3.733,1169,4.293,1170,3.733,1171,4.293,1172,4.293,1173,4.981,1174,4.293,1175,4.293,1176,3.733,1177,4.293,1178,3.733,1179,4.293,1180,5.729,1181,3.582,1182,3.733,1183,4.293,1184,4.293,1185,4.293,1186,4.293,1187,4.293,1188,4.293,1189,4.293,1190,4.293]],["title/modules/UploadsModule.html",[105,1.369,123,2.655]],["body/modules/UploadsModule.html",[3,0.163,4,0.145,5,0.145,22,0.014,37,0.353,41,0.656,51,0.163,52,0.066,83,0.01,84,0.01,99,2.357,105,2.323,107,2.158,108,2.158,109,2.368,110,2.368,111,2.158,112,3.391,113,2.368,123,5.21,125,3.06,126,2.368,127,2.258,129,2.773,136,2.945,137,1.752,1113,2.945,1133,4.729,1167,4.852,1181,4.729,1182,4.096,1191,4.096,1192,4.096,1193,4.711,1194,4.711,1195,4.711,1196,4.096,1197,4.096,1198,4.711]],["title/injectables/UploadsService.html",[39,0.422,1181,2.485]],["body/injectables/UploadsService.html",[3,0.127,4,0.113,5,0.158,8,0.265,9,1.14,10,1.828,12,2.125,14,1.171,19,0.546,21,1.183,22,0.014,23,1.346,24,0.525,25,0.843,30,0.784,37,0.343,39,0.546,41,0.51,42,1.607,51,0.127,52,0.052,55,1.469,57,2.393,61,2.16,62,1.77,63,1.607,65,1.705,69,1.607,70,1.54,71,0.784,83,0.009,84,0.009,137,1.364,146,4.82,202,1.048,212,1.579,221,1.312,331,2.948,337,2.636,338,1.312,340,1.842,346,2.872,490,2.448,1113,3.712,1115,2.872,1116,2.636,1117,2.872,1124,2.636,1127,2.872,1128,2.872,1129,3.187,1130,4.527,1133,4.512,1140,4.652,1158,3.187,1170,4.47,1181,3.214,1196,3.187,1197,3.187,1199,3.187,1200,3.666,1201,3.666,1202,5.141,1203,3.666,1204,3.666,1205,3.666,1206,3.666,1207,3.666,1208,3.666,1209,3.666,1210,3.666,1211,3.666,1212,3.666,1213,3.666,1214,3.666,1215,3.666,1216,3.666,1217,3.666]],["title/entities/User.html",[89,1.179,744,1.906]],["body/entities/User.html",[3,0.117,4,0.104,5,0.104,8,0.244,19,0.748,22,0.014,24,0.622,25,1.017,35,1.843,37,0.265,51,0.117,52,0.068,72,3.438,83,0.008,84,0.008,89,1.439,91,1.337,92,2.852,94,1.608,95,2.384,184,1.987,193,3.548,217,2.015,230,2.105,338,1.208,368,2.111,398,3.453,512,3.488,528,3.791,529,4.082,614,3.791,744,2.325,751,3.791,753,4.388,754,4.977,762,2.645,763,4.568,885,5.359,886,5.359,990,4.446,1218,2.935,1219,7.452,1220,3.376,1221,3.376,1222,4.85,1223,3.376,1224,3.376,1225,3.376,1226,3.376,1227,3.376,1228,4.85,1229,3.376,1230,5.676,1231,4.85]],["title/injectables/UserCreateManyProvider.html",[39,0.422,1232,2.485]],["body/injectables/UserCreateManyProvider.html",[3,0.126,4,0.112,5,0.112,8,0.263,9,1.132,10,1.818,14,1.159,19,0.542,21,1.174,22,0.014,23,1.013,24,0.417,25,0.837,30,0.776,37,0.315,39,0.542,41,0.505,51,0.126,52,0.051,54,1.524,55,0.898,57,1.463,61,2.481,62,2.034,63,2.589,65,2.323,69,2.589,70,2.481,71,0.776,83,0.009,84,0.009,89,1.901,96,2.424,202,1.038,212,1.571,221,1.298,337,2.61,338,1.298,339,2.136,347,1.899,348,2.705,349,4.222,352,2.424,355,1.917,367,3.192,491,2.447,560,2.136,576,2.843,1108,3.155,1232,3.192,1233,5.135,1234,3.155,1235,4.439,1236,3.629,1237,6.09,1238,3.629,1239,4.439,1240,3.629,1241,5.105,1242,3.629,1243,3.629,1244,3.629,1245,3.629,1246,5.105,1247,3.155,1248,3.629,1249,3.629,1250,3.629,1251,3.629,1252,3.629,1253,3.629,1254,3.629,1255,3.629,1256,3.629,1257,5.105,1258,3.629,1259,3.629,1260,3.629,1261,3.629]],["title/injectables/UserService.html",[39,0.422,274,1.821]],["body/injectables/UserService.html",[3,0.065,4,0.058,5,0.058,8,0.136,9,0.683,10,2.208,12,2.201,14,0.983,18,2.835,19,0.631,21,1.366,22,0.014,23,1.179,24,0.485,25,0.974,30,1.216,33,1.172,35,1.332,36,0.898,37,0.328,38,0.942,39,0.327,41,0.261,42,0.822,51,0.065,52,0.055,55,1.469,57,1.241,61,1.645,62,1.349,63,1.349,65,1.661,69,0.822,70,1.293,71,1.216,83,0.005,84,0.005,89,1.925,92,1.969,94,2.04,95,2.495,96,2.616,137,0.697,146,3.799,202,0.536,212,1.954,221,1.926,229,1.63,231,3.348,257,1.043,274,1.41,325,3.556,327,1.713,329,2.676,331,2.077,333,2.817,334,2.676,335,3.345,338,0.671,339,1.103,340,0.942,341,1.63,342,1.63,343,1.252,347,1.457,348,1.794,349,3.131,352,1.252,354,3.345,355,2.645,367,1.924,382,1.252,490,1.252,491,1.475,528,2.056,544,1.924,555,2.835,556,2.676,558,2.676,560,1.103,562,1.252,566,1.468,567,1.468,568,1.63,569,1.348,570,1.468,571,1.63,572,1.468,580,1.468,589,1.348,607,2.835,610,2.676,612,2.676,614,1.252,615,2.676,616,3.556,618,2.676,622,2.676,628,2.412,675,3.029,847,2.817,848,2.616,949,1.348,976,2.676,1232,2.835,1235,2.676,1237,1.63,1239,2.676,1247,2.676,1262,1.63,1263,2.676,1264,3.078,1265,3.078,1266,3.078,1267,3.078,1268,1.874,1269,3.917,1270,3.917,1271,3.917,1272,3.917,1273,1.874,1274,1.874,1275,1.874,1276,1.874,1277,3.078,1278,1.874,1279,3.078,1280,1.874,1281,1.874,1282,1.874,1283,3.078,1284,1.874,1285,4.535,1286,3.078,1287,2.676,1288,3.078,1289,1.63,1290,1.874,1291,1.63,1292,1.63,1293,1.63,1294,2.676,1295,1.63,1296,1.63,1297,1.874,1298,1.874,1299,1.874,1300,1.874,1301,1.874,1302,1.874,1303,1.874,1304,1.874,1305,1.874,1306,1.874,1307,1.874,1308,1.874,1309,1.874,1310,3.078,1311,2.676,1312,3.078,1313,1.874,1314,1.874,1315,1.874,1316,1.874,1317,1.874,1318,1.874,1319,1.874,1320,1.874,1321,1.874,1322,1.874,1323,1.874,1324,1.874]],["title/controllers/UsersController.html",[97,1.479,1325,2.859]],["body/controllers/UsersController.html",[1,1.484,3,0.087,4,0.078,5,0.078,6,1.813,8,0.183,9,0.865,19,0.57,21,1.235,22,0.014,23,1.218,24,0.554,25,0.88,30,1.147,36,1.208,37,0.323,41,0.351,51,0.087,52,0.035,54,1.059,55,0.624,62,1.343,71,1.312,78,2.192,83,0.007,84,0.007,94,2.458,95,1.059,97,0.938,99,0.976,160,1.813,210,1.484,211,1.576,212,1.905,217,1.535,227,1.484,230,1.2,235,1.684,241,2.192,274,2.184,347,2.283,349,3.837,352,2.605,354,4.099,355,3.242,358,4.205,367,2.982,370,1.208,382,1.684,386,3.585,398,2.988,472,2.605,491,1.869,675,4.099,847,4.414,848,4.416,851,2.192,873,4.755,935,3.391,938,3.391,939,4.205,940,4.147,941,4.205,944,3.055,945,3.391,946,2.192,947,1.975,949,1.813,958,1.975,959,3.391,1176,2.192,1289,2.192,1311,3.391,1325,2.805,1326,2.192,1327,3.9,1328,3.9,1329,3.9,1330,3.9,1331,2.521,1332,3.9,1333,2.521,1334,2.521,1335,2.521,1336,2.521,1337,2.521,1338,2.521,1339,2.521,1340,3.9,1341,3.9,1342,3.9,1343,2.521,1344,3.9,1345,3.391,1346,2.521,1347,3.9,1348,3.9,1349,3.9,1350,2.521,1351,3.9,1352,3.9,1353,2.521,1354,2.521,1355,2.521,1356,2.521,1357,2.521,1358,2.521,1359,2.521,1360,2.521,1361,2.521,1362,2.521,1363,2.192,1364,4.769,1365,2.521,1366,2.192,1367,2.521,1368,2.521,1369,3.9,1370,2.521,1371,2.192,1372,2.521,1373,2.521,1374,2.521,1375,2.521,1376,2.521,1377,2.521,1378,2.521,1379,2.192,1380,2.521,1381,2.521,1382,2.521,1383,2.521,1384,2.521,1385,2.521,1386,2.521,1387,2.521]],["title/modules/UsersModule.html",[105,1.369,124,2.34]],["body/modules/UsersModule.html",[1,2.02,3,0.119,4,0.106,5,0.106,6,2.468,22,0.014,37,0.368,41,0.478,42,1.504,43,1.813,46,1.91,51,0.119,52,0.048,83,0.008,84,0.008,89,1.456,99,1.899,105,1.972,107,1.572,108,1.572,109,1.725,110,1.725,111,1.572,112,2.879,113,2.879,117,3.068,124,4.653,125,2.466,126,1.725,127,1.645,129,2.02,136,2.146,137,1.277,145,2.689,154,2.689,156,2.984,158,2.292,160,2.468,198,2.689,199,2.689,257,2.731,274,3.502,325,4.3,327,2.731,339,2.02,348,1.572,544,3.068,555,4.3,607,4.3,616,4.3,705,2.984,1232,4.3,1291,2.984,1292,2.984,1293,2.984,1294,4.266,1295,2.984,1296,2.984,1325,4.119,1363,2.984,1388,2.984,1389,2.984,1390,2.984,1391,3.432,1392,3.432,1393,3.432,1394,3.432,1395,4.907,1396,4.907,1397,3.432,1398,3.432]],["title/coverage.html",[1399,4.261]],["body/coverage.html",[0,2.733,1,1.287,5,0.067,6,1.573,7,1.902,22,0.014,24,0.179,39,0.811,49,1.714,52,0.101,62,0.753,83,0.006,84,0.006,85,2.561,86,1.099,88,1.461,89,1.291,90,1.902,97,2.342,98,1.573,100,1.902,101,1.367,111,1.002,128,1.714,133,1.287,140,1.099,141,1.942,143,1.155,161,1.573,163,1.287,166,1.573,168,1.714,172,1.714,203,1.902,208,1.573,209,1.902,211,1.367,216,1.367,223,1.367,230,1.339,231,1.287,250,1.217,251,1.155,252,1.367,253,1.367,254,1.367,256,1.573,261,1.573,272,1.902,274,1.002,283,1.902,292,1.714,309,1.902,325,1.367,326,3.129,327,1.942,328,3.129,335,1.461,348,1.002,349,1.367,351,2.733,352,1.461,353,3.129,354,1.461,355,1.155,372,1.287,373,1.902,374,1.902,394,1.287,458,1.573,478,2.622,479,1.902,482,1.902,483,1.902,506,1.217,515,1.461,516,1.902,517,1.902,544,2.181,555,1.367,582,3.033,583,1.714,588,7.144,592,1.902,593,1.902,607,1.367,608,2.733,609,1.902,616,1.367,617,1.902,629,1.714,630,2.733,659,1.573,660,2.733,661,2.733,669,1.367,670,1.573,672,1.367,675,1.461,676,1.902,677,1.902,684,1.902,685,1.902,689,1.461,696,1.902,697,1.902,724,1.902,725,2.733,728,1.902,729,1.902,734,1.902,740,1.461,743,1.902,744,2.6,745,1.217,746,1.902,767,1.573,768,1.902,773,1.367,786,1.902,787,1.902,796,1.461,797,1.902,811,1.367,814,1.902,846,1.902,863,1.461,864,1.902,865,1.902,873,1.573,874,1.902,878,1.902,911,1.573,912,1.902,951,1.714,952,1.714,975,1.902,1026,1.902,1027,1.902,1037,1.902,1042,1.902,1043,1.902,1053,1.902,1066,1.573,1067,1.902,1091,1.902,1113,1.367,1114,1.902,1130,1.461,1131,1.902,1132,1.902,1133,1.367,1134,1.902,1135,1.902,1167,1.573,1168,1.902,1181,1.367,1199,1.902,1218,1.902,1232,1.367,1233,1.902,1234,1.902,1262,1.902,1263,1.902,1325,1.573,1326,1.902,1399,1.714,1400,1.902,1401,2.187,1402,2.187,1403,7.273,1404,5.423,1405,6.654,1406,7.455,1407,3.033,1408,1.902,1409,1.902,1410,5.78,1411,5.78,1412,1.902,1413,2.187,1414,4.964,1415,2.187,1416,2.187,1417,2.187]],["title/dependencies.html",[108,2.192,1418,2.881]],["body/dependencies.html",[22,0.014,41,0.665,42,2.092,43,2.521,45,3.432,48,3.432,52,0.086,83,0.01,84,0.01,108,2.186,137,1.775,158,3.188,207,3.739,211,2.984,320,4.15,327,2.657,338,1.708,366,2.005,368,2.984,370,2.288,704,4.15,876,4.15,877,4.15,1145,3.739,1146,4.15,1149,4.15,1178,4.15,1419,4.773,1420,4.773,1421,4.773,1422,4.773,1423,7.167,1424,4.773,1425,4.773,1426,4.773,1427,4.773,1428,4.773,1429,4.773,1430,4.773,1431,4.773,1432,4.773,1433,4.773,1434,4.773,1435,4.773,1436,4.773,1437,4.773,1438,4.773,1439,4.773,1440,4.773,1441,4.773,1442,4.773,1443,4.773,1444,4.773,1445,4.773,1446,4.773]],["title/miscellaneous/enumerations.html",[1447,2.071,1448,4.16]],["body/miscellaneous/enumerations.html",[8,0.367,22,0.014,79,3.974,83,0.011,84,0.011,230,1.964,235,4.263,378,5.001,390,5.001,408,5.55,434,5.001,436,5.55,848,4.263,850,6.258,1124,4.59,1366,4.41,1379,4.41,1447,3.171,1448,4.41,1449,5.073,1450,6.383,1451,5.073,1452,6.383,1453,5.073,1454,5.073,1455,5.073,1456,5.073,1457,6.383,1458,6.383,1459,5.073,1460,6.383,1461,6.383]],["title/miscellaneous/functions.html",[1447,2.071,1462,4.16]],["body/miscellaneous/functions.html",[8,0.432,22,0.013,30,1.276,83,0.012,84,0.012,111,3.436,326,4.292,328,5.069,583,5.876,589,4.292,1412,5.189,1447,3.731,1462,5.189,1463,5.968,1464,5.968]],["title/index.html",[8,0.24,1465,3.313,1466,3.313]],["body/index.html",[4,0.096,22,0.013,77,2.715,83,0.008,84,0.008,127,3.191,207,5.529,331,1.43,347,1.162,386,3.994,402,2.715,499,2.085,511,2.446,569,3.295,575,5.216,829,2.446,856,2.715,933,2.715,1145,3.59,1155,2.715,1173,2.715,1287,2.715,1345,2.715,1371,5.788,1399,2.446,1400,3.984,1467,3.122,1468,3.122,1469,5.428,1470,4.582,1471,3.122,1472,3.122,1473,3.122,1474,4.582,1475,5.428,1476,3.122,1477,3.122,1478,5.98,1479,3.122,1480,7.057,1481,3.122,1482,6.88,1483,3.122,1484,3.122,1485,3.122,1486,4.582,1487,3.122,1488,4.582,1489,3.122,1490,5.428,1491,3.122,1492,4.582,1493,3.122,1494,3.122,1495,3.122,1496,3.122,1497,3.122,1498,5.98,1499,4.582,1500,3.122,1501,3.122,1502,4.582,1503,5.98,1504,3.122,1505,4.582,1506,3.122,1507,4.582,1508,6.658,1509,5.98,1510,3.122,1511,3.122,1512,3.122,1513,3.122,1514,3.122,1515,5.98,1516,3.122,1517,3.122,1518,3.122,1519,3.122,1520,4.582,1521,3.122,1522,3.122,1523,3.122,1524,3.122,1525,3.122,1526,4.582,1527,3.122,1528,3.122,1529,3.122,1530,4.582,1531,3.122,1532,3.122,1533,5.199,1534,3.122,1535,3.122,1536,3.122,1537,3.122,1538,3.122,1539,3.122,1540,3.122,1541,3.122,1542,4.582,1543,3.122,1544,3.122,1545,3.122,1546,3.122,1547,5.428,1548,3.122,1549,3.122,1550,3.122,1551,4.582,1552,3.122,1553,3.122,1554,3.122,1555,3.122,1556,4.582,1557,3.122,1558,3.122,1559,3.122,1560,4.582,1561,4.582,1562,3.122,1563,3.122,1564,3.122,1565,3.122,1566,3.122,1567,3.122,1568,3.122,1569,3.122,1570,3.122,1571,3.122,1572,3.122,1573,3.122,1574,3.122,1575,3.122,1576,3.122,1577,3.122,1578,3.122,1579,2.715]],["title/modules.html",[107,2.491]],["body/modules.html",[22,0.011,83,0.011,84,0.011,106,3.85,107,2.452,117,3.346,118,3.575,119,3.575,120,3.346,121,3.575,122,3.346,123,3.575,124,3.151,1533,7.009,1580,8.062,1581,8.062,1582,8.062]],["title/overview.html",[1583,4.728]],["body/overview.html",[2,2.321,22,0.014,83,0.008,84,0.008,87,2.131,99,1.147,101,3.291,105,1.02,106,5.696,107,1.357,108,1.357,109,1.489,110,1.489,111,1.357,112,1.489,113,1.489,114,2.576,115,2.576,116,2.576,117,4.774,118,4.163,119,4.163,120,4.23,121,5.014,122,4.346,123,4.519,124,4.555,125,2.216,126,1.489,127,1.42,133,3.099,143,3.573,163,3.099,184,1.744,202,0.847,231,3.982,247,2.576,248,2.576,249,2.576,250,3.245,251,2.781,252,3.291,253,3.291,254,3.291,274,3.099,325,3.291,350,1.147,425,2.321,473,2.576,540,2.576,555,3.291,607,3.291,616,3.291,738,2.576,739,2.576,740,3.516,773,3.291,780,2.576,781,2.576,808,2.576,809,2.576,810,2.576,811,4.23,966,2.576,968,2.576,1084,2.576,1085,2.576,1086,2.576,1133,3.291,1181,3.291,1191,2.576,1192,2.576,1232,3.291,1388,2.576,1389,2.576,1390,2.576,1583,2.576,1584,2.963,1585,2.963,1586,2.963,1587,2.963]],["title/properties.html",[91,1.319,1418,2.881]],["body/properties.html",[22,0.014,83,0.012,84,0.012,91,1.694,347,2.286,499,4.104,1579,5.342,1588,6.145,1589,6.145,1590,6.145]],["title/miscellaneous/variables.html",[1447,2.071,1591,4.16]],["body/miscellaneous/variables.html",[8,0.344,22,0.014,24,0.5,27,3.421,33,2.974,35,1.516,36,2.28,49,4.8,57,2.47,68,4.136,71,1.017,83,0.01,84,0.01,86,3.08,89,2.011,128,3.727,172,4.8,173,4.136,211,3.831,235,4.092,292,4.8,297,5.327,849,5.327,850,5.803,951,4.8,952,3.727,1407,4.136,1408,5.327,1409,4.136,1447,2.974,1591,4.136,1592,4.757,1593,4.757,1594,6.127,1595,4.757,1596,4.757,1597,6.127,1598,4.757,1599,4.757,1600,4.757,1601,4.757,1602,4.757]]],"invertedIndex":[["",{"_index":22,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":588,"title":{},"body":{"injectables/CreateUserProvider.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1589,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1432,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1444,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":1446,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1431,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1403,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1413,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1405,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1406,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1410,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1411,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1414,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":410,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":472,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"injectables/PostService.html":{},"controllers/UsersController.html":{}}}],["1.1.23",{"_index":1420,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":851,"title":{},"body":{"classes/PaginationQueryDto.html":{},"controllers/UsersController.html":{}}}],["10.0.0",{"_index":1423,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":1428,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":1425,"title":{},"body":{"dependencies.html":{}}}],["1024",{"_index":887,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{}}}],["10})@apiquery({name",{"_index":1350,"title":{},"body":{"controllers/UsersController.html":{}}}],["1234",{"_index":683,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["1234})@isoptional()@isint()@type(undefined",{"_index":681,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["14",{"_index":1316,"title":{},"body":{"injectables/UserService.html":{}}}],["15",{"_index":1586,"title":{},"body":{"overview.html":{}}}],["16t07:46:32+0000",{"_index":411,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["17.12.2",{"_index":1437,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":473,"title":{},"body":{"classes/CreatePostDto.html":{},"overview.html":{}}}],["2.0.2",{"_index":1422,"title":{},"body":{"dependencies.html":{}}}],["2.0.5",{"_index":1426,"title":{},"body":{"dependencies.html":{}}}],["2.1643.0",{"_index":1429,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":935,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":920,"title":{},"body":{"controllers/PostController.html":{}}}],["2024",{"_index":409,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["23",{"_index":1585,"title":{},"body":{"overview.html":{}}}],["256",{"_index":896,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["3",{"_index":1587,"title":{},"body":{"overview.html":{}}}],["3.1.10",{"_index":1434,"title":{},"body":{"dependencies.html":{}}}],["3.2.2",{"_index":1424,"title":{},"body":{"dependencies.html":{}}}],["3/9",{"_index":1416,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":1415,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":1584,"title":{},"body":{"overview.html":{}}}],["5.1.1",{"_index":1430,"title":{},"body":{"dependencies.html":{}}}],["512",{"_index":903,"title":{},"body":{"entities/Post.html":{}}}],["6.9.13",{"_index":1439,"title":{},"body":{"dependencies.html":{}}}],["7.3.0",{"_index":1427,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1445,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":540,"title":{},"body":{"classes/CreateUserDto.html":{},"overview.html":{}}}],["8.11.5",{"_index":1441,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":425,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"overview.html":{}}}],["9.11.0",{"_index":1435,"title":{},"body":{"dependencies.html":{}}}],["96",{"_index":1219,"title":{},"body":{"entities/User.html":{}}}],["_",{"_index":73,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["abstract",{"_index":735,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["access",{"_index":291,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["accesstoken",{"_index":652,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["accesstokenguard",{"_index":1,"title":{"guards/AccessTokenGuard.html":{}},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["activeuser",{"_index":951,"title":{},"body":{"controllers/PostController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["activeuserdata",{"_index":86,"title":{"interfaces/ActiveUserData.html":{}},"body":{"interfaces/ActiveUserData.html":{},"injectables/CreatePostProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["alice",{"_index":1308,"title":{},"body":{"injectables/UserService.html":{}}}],["alice@doe.com",{"_index":1309,"title":{},"body":{"injectables/UserService.html":{}}}],["allowing",{"_index":1521,"title":{},"body":{"index.html":{}}}],["already",{"_index":573,"title":{},"body":{"injectables/CreateUserProvider.html":{},"classes/PaginationQueryDto.html":{}}}],["amazing",{"_index":1566,"title":{},"body":{"index.html":{}}}],["anymore",{"_index":857,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["api",{"_index":1311,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["apiheader",{"_index":1179,"title":{},"body":{"controllers/UploadsController.html":{}}}],["apiheaders",{"_index":1180,"title":{},"body":{"controllers/UploadsController.html":{}}}],["apioperation",{"_index":944,"title":{},"body":{"controllers/PostController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":917,"title":{},"body":{"controllers/PostController.html":{}}}],["apiproperty",{"_index":369,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty()@isstring()@minlength(3)@isnotempty()@maxlength(256",{"_index":522,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apiproperty({description",{"_index":867,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["apiproperty({example",{"_index":443,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({type",{"_index":356,"title":{},"body":{"classes/CreateManyUsersDTO.html":{}}}],["apipropertyoptional",{"_index":460,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional()@isoptional()@isjson",{"_index":524,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional()@isoptional()@isstring",{"_index":518,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional()@isoptional()@isurl()@maxlength(1024",{"_index":520,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional({description",{"_index":678,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["apiquery",{"_index":1364,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":945,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":946,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["apitags('posts",{"_index":955,"title":{},"body":{"controllers/PostController.html":{}}}],["apitags('users",{"_index":1368,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiversion",{"_index":605,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["app.controller",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":102,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":156,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["app_interceptor",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["appconfig",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":98,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":1371,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["application'})@apiresponse({status",{"_index":1343,"title":{},"body":{"controllers/UsersController.html":{}}}],["applications",{"_index":1474,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":106,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":101,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":357,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{}}}],["async",{"_index":10,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["audience",{"_index":646,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["auth",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/UsersController.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["auth(authtype.none",{"_index":241,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["auth.controller",{"_index":258,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/config/jwt.config",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guards/access",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guards/authentication.guard",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["auth_type_key",{"_index":292,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authcontroller",{"_index":208,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":687,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["authenticate(@body",{"_index":694,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authenticate(googletokendto",{"_index":688,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["authentication",{"_index":686,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authentication.controller",{"_index":269,"title":{},"body":{"modules/AuthModule.html":{}}}],["authentication.controller.ts",{"_index":685,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"coverage.html":{}}}],["authentication.controller.ts:12",{"_index":690,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authentication.service",{"_index":271,"title":{},"body":{"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["authentication.service.ts",{"_index":697,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["authentication.service.ts:13",{"_index":700,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:21",{"_index":702,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:27",{"_index":701,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authenticationguard",{"_index":161,"title":{"guards/AuthenticationGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["authenticationguard.defaultauthtype",{"_index":301,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authmodule",{"_index":117,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":499,"title":{},"body":{"injectables/CreatePostProvider.html":{},"entities/Post.html":{},"injectables/PostService.html":{},"index.html":{},"properties.html":{}}}],["authorid",{"_index":477,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["authorization",{"_index":1188,"title":{},"body":{"controllers/UploadsController.html":{}}}],["authservice",{"_index":231,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["authtype",{"_index":235,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["authtype.bearer",{"_index":293,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtype.none",{"_index":296,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtypeguardmap",{"_index":284,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtypes",{"_index":297,"title":{},"body":{"guards/AuthenticationGuard.html":{},"miscellaneous/variables.html":{}}}],["authtypes.map((type",{"_index":302,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["autoloadentities",{"_index":185,"title":{},"body":{"modules/AppModule.html":{}}}],["await",{"_index":65,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["aws",{"_index":1145,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"dependencies.html":{},"index.html":{}}}],["aws.provider",{"_index":1196,"title":{},"body":{"modules/UploadsModule.html":{},"injectables/UploadsService.html":{}}}],["aws.provider.ts",{"_index":1135,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"coverage.html":{}}}],["aws.provider.ts:10",{"_index":1141,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["aws.provider.ts:27",{"_index":1143,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["aws.provider.ts:7",{"_index":1138,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["backers",{"_index":1567,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":490,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/PostService.html":{},"injectables/UploadsService.html":{},"injectables/UserService.html":{}}}],["badrequestexception(\"please",{"_index":504,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["badrequestexception('mine",{"_index":1211,"title":{},"body":{"injectables/UploadsService.html":{}}}],["badrequestexception('please",{"_index":1007,"title":{},"body":{"injectables/PostService.html":{}}}],["badrequestexception('the",{"_index":572,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["based",{"_index":1345,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["baseurl",{"_index":830,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["bcrypt",{"_index":320,"title":{},"body":{"injectables/BcryptProvider.html":{},"dependencies.html":{}}}],["bcrypt.compare(data",{"_index":324,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.gensalt",{"_index":322,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.hash(data",{"_index":323,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcryptprovider",{"_index":261,"title":{"injectables/BcryptProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["bearer",{"_index":79,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/UploadsController.html":{},"miscellaneous/enumerations.html":{}}}],["between",{"_index":82,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["blog",{"_index":391,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"controllers/PostController.html":{}}}],["board",{"_index":1559,"title":{},"body":{"index.html":{}}}],["body",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"controllers/TagsController.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":1048,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["bootstrap",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1582,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1580,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":1152,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["buffer",{"_index":313,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["building",{"_index":1470,"title":{},"body":{"index.html":{}}}],["business",{"_index":1265,"title":{},"body":{"injectables/UserService.html":{}}}],["callhandler",{"_index":599,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["canactivate",{"_index":11,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["canactivate(context",{"_index":26,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["cascade",{"_index":766,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["cascade'})@joincolumn",{"_index":758,"title":{},"body":{"entities/MetaOption.html":{}}}],["catch",{"_index":69,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["catch((error",{"_index":307,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["cause",{"_index":858,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["channel",{"_index":1535,"title":{},"body":{"index.html":{}}}],["character",{"_index":549,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":541,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["check",{"_index":575,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostService.html":{},"index.html":{}}}],["checks",{"_index":505,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["class",{"_index":52,"title":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{}},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":350,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"overview.html":{}}}],["classserializerinterceptor",{"_index":1356,"title":{},"body":{"controllers/UsersController.html":{}}}],["clicks",{"_index":1520,"title":{},"body":{"index.html":{}}}],["clientid",{"_index":706,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["clientsecret",{"_index":708,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["cloud",{"_index":1506,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":247,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":248,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":249,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_mailmodule",{"_index":738,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_providers",{"_index":739,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule",{"_index":780,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_providers",{"_index":781,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_paginationmodule",{"_index":808,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_exports",{"_index":810,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_providers",{"_index":809,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_postmodule",{"_index":966,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_postmodule_imports",{"_index":967,"title":{},"body":{"modules/PostModule.html":{}}}],["cluster_postmodule_providers",{"_index":968,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_tagsmodule",{"_index":1084,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_exports",{"_index":1086,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_providers",{"_index":1085,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_uploadsmodule",{"_index":1191,"title":{},"body":{"modules/UploadsModule.html":{},"overview.html":{}}}],["cluster_uploadsmodule_providers",{"_index":1192,"title":{},"body":{"modules/UploadsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1388,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1389,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":1390,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":763,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{}}}],["column({type",{"_index":753,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{}}}],["come",{"_index":1527,"title":{},"body":{"index.html":{}}}],["common/interceptors/data",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["common/pagination/pagination.module",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["compare",{"_index":1051,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["comparepassword",{"_index":310,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["comparepassword(data",{"_index":312,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["complete",{"_index":1255,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["compodoc/compodoc",{"_index":1419,"title":{},"body":{"dependencies.html":{}}}],["config/app.config",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database.config",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["config/environment.validation",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["config/jwt.config",{"_index":47,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["config/profile.config",{"_index":1292,"title":{},"body":{"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["configmodule",{"_index":145,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["configmodule.forfeature(jwtconfig",{"_index":198,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["configmodule.forfeature(profileconfig",{"_index":1398,"title":{},"body":{"modules/UsersModule.html":{}}}],["configmodule.forroot",{"_index":174,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":146,"title":{},"body":{"modules/AppModule.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UserService.html":{}}}],["configservice.get('database.autoloadentities",{"_index":186,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.host",{"_index":196,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.name",{"_index":197,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.password",{"_index":194,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.port",{"_index":190,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.synchronize",{"_index":188,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.user",{"_index":192,"title":{},"body":{"modules/AppModule.html":{}}}],["configtype",{"_index":18,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{}}}],["conflictexception",{"_index":337,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/UploadsService.html":{},"injectables/UserCreateManyProvider.html":{}}}],["conflictexception('could",{"_index":1254,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["conflictexception(error",{"_index":346,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/UploadsService.html":{}}}],["connect",{"_index":1247,"title":{},"body":{"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["connecting",{"_index":581,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["connection",{"_index":1261,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["connectiong",{"_index":571,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UserService.html":{}}}],["console.log(environment",{"_index":1303,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(isauth",{"_index":1300,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(newurl",{"_index":835,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["console.log(this.profilconfiguration",{"_index":1304,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(this.profilconfiguration.apikey",{"_index":1305,"title":{},"body":{"injectables/UserService.html":{}}}],["const",{"_index":57,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["constants/auth.constants",{"_index":50,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["constructor",{"_index":14,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["constructor(@inject(forwardref",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(@injectrepository(metaoption",{"_index":793,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["constructor(@injectrepository(tag",{"_index":1105,"title":{},"body":{"injectables/TagsService.html":{}}}],["constructor(@injectrepository(upload",{"_index":1206,"title":{},"body":{"injectables/UploadsService.html":{}}}],["constructor(authservice",{"_index":1268,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(configservice",{"_index":595,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"injectables/UploadToAwsProvider.html":{}}}],["constructor(datasource",{"_index":1236,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["constructor(jwtconfiguration",{"_index":633,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["constructor(jwtservice",{"_index":15,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["constructor(metaoptionrepository",{"_index":788,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["constructor(postrepository",{"_index":485,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["constructor(private",{"_index":54,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"controllers/TagsController.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UserCreateManyProvider.html":{},"controllers/UsersController.html":{}}}],["constructor(reflector",{"_index":287,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["constructor(request",{"_index":816,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["constructor(tagsrepository",{"_index":1095,"title":{},"body":{"injectables/TagsService.html":{}}}],["constructor(uploadrepository",{"_index":1200,"title":{},"body":{"injectables/UploadsService.html":{}}}],["constructor(userreposiory",{"_index":619,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["constructor(userrepository",{"_index":330,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{}}}],["constructor(userservice",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{},"injectables/SignInProvider.html":{}}}],["contain",{"_index":543,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["content",{"_index":375,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/UploadsController.html":{}}}],["contenttype",{"_index":1157,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["context",{"_index":29,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"classes/CreatePostDto.html":{},"injectables/DataResponseInterceptor.html":{}}}],["context.getclass",{"_index":300,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["context.gethandler",{"_index":299,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":58,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["controller",{"_index":97,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"controllers/TagsController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"controllers/TagsController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":239,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('google",{"_index":693,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["controller('meta",{"_index":776,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["controller('post",{"_index":954,"title":{},"body":{"controllers/PostController.html":{}}}],["controller('tags",{"_index":1077,"title":{},"body":{"controllers/TagsController.html":{}}}],["controller('uploads",{"_index":1183,"title":{},"body":{"controllers/UploadsController.html":{}}}],["controller('users",{"_index":1367,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":99,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["conversion",{"_index":861,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["correct",{"_index":1008,"title":{},"body":{"injectables/PostService.html":{}}}],["courses",{"_index":1541,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":1399,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":348,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDTO.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"injectables/PostService.html":{},"controllers/TagsController.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["create(@body",{"_index":778,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/TagsController.html":{}}}],["create(createpostmetaoptiondto",{"_index":770,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["create(createpostmetaoptionsdto",{"_index":791,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["create(createtagdto",{"_index":1069,"title":{},"body":{"controllers/TagsController.html":{}}}],["created",{"_index":922,"title":{},"body":{"controllers/PostController.html":{}}}],["createdate",{"_index":747,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/Upload.html":{}}}],["createdatecolumn",{"_index":749,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/Upload.html":{}}}],["creategoogleuser",{"_index":329,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/UserService.html":{}}}],["creategoogleuser(googleuser",{"_index":334,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/UserService.html":{}}}],["creategoogleuserprovider",{"_index":325,"title":{"injectables/CreateGoogleUserProvider.html":{}},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["createmany",{"_index":1235,"title":{},"body":{"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["createmany(createmanyusersdto",{"_index":1239,"title":{},"body":{"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["createmanyusers",{"_index":1327,"title":{},"body":{"controllers/UsersController.html":{}}}],["createmanyusers(@body",{"_index":1385,"title":{},"body":{"controllers/UsersController.html":{}}}],["createmanyusers(createmanyusersdto",{"_index":1331,"title":{},"body":{"controllers/UsersController.html":{}}}],["createmanyusersdto",{"_index":349,"title":{"classes/CreateManyUsersDTO.html":{}},"body":{"classes/CreateManyUsersDTO.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["createmanyusersdto.users",{"_index":1248,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["createparamdecorator",{"_index":1596,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createpost",{"_index":484,"title":{},"body":{"injectables/CreatePostProvider.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["createpost(@activeuser",{"_index":960,"title":{},"body":{"controllers/PostController.html":{}}}],["createpost(createpostdto",{"_index":488,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostService.html":{}}}],["createpost(user",{"_index":916,"title":{},"body":{"controllers/PostController.html":{}}}],["createpostdto",{"_index":372,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["createpostdto.metaoptions",{"_index":497,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["createpostdto.tags.length",{"_index":502,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["createpostmetaoptiondto",{"_index":772,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createpostmetaoptionsdto",{"_index":394,"title":{"classes/CreatePostMetaOptionsDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"coverage.html":{}}}],["createpostprovider",{"_index":163,"title":{"injectables/CreatePostProvider.html":{}},"body":{"modules/AppModule.html":{},"injectables/CreatePostProvider.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"coverage.html":{},"overview.html":{}}}],["creates",{"_index":918,"title":{},"body":{"controllers/PostController.html":{}}}],["createtagdto",{"_index":515,"title":{"classes/CreateTagDto.html":{}},"body":{"classes/CreateTagDto.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["createtags",{"_index":1092,"title":{},"body":{"injectables/TagsService.html":{}}}],["createtags(createtagdto",{"_index":1098,"title":{},"body":{"injectables/TagsService.html":{}}}],["createuser",{"_index":556,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UserService.html":{}}}],["createuser(createuserdto",{"_index":558,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UserService.html":{}}}],["createuserdto",{"_index":355,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"classes/PatchUserDto.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":565,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["createuserprovider",{"_index":555,"title":{"injectables/CreateUserProvider.html":{}},"body":{"injectables/CreateUserProvider.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["createusers",{"_index":1328,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(@body",{"_index":1383,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(createuserdto",{"_index":1335,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusersprovider",{"_index":1271,"title":{},"body":{"injectables/UserService.html":{}}}],["ctx",{"_index":1599,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1600,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current",{"_index":806,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["currentpage",{"_index":802,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["custom",{"_index":1380,"title":{},"body":{"controllers/UsersController.html":{}}}],["data",{"_index":316,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/HashingProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"controllers/UploadsController.html":{}}}],["data.interface",{"_index":495,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["data.interface.ts",{"_index":90,"title":{},"body":{"interfaces/ActiveUserData.html":{},"coverage.html":{}}}],["database",{"_index":96,"title":{},"body":{"interfaces/ActiveUserData.html":{},"modules/AppModule.html":{},"injectables/CreateUserProvider.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["databaseconfig",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["dataresponseinterceptor",{"_index":166,"title":{"injectables/DataResponseInterceptor.html":{}},"body":{"modules/AppModule.html":{},"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["datasource",{"_index":1237,"title":{},"body":{"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["date",{"_index":406,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{}}}],["date().gettime().tostring().trim",{"_index":1165,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["declarations",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorator",{"_index":1381,"title":{},"body":{"controllers/UsersController.html":{}}}],["decorators",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"classes/GoogleTokenDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/Upload.html":{},"controllers/UploadsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["decorators/auth.decorator",{"_index":234,"title":{},"body":{"controllers/AuthController.html":{}}}],["deeper",{"_index":1537,"title":{},"body":{"index.html":{}}}],["default",{"_index":849,"title":{},"body":{"classes/PaginationQueryDto.html":{},"entities/Post.html":{},"entities/Upload.html":{},"miscellaneous/variables.html":{}}}],["defaultauthtype",{"_index":286,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["defaultvaluepipe",{"_index":1357,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":1376,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":1374,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":19,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["delete",{"_index":926,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["delete(\"soft",{"_index":1081,"title":{},"body":{"controllers/TagsController.html":{}}}],["delete('soft",{"_index":1073,"title":{},"body":{"controllers/TagsController.html":{}}}],["delete(@query('id",{"_index":1079,"title":{},"body":{"controllers/TagsController.html":{}}}],["delete(id",{"_index":980,"title":{},"body":{"injectables/PostService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["deleteat",{"_index":1054,"title":{},"body":{"entities/Tag.html":{}}}],["deleted",{"_index":1004,"title":{},"body":{"injectables/PostService.html":{},"injectables/TagsService.html":{}}}],["deletedatecolumn",{"_index":1056,"title":{},"body":{"entities/Tag.html":{}}}],["deletepost",{"_index":913,"title":{},"body":{"controllers/PostController.html":{}}}],["deletepost(@query(\"id",{"_index":964,"title":{},"body":{"controllers/PostController.html":{}}}],["deletepost(id",{"_index":925,"title":{},"body":{"controllers/PostController.html":{}}}],["dependencies",{"_index":108,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":1498,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":1510,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":1502,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":1519,"title":{},"body":{"index.html":{}}}],["description",{"_index":347,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/UploadsController.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":1483,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":1548,"title":{},"body":{"index.html":{}}}],["discord",{"_index":1534,"title":{},"body":{"index.html":{}}}],["dive",{"_index":1536,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":1400,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["draft",{"_index":436,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["dto",{"_index":948,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["dto.ts",{"_index":865,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["dto.ts:12",{"_index":870,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["dtos/create",{"_index":491,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["dtos/get",{"_index":949,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["dtos/google",{"_index":692,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["dtos/pagination",{"_index":821,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["dtos/patch",{"_index":947,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/UsersController.html":{}}}],["dtos/refresh",{"_index":237,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["dtos/signin.dto",{"_index":233,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["duplicate",{"_index":514,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["e",{"_index":1010,"title":{},"body":{"injectables/PostService.html":{}}}],["e2e",{"_index":1493,"title":{},"body":{"index.html":{}}}],["each",{"_index":371,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{}}}],["eager",{"_index":881,"title":{},"body":{"entities/Post.html":{}}}],["efficient",{"_index":1471,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":1501,"title":{},"body":{"index.html":{}}}],["ejs",{"_index":1433,"title":{},"body":{"dependencies.html":{}}}],["email",{"_index":92,"title":{},"body":{"interfaces/ActiveUserData.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleUser.html":{},"classes/SignInDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["email.provider",{"_index":1295,"title":{},"body":{"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["email.provider.ts",{"_index":617,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"coverage.html":{}}}],["email.provider.ts:13",{"_index":623,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["email.provider.ts:7",{"_index":620,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["enabled",{"_index":859,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["encrypted",{"_index":314,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["enddate",{"_index":662,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{}}}],["endpoint",{"_index":1312,"title":{},"body":{"injectables/UserService.html":{}}}],["ensure",{"_index":511,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostService.html":{},"index.html":{}}}],["enterprise",{"_index":1550,"title":{},"body":{"index.html":{}}}],["entities",{"_index":184,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":744,"title":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{}},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{},"coverage.html":{}}}],["entries",{"_index":1347,"title":{},"body":{"controllers/UsersController.html":{}}}],["enum",{"_index":464,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"entities/Upload.html":{}}}],["enumerations",{"_index":1448,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/auth",{"_index":236,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{}}}],["enums/file",{"_index":1127,"title":{},"body":{"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadsService.html":{}}}],["enums/posttype.enum",{"_index":456,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enums/status.enum",{"_index":457,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["env",{"_index":172,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["env.${env",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["env.development",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["environment",{"_index":1301,"title":{},"body":{"injectables/UserService.html":{}}}],["environmentvalidation",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["eror",{"_index":308,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["err",{"_index":580,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["error",{"_index":70,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["error('function",{"_index":590,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["example",{"_index":386,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["exclude",{"_index":1230,"title":{},"body":{"entities/User.html":{}}}],["executioncontext",{"_index":27,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":628,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["existing",{"_index":934,"title":{},"body":{"controllers/PostController.html":{}}}],["existinguser",{"_index":563,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["exists",{"_index":574,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["experience",{"_index":1539,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":638,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["export",{"_index":51,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["exports",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":48,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/PaginationProvider.html":{},"controllers/UploadsController.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":1140,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{}}}],["extends",{"_index":673,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["extension",{"_index":1163,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["extractrequestfromheader",{"_index":13,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["extractrequestfromheader(request",{"_index":32,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["false",{"_index":398,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["family_name",{"_index":717,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["fast",{"_index":1513,"title":{},"body":{"index.html":{}}}],["featured",{"_index":389,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["featuredimageurl",{"_index":376,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["features",{"_index":1523,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":626,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["fetched",{"_index":1344,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetches",{"_index":1340,"title":{},"body":{"controllers/UsersController.html":{}}}],["few",{"_index":1515,"title":{},"body":{"index.html":{}}}],["field",{"_index":1597,"title":{},"body":{"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["file.buffer",{"_index":1154,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["file.interface",{"_index":1205,"title":{},"body":{"injectables/UploadsService.html":{}}}],["file.interface.ts",{"_index":1132,"title":{},"body":{"interfaces/UploadFile.html":{},"coverage.html":{}}}],["file.mimetype",{"_index":1158,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{}}}],["file.originalname.split('.')[0",{"_index":1160,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["file.size",{"_index":1215,"title":{},"body":{"injectables/UploadsService.html":{}}}],["fileinterceptor",{"_index":1177,"title":{},"body":{"controllers/UploadsController.html":{}}}],["filename",{"_index":1313,"title":{},"body":{"injectables/UserService.html":{}}}],["filetypes",{"_index":1124,"title":{},"body":{"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadsService.html":{},"miscellaneous/enumerations.html":{}}}],["filetypes.image",{"_index":1129,"title":{},"body":{"entities/Upload.html":{},"injectables/UploadsService.html":{}}}],["fileupload",{"_index":1136,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["fileupload(file",{"_index":1139,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["finally",{"_index":1258,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["finalresponse",{"_index":840,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["find",{"_index":1285,"title":{},"body":{"injectables/UserService.html":{}}}],["findall",{"_index":976,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["findall(getuserparamdto",{"_index":1277,"title":{},"body":{"injectables/UserService.html":{}}}],["findall(postquery",{"_index":982,"title":{},"body":{"injectables/PostService.html":{}}}],["findmultpletags",{"_index":1093,"title":{},"body":{"injectables/TagsService.html":{}}}],["findmultpletags(tags",{"_index":1101,"title":{},"body":{"injectables/TagsService.html":{}}}],["findonebyemail",{"_index":618,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"injectables/UserService.html":{}}}],["findonebyemail(email",{"_index":622,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"injectables/UserService.html":{}}}],["findonebygoogleid",{"_index":610,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"injectables/UserService.html":{}}}],["findonebygoogleid(googleid",{"_index":612,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"injectables/UserService.html":{}}}],["findonebygoogleidprovider",{"_index":607,"title":{"injectables/FindOneByGoogleIdProvider.html":{}},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["findonebygoogleidprvider",{"_index":1272,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid",{"_index":1267,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid(id",{"_index":1283,"title":{},"body":{"injectables/UserService.html":{}}}],["findoneuserbyemailprovider",{"_index":616,"title":{"injectables/FindOneUserByEmailProvider.html":{}},"body":{"injectables/FindOneUserByEmailProvider.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["first",{"_index":804,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["firstname",{"_index":528,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleUser.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["focus",{"_index":1522,"title":{},"body":{"index.html":{}}}],["follow",{"_index":1553,"title":{},"body":{"index.html":{}}}],["forwardref",{"_index":257,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["framework",{"_index":1469,"title":{},"body":{"index.html":{}}}],["full",{"_index":1549,"title":{},"body":{"index.html":{}}}],["function",{"_index":582,"title":{},"body":{"injectables/CreateUserProvider.html":{},"coverage.html":{}}}],["functions",{"_index":1462,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":1518,"title":{},"body":{"index.html":{}}}],["generate",{"_index":1033,"title":{},"body":{"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["generatefilename",{"_index":1137,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["generatefilename(file",{"_index":1142,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["generatetoken",{"_index":631,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["generatetoken(user",{"_index":635,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["generatetokenprovider",{"_index":1029,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["generatetokensprovider",{"_index":251,"title":{"injectables/GenerateTokensProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["ger",{"_index":679,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["get('/:id/:optional",{"_index":1370,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id/:optional?')@apioperation({summary",{"_index":1339,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:userid",{"_index":930,"title":{},"body":{"controllers/PostController.html":{}}}],["gethello",{"_index":103,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getpost",{"_index":914,"title":{},"body":{"controllers/PostController.html":{}}}],["getpost(@param('userid",{"_index":956,"title":{},"body":{"controllers/PostController.html":{}}}],["getpost(userid",{"_index":928,"title":{},"body":{"controllers/PostController.html":{}}}],["getpostbasedto",{"_index":659,"title":{"classes/GetPostBaseDto.html":{}},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"coverage.html":{}}}],["getpostdto",{"_index":672,"title":{"classes/GetPostDto.html":{}},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["getting",{"_index":1465,"title":{"index.html":{}},"body":{}}],["getuserparamdto",{"_index":1280,"title":{},"body":{"injectables/UserService.html":{}}}],["getusers",{"_index":1329,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(/*@param('id",{"_index":1372,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getusersparamdto",{"_index":1338,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersparamdto",{"_index":675,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["given_name",{"_index":716,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["google",{"_index":327,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{}}}],["googleauthenticationcontroller",{"_index":256,"title":{"controllers/GoogleAuthenticationController.html":{}},"body":{"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{},"coverage.html":{}}}],["googleauthenticationservice",{"_index":252,"title":{"injectables/GoogleAuthenticationService.html":{}},"body":{"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"coverage.html":{},"overview.html":{}}}],["googleid",{"_index":614,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleUser.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["googletokendto",{"_index":689,"title":{"classes/GoogleTokenDto.html":{}},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"coverage.html":{}}}],["googletokendto.token",{"_index":715,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["googleuser",{"_index":335,"title":{"classes/GoogleUser.html":{}},"body":{"injectables/CreateGoogleUserProvider.html":{},"classes/GoogleUser.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["graph",{"_index":1544,"title":{},"body":{"index.html":{}}}],["grow",{"_index":1563,"title":{},"body":{"index.html":{}}}],["guard",{"_index":0,"title":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}},"body":{"coverage.html":{}}}],["guards",{"_index":2,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"overview.html":{}}}],["hands",{"_index":1538,"title":{},"body":{"index.html":{}}}],["handy",{"_index":1528,"title":{},"body":{"index.html":{}}}],["hashing.provider",{"_index":319,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/SignInProvider.html":{}}}],["hashingprovider",{"_index":250,"title":{"injectables/HashingProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["hashpassword",{"_index":311,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["hashpassword(data",{"_index":317,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["header",{"_index":78,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/UsersController.html":{}}}],["headers",{"_index":1358,"title":{},"body":{"controllers/UsersController.html":{}}}],["hello",{"_index":205,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":1542,"title":{},"body":{"index.html":{}}}],["here",{"_index":1571,"title":{},"body":{"index.html":{}}}],["host",{"_index":195,"title":{},"body":{"modules/AppModule.html":{}}}],["http://localhost.com/images/image1.jpg",{"_index":392,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["httpcode",{"_index":228,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":240,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpexception",{"_index":1288,"title":{},"body":{"injectables/UserService.html":{}}}],["https://${this.configservice.get('appconfig.awscloudfronturl')}/${name",{"_index":1214,"title":{},"body":{"injectables/UploadsService.html":{}}}],["https://nestjs.com",{"_index":1576,"title":{},"body":{"index.html":{}}}],["https://schema.org",{"_index":418,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https:\\/\\/schema.org\\\",\\r\\n",{"_index":469,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["httpstatus",{"_index":229,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["httpstatus.moved_permanently",{"_index":1310,"title":{},"body":{"injectables/UserService.html":{}}}],["id",{"_index":95,"title":{},"body":{"interfaces/ActiveUserData.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["id.provider",{"_index":1296,"title":{},"body":{"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["id.provider.ts",{"_index":609,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"coverage.html":{}}}],["id.provider.ts:12",{"_index":613,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{}}}],["id.provider.ts:7",{"_index":611,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{}}}],["identifier",{"_index":1401,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":441,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"injectables/PostService.html":{}}}],["idtoken",{"_index":714,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["image",{"_index":390,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UploadsController.html":{},"miscellaneous/enumerations.html":{}}}],["image/gif",{"_index":1207,"title":{},"body":{"injectables/UploadsService.html":{}}}],["image/jpeg",{"_index":1208,"title":{},"body":{"injectables/UploadsService.html":{}}}],["image/jpg",{"_index":1209,"title":{},"body":{"injectables/UploadsService.html":{}}}],["image/png'].includes(file.mimetype",{"_index":1210,"title":{},"body":{"injectables/UploadsService.html":{}}}],["implemented",{"_index":591,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["implements",{"_index":53,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["implicit",{"_index":860,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["import",{"_index":37,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["imports",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{}}}],["in')@httpcode(httpstatus.ok)@auth(authtype.none",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{}}}],["in(tags",{"_index":1110,"title":{},"body":{"injectables/TagsService.html":{}}}],["in.provider",{"_index":264,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["in.provider.ts",{"_index":1043,"title":{},"body":{"injectables/SignInProvider.html":{},"coverage.html":{}}}],["in.provider.ts:12",{"_index":1044,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["in.provider.ts:24",{"_index":1045,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["inejectrepository",{"_index":583,"title":{},"body":{"injectables/CreateUserProvider.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["information",{"_index":1504,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":1525,"title":{},"body":{"index.html":{}}}],["inject",{"_index":38,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PaginationProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{}}}],["inject(forwardref",{"_index":562,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{}}}],["inject(jwtconfig.key",{"_index":56,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["inject(profileconfig.key",{"_index":1297,"title":{},"body":{"injectables/UserService.html":{}}}],["inject(request",{"_index":824,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["injectable",{"_index":39,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":202,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":340,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostService.html":{},"injectables/TagsService.html":{},"injectables/UploadsService.html":{},"injectables/UserService.html":{}}}],["injectrepository(metaoption",{"_index":988,"title":{},"body":{"injectables/PostService.html":{}}}],["injectrepository(post",{"_index":496,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostService.html":{}}}],["injectrepository(user",{"_index":343,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/UserService.html":{}}}],["inside",{"_index":513,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["install",{"_index":1517,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":1481,"title":{},"body":{"index.html":{}}}],["instance",{"_index":304,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["instance.canactivate(context",{"_index":306,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["integer",{"_index":476,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["interact",{"_index":1545,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":594,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["intercept(context",{"_index":597,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["interface",{"_index":85,"title":{"interfaces/ActiveUserData.html":{},"interfaces/Paginated.html":{},"interfaces/UploadFile.html":{}},"body":{"interfaces/ActiveUserData.html":{},"interfaces/Paginated.html":{},"interfaces/UploadFile.html":{},"coverage.html":{}}}],["interfaces",{"_index":87,"title":{},"body":{"interfaces/ActiveUserData.html":{},"interfaces/Paginated.html":{},"interfaces/UploadFile.html":{},"overview.html":{}}}],["interfaces/active",{"_index":644,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["interfaces/google",{"_index":341,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/UserService.html":{}}}],["interfaces/paginated.interface",{"_index":823,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["interfaces/upload",{"_index":1204,"title":{},"body":{"injectables/UploadsService.html":{}}}],["intersectiontype",{"_index":667,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{}}}],["intersectiontype(getpostbasedto",{"_index":674,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{}}}],["inversepost",{"_index":1001,"title":{},"body":{"injectables/PostService.html":{}}}],["ip",{"_index":1359,"title":{},"body":{"controllers/UsersController.html":{}}}],["isarray",{"_index":363,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{}}}],["isauth",{"_index":1298,"title":{},"body":{"injectables/UserService.html":{}}}],["isdate",{"_index":668,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{}}}],["isdate()@isoptional",{"_index":664,"title":{},"body":{"classes/GetPostBaseDto.html":{}}}],["isemail",{"_index":551,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["isemail()@isnotempty",{"_index":1038,"title":{},"body":{"classes/SignInDto.html":{}}}],["isenum",{"_index":446,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":467,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus)@isnotempty()@apiproperty({enum",{"_index":435,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":463,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype)@isnotempty()@apiproperty({enum",{"_index":401,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isequal",{"_index":1047,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["isglobal",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":447,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["isiso8601",{"_index":448,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isiso8601()@isoptional()@apipropertyoptional({description",{"_index":407,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":449,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{}}}],["isnotempty",{"_index":364,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GoogleTokenDto.html":{},"classes/PatchPostDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{}}}],["isnotempty()@isjson",{"_index":480,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["isnotempty()@isstring",{"_index":726,"title":{},"body":{"classes/GoogleTokenDto.html":{},"classes/RefreshTokenDto.html":{}}}],["isoptional",{"_index":450,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{}}}],["isoptional()@apipropertyoptional({type",{"_index":396,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional()@isarray()@isint({each",{"_index":439,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional()@isjson()@apipropertyoptional({description",{"_index":413,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional()@ispositive",{"_index":852,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["isoptional()@isurl()@maxlength(1024)@apipropertyoptional({description",{"_index":388,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["ispositive",{"_index":855,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["isstring",{"_index":451,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GoogleTokenDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{}}}],["isstring()@isnotempty",{"_index":1040,"title":{},"body":{"classes/SignInDto.html":{}}}],["isstring()@isnotempty()@apiproperty({description",{"_index":421,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["isstring()@isnotempty()@isemail()@maxlength(96",{"_index":530,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":532,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(8)@matches(/^(?=.*[a",{"_index":536,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@apipropertyoptional({description",{"_index":385,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":534,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["issuer",{"_index":648,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["isurl",{"_index":452,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["items",{"_index":359,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{}}}],["itemsperpage",{"_index":800,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["job",{"_index":1556,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":1558,"title":{},"body":{"index.html":{}}}],["john",{"_index":1306,"title":{},"body":{"injectables/UserService.html":{}}}],["john@doe.com",{"_index":1307,"title":{},"body":{"injectables/UserService.html":{}}}],["joi",{"_index":1436,"title":{},"body":{"dependencies.html":{}}}],["join",{"_index":1569,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":764,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["jointable",{"_index":905,"title":{},"body":{"entities/Post.html":{}}}],["json",{"_index":415,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{}}}],["jwtconfig",{"_index":46,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"modules/UsersModule.html":{}}}],["jwtconfiguration",{"_index":17,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["jwtmodule",{"_index":154,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["jwtmodule.registerasync(jwtconfig.asprovider",{"_index":199,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["jwtservice",{"_index":16,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["kamil",{"_index":1573,"title":{},"body":{"index.html":{}}}],["key",{"_index":1155,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"index.html":{}}}],["keyof",{"_index":1598,"title":{},"body":{"miscellaneous/variables.html":{}}}],["last",{"_index":805,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["lastname",{"_index":529,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleUser.html":{},"entities/User.html":{}}}],["later",{"_index":570,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["learn",{"_index":1531,"title":{},"body":{"index.html":{}}}],["legend",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":886,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{}}}],["letter",{"_index":546,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letters",{"_index":428,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["library",{"_index":704,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"dependencies.html":{}}}],["license",{"_index":1579,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1561,"title":{},"body":{"index.html":{}}}],["limit",{"_index":847,"title":{},"body":{"classes/PaginationQueryDto.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["line",{"_index":75,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["linenumber",{"_index":1315,"title":{},"body":{"injectables/UserService.html":{}}}],["linkedin",{"_index":1555,"title":{},"body":{"index.html":{}}}],["links",{"_index":798,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["list",{"_index":1341,"title":{},"body":{"controllers/UsersController.html":{}}}],["literal",{"_index":799,"title":{},"body":{"interfaces/Paginated.html":{}}}],["load",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["loginticket",{"_index":712,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["loginticket.getpayload",{"_index":718,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["long",{"_index":542,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["looking",{"_index":1505,"title":{},"body":{"index.html":{}}}],["loop",{"_index":1552,"title":{},"body":{"index.html":{}}}],["lowercase",{"_index":547,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["mail/mail.module",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["mailmodule",{"_index":118,"title":{"modules/MailModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{},"modules.html":{},"overview.html":{}}}],["mailservice",{"_index":740,"title":{"injectables/MailService.html":{}},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{},"coverage.html":{},"overview.html":{}}}],["main.ts",{"_index":862,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["makes",{"_index":1511,"title":{},"body":{"index.html":{}}}],["managing",{"_index":1524,"title":{},"body":{"index.html":{}}}],["many",{"_index":352,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["many')@useguards(accesstokenguard",{"_index":1333,"title":{},"body":{"controllers/UsersController.html":{}}}],["many.provider",{"_index":1293,"title":{},"body":{"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["many.provider.ts",{"_index":1234,"title":{},"body":{"injectables/UserCreateManyProvider.html":{},"coverage.html":{}}}],["many.provider.ts:11",{"_index":1240,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["many.provider.ts:8",{"_index":1238,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["manytomany",{"_index":906,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytomany(undefined",{"_index":899,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytoone",{"_index":907,"title":{},"body":{"entities/Post.html":{}}}],["manytoone(undefined",{"_index":879,"title":{},"body":{"entities/Post.html":{}}}],["map",{"_index":602,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["matches",{"_index":453,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":554,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":465,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["matching",{"_index":84,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(totalitems",{"_index":837,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["mau",{"_index":1508,"title":{},"body":{"index.html":{}}}],["maxlength",{"_index":454,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(1024",{"_index":471,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(256",{"_index":466,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(512",{"_index":462,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["maxlength(96",{"_index":552,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":426,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["meta",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"entities/Post.html":{},"coverage.html":{}}}],["metadata",{"_index":1443,"title":{},"body":{"dependencies.html":{}}}],["metaoption",{"_index":745,"title":{"entities/MetaOption.html":{}},"body":{"entities/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["metaoptionrepository",{"_index":790,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostService.html":{}}}],["metaoptions",{"_index":377,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"entities/Post.html":{},"injectables/PostService.html":{}}}],["metaoptions.post",{"_index":890,"title":{},"body":{"entities/Post.html":{}}}],["metaoptionscontroller",{"_index":767,"title":{"controllers/MetaOptionsController.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"coverage.html":{}}}],["metaoptionservice",{"_index":777,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["metaoptionsmodule",{"_index":119,"title":{"modules/MetaOptionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules.html":{},"overview.html":{}}}],["metaoptionsservice",{"_index":773,"title":{"injectables/MetaOptionsService.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{},"overview.html":{}}}],["metavalue",{"_index":474,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{}}}],["method",{"_index":1279,"title":{},"body":{"injectables/UserService.html":{}}}],["methods",{"_index":9,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["mime",{"_index":1115,"title":{},"body":{"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadsService.html":{}}}],["minlength",{"_index":455,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":527,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":461,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":553,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":1447,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1560,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1486,"title":{},"body":{"index.html":{}}}],["module",{"_index":105,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":107,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/mailer",{"_index":1421,"title":{},"body":{"dependencies.html":{}}}],["moment",{"_index":568,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UserService.html":{}}}],["more",{"_index":1503,"title":{},"body":{"index.html":{}}}],["moved",{"_index":1319,"title":{},"body":{"injectables/UserService.html":{}}}],["multipart/form",{"_index":1187,"title":{},"body":{"controllers/UploadsController.html":{}}}],["myśliwiec",{"_index":1574,"title":{},"body":{"index.html":{}}}],["name",{"_index":23,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["name.replace(/\\s/g",{"_index":1161,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["need",{"_index":856,"title":{},"body":{"classes/PaginationQueryDto.html":{},"index.html":{}}}],["needs",{"_index":868,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["nest",{"_index":1475,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1578,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":601,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["nestjs",{"_index":207,"title":{},"body":{"injectables/AppService.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/common",{"_index":41,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":42,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":158,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/PaginationProvider.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":43,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":876,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1178,"title":{},"body":{"controllers/UploadsController.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":370,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":137,"title":{},"body":{"modules/AppModule.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["new",{"_index":62,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["newurl",{"_index":833,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&pages=${nextpage",{"_index":844,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&pages=${paginationquery.page",{"_index":843,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&pages=${previouspage",{"_index":845,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&pages=${totalpages",{"_index":842,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&pages=1",{"_index":841,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newuser",{"_index":576,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/UserCreateManyProvider.html":{}}}],["newusers",{"_index":1241,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["newusers.push(result",{"_index":1251,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["next",{"_index":598,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["next.handle().pipe(map((data",{"_index":604,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["nextpage",{"_index":838,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["node.js",{"_index":1468,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":1438,"title":{},"body":{"dependencies.html":{}}}],["none",{"_index":1379,"title":{},"body":{"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["npm",{"_index":1480,"title":{},"body":{"index.html":{}}}],["null",{"_index":395,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{}}}],["nullable",{"_index":754,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{}}}],["number",{"_index":94,"title":{},"body":{"interfaces/ActiveUserData.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["oauth2client",{"_index":703,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["oauth2client(clientid",{"_index":711,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["oauthclient",{"_index":698,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["object",{"_index":397,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["objectliteral",{"_index":822,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["observable",{"_index":44,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{}}}],["occured",{"_index":1317,"title":{},"body":{"injectables/UserService.html":{}}}],["offer",{"_index":1557,"title":{},"body":{"index.html":{}}}],["official",{"_index":1509,"title":{},"body":{"index.html":{}}}],["ondelete",{"_index":757,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["one",{"_index":544,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["onetomany",{"_index":1231,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":1227,"title":{},"body":{"entities/User.html":{}}}],["onetoone",{"_index":765,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["onetoone(undefined",{"_index":756,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["onmoduleinit",{"_index":699,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["open",{"_index":1562,"title":{},"body":{"index.html":{}}}],["operations",{"_index":1266,"title":{},"body":{"injectables/UserService.html":{}}}],["option.dtos",{"_index":459,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{}}}],["option.dtos.ts",{"_index":479,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["option.dtos.ts:6",{"_index":481,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["option.entity",{"_index":784,"title":{},"body":{"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{}}}],["option.entity.ts",{"_index":746,"title":{},"body":{"entities/MetaOption.html":{},"coverage.html":{}}}],["option.entity.ts:13",{"_index":755,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:16",{"_index":750,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:19",{"_index":761,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:26",{"_index":759,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:7",{"_index":752,"title":{},"body":{"entities/MetaOption.html":{}}}],["optional",{"_index":25,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["options",{"_index":769,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options.controller",{"_index":783,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.controller.ts",{"_index":768,"title":{},"body":{"controllers/MetaOptionsController.html":{},"coverage.html":{}}}],["options.controller.ts:11",{"_index":771,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options.module",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["options.module.ts",{"_index":782,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.service",{"_index":775,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["options.service.ts",{"_index":787,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["options.service.ts:12",{"_index":792,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options.service.ts:8",{"_index":789,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options/dtos/create",{"_index":458,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/Post.html":{},"coverage.html":{}}}],["options/meta",{"_index":141,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"entities/Post.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["options/providers/meta",{"_index":786,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["out",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":1583,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1418,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":848,"title":{},"body":{"classes/PaginationQueryDto.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["page','story','series",{"_index":404,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["paginated",{"_index":796,"title":{"interfaces/Paginated.html":{}},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["paginatequery",{"_index":815,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginatequery(paginationquery",{"_index":818,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationmodule",{"_index":120,"title":{"modules/PaginationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules.html":{},"overview.html":{}}}],["paginationprovider",{"_index":811,"title":{"injectables/PaginationProvider.html":{}},"body":{"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"coverage.html":{},"overview.html":{}}}],["paginationquery",{"_index":820,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquery.limit",{"_index":828,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquery.page",{"_index":827,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquerydto",{"_index":669,"title":{"classes/PaginationQueryDto.html":{}},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["param",{"_index":938,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["param.dto",{"_index":1289,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["param.dto.ts",{"_index":677,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:13",{"_index":682,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parameterindex",{"_index":587,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["parameters",{"_index":21,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["parseintpipe",{"_index":939,"title":{},"body":{"controllers/PostController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["part",{"_index":77,"title":{},"body":{"guards/AccessTokenGuard.html":{},"index.html":{}}}],["partialtype",{"_index":871,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":866,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":875,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["password",{"_index":193,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{}}}],["patch",{"_index":940,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["patchpostdto",{"_index":863,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["patchpostdto.content",{"_index":1014,"title":{},"body":{"injectables/PostService.html":{}}}],["patchpostdto.featuredimageurl",{"_index":1022,"title":{},"body":{"injectables/PostService.html":{}}}],["patchpostdto.id",{"_index":1009,"title":{},"body":{"injectables/PostService.html":{}}}],["patchpostdto.posttype",{"_index":1020,"title":{},"body":{"injectables/PostService.html":{}}}],["patchpostdto.publishon",{"_index":1024,"title":{},"body":{"injectables/PostService.html":{}}}],["patchpostdto.slug",{"_index":1018,"title":{},"body":{"injectables/PostService.html":{}}}],["patchpostdto.status",{"_index":1016,"title":{},"body":{"injectables/PostService.html":{}}}],["patchpostdto.tags.length",{"_index":1006,"title":{},"body":{"injectables/PostService.html":{}}}],["patchpostdto.title",{"_index":1012,"title":{},"body":{"injectables/PostService.html":{}}}],["patchuser",{"_index":1330,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":1387,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(patchuserdto",{"_index":1354,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":873,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["path",{"_index":1116,"title":{},"body":{"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{}}}],["path.extname(file.originalname",{"_index":1164,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["payload",{"_index":64,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{}}}],["per",{"_index":1349,"title":{},"body":{"controllers/UsersController.html":{}}}],["perform",{"_index":1264,"title":{},"body":{"injectables/UserService.html":{}}}],["permanently",{"_index":1318,"title":{},"body":{"injectables/UserService.html":{}}}],["person",{"_index":419,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["person\\\"\\r\\n",{"_index":470,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["pg",{"_index":1440,"title":{},"body":{"dependencies.html":{}}}],["platform",{"_index":1507,"title":{},"body":{"index.html":{}}}],["please",{"_index":569,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["port",{"_index":189,"title":{},"body":{"modules/AppModule.html":{}}}],["position",{"_index":1351,"title":{},"body":{"controllers/UsersController.html":{}}}],["possible",{"_index":402,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["post",{"_index":230,"title":{"entities/Post.html":{}},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"controllers/GoogleAuthenticationController.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"controllers/UploadsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":919,"title":{},"body":{"controllers/PostController.html":{}}}],["post'})@isstring()@minlength(4)@maxlength(512)@isnotempty",{"_index":444,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@matches(/^[a",{"_index":423,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["post('create",{"_index":1332,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('file",{"_index":1185,"title":{},"body":{"controllers/UploadsController.html":{}}}],["post('file')@useinterceptors(undefined)@apiheaders(['undefined",{"_index":1171,"title":{},"body":{"controllers/UploadsController.html":{}}}],["post('refresh",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('sign",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@auth(authtype.none)@useinterceptors(classserializerinterceptor",{"_index":1336,"title":{},"body":{"controllers/UsersController.html":{}}}],["post.author",{"_index":1228,"title":{},"body":{"entities/User.html":{}}}],["post.content",{"_index":1013,"title":{},"body":{"injectables/PostService.html":{}}}],["post.controller",{"_index":970,"title":{},"body":{"modules/PostModule.html":{}}}],["post.dtos",{"_index":492,"title":{},"body":{"injectables/CreatePostProvider.html":{},"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["post.dtos.ts",{"_index":374,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["post.dtos.ts:115",{"_index":400,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:17",{"_index":445,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:25",{"_index":405,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:32",{"_index":387,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:44",{"_index":433,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:53",{"_index":438,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:61",{"_index":420,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:71",{"_index":393,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:80",{"_index":412,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dtos.ts:92",{"_index":442,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.entity",{"_index":493,"title":{},"body":{"injectables/CreatePostProvider.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{}}}],["post.featuredimageurl",{"_index":1021,"title":{},"body":{"injectables/PostService.html":{}}}],["post.metaoptions",{"_index":509,"title":{},"body":{"injectables/CreatePostProvider.html":{},"entities/MetaOption.html":{}}}],["post.metaoptions.id",{"_index":1003,"title":{},"body":{"injectables/PostService.html":{}}}],["post.posttype",{"_index":1019,"title":{},"body":{"injectables/PostService.html":{}}}],["post.provider",{"_index":165,"title":{},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{}}}],["post.provider.ts",{"_index":483,"title":{},"body":{"injectables/CreatePostProvider.html":{},"coverage.html":{}}}],["post.provider.ts:11",{"_index":486,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["post.provider.ts:20",{"_index":489,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["post.publishon",{"_index":1023,"title":{},"body":{"injectables/PostService.html":{}}}],["post.slug",{"_index":1017,"title":{},"body":{"injectables/PostService.html":{}}}],["post.status",{"_index":1015,"title":{},"body":{"injectables/PostService.html":{}}}],["post.tags",{"_index":1025,"title":{},"body":{"injectables/PostService.html":{},"entities/Tag.html":{}}}],["post.title",{"_index":1011,"title":{},"body":{"injectables/PostService.html":{}}}],["post/post.module",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["post/services/create",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["post/services/post.service",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["postcontroller",{"_index":911,"title":{"controllers/PostController.html":{}},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{},"coverage.html":{}}}],["postgres",{"_index":183,"title":{},"body":{"modules/AppModule.html":{}}}],["postmodule",{"_index":121,"title":{"modules/PostModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"modules.html":{},"overview.html":{}}}],["postquery",{"_index":929,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["postquery.limit",{"_index":994,"title":{},"body":{"injectables/PostService.html":{}}}],["postquery.page",{"_index":993,"title":{},"body":{"injectables/PostService.html":{}}}],["postrepository",{"_index":487,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostService.html":{}}}],["posts",{"_index":990,"title":{},"body":{"injectables/PostService.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["posts.dto",{"_index":950,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["posts.dto.ts",{"_index":661,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"coverage.html":{}}}],["posts.dto.ts:12",{"_index":665,"title":{},"body":{"classes/GetPostBaseDto.html":{}}}],["posts.dto.ts:8",{"_index":666,"title":{},"body":{"classes/GetPostBaseDto.html":{}}}],["postservice",{"_index":133,"title":{"injectables/PostService.html":{}},"body":{"modules/AppModule.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":434,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["poststatus.draft",{"_index":910,"title":{},"body":{"entities/Post.html":{}}}],["posttype",{"_index":378,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["posttype.post",{"_index":909,"title":{},"body":{"entities/Post.html":{}}}],["prefix",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"controllers/TagsController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{}}}],["previous",{"_index":807,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["previouspage",{"_index":839,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["primarygeneratedcolumn",{"_index":751,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{}}}],["private",{"_index":12,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadsService.html":{},"injectables/UserService.html":{}}}],["process",{"_index":567,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["process.env.node_env",{"_index":173,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["production",{"_index":1488,"title":{},"body":{"index.html":{}}}],["profilconfiguration",{"_index":1269,"title":{},"body":{"injectables/UserService.html":{}}}],["profileconfig",{"_index":1291,"title":{},"body":{"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["progressive",{"_index":1467,"title":{},"body":{"index.html":{}}}],["project",{"_index":1478,"title":{},"body":{"index.html":{}}}],["promise",{"_index":31,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"injectables/UploadToAwsProvider.html":{}}}],["promise.all",{"_index":653,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["promise.resolve",{"_index":305,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["properties",{"_index":91,"title":{"properties.html":{}},"body":{"interfaces/ActiveUserData.html":{},"guards/AuthenticationGuard.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"entities/User.html":{},"properties.html":{}}}],["propertykey",{"_index":586,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["provide",{"_index":200,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["providers",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/bcrypt.provider",{"_index":262,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/create",{"_index":1395,"title":{},"body":{"modules/UsersModule.html":{}}}],["providers/find",{"_index":1396,"title":{},"body":{"modules/UsersModule.html":{}}}],["providers/generate",{"_index":265,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["providers/google",{"_index":691,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["providers/hashing.provider",{"_index":260,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/mail.service",{"_index":742,"title":{},"body":{"modules/MailModule.html":{}}}],["providers/meta",{"_index":774,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["providers/pagination.provider",{"_index":813,"title":{},"body":{"modules/PaginationModule.html":{}}}],["providers/refresh",{"_index":267,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["providers/sign",{"_index":263,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["providers/tags.service",{"_index":1076,"title":{},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{}}}],["providers/upload",{"_index":1195,"title":{},"body":{"modules/UploadsModule.html":{}}}],["providers/uploads.service",{"_index":1182,"title":{},"body":{"controllers/UploadsController.html":{},"modules/UploadsModule.html":{}}}],["providers/user",{"_index":1394,"title":{},"body":{"modules/UsersModule.html":{}}}],["providers/user.service",{"_index":1363,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["published",{"_index":408,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["publishon",{"_index":379,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["query",{"_index":941,"title":{},"body":{"controllers/PostController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["query'})@apiquery({name",{"_index":1346,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit",{"_index":1373,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":1375,"title":{},"body":{"controllers/UsersController.html":{}}}],["query.dto",{"_index":671,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"injectables/PaginationProvider.html":{}}}],["query.dto.ts",{"_index":846,"title":{},"body":{"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["query.dto.ts:12",{"_index":854,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["query.dto.ts:8",{"_index":853,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["queryrunner",{"_index":1242,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["queryrunner.committransaction",{"_index":1252,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["queryrunner.connect",{"_index":1244,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["queryrunner.manager.create(user",{"_index":1249,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["queryrunner.manager.save(newuser",{"_index":1250,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["queryrunner.release",{"_index":1259,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["queryrunner.rollbacktransaction",{"_index":1253,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["queryrunner.starttransaction",{"_index":1245,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["questions",{"_index":1532,"title":{},"body":{"index.html":{}}}],["r\\n",{"_index":468,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["read",{"_index":1570,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":55,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["ready",{"_index":1497,"title":{},"body":{"index.html":{}}}],["real",{"_index":1546,"title":{},"body":{"index.html":{}}}],["record",{"_index":294,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["reflect",{"_index":1442,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":288,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["refreshtoken",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GenerateTokensProvider.html":{},"classes/RefreshTokenDto.html":{}}}],["refreshtoken(@body",{"_index":245,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtoken(refreshtokendto",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["refreshtokendto",{"_index":216,"title":{"classes/RefreshTokenDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"coverage.html":{}}}],["refreshtokenprovider",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokens",{"_index":1028,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["refreshtokens(refreshtokendto",{"_index":1031,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["refreshtokensprovider",{"_index":253,"title":{"injectables/RefreshTokensProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokensProvider.html":{},"coverage.html":{},"overview.html":{}}}],["registered",{"_index":1342,"title":{},"body":{"controllers/UsersController.html":{}}}],["relations",{"_index":992,"title":{},"body":{"injectables/PostService.html":{}}}],["release",{"_index":1260,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["repository",{"_index":331,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"injectables/TagsService.html":{},"injectables/UploadsService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["repository.count",{"_index":836,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["repository.find",{"_index":825,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["req",{"_index":942,"title":{},"body":{"controllers/PostController.html":{}}}],["request",{"_index":33,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/CreateUserProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["request.headers.authorization?.split",{"_index":74,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["request[request_user_key",{"_index":68,"title":{},"body":{"guards/AccessTokenGuard.html":{},"miscellaneous/variables.html":{}}}],["request_user_key",{"_index":49,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["requesttimeoutexception",{"_index":560,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/PostService.html":{},"injectables/SignInProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["requesttimeoutexception('could",{"_index":1246,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["requesttimeoutexception('unable",{"_index":566,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["requesttimeoutexception(error",{"_index":625,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UploadToAwsProvider.html":{}}}],["required",{"_index":358,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["requiring",{"_index":1514,"title":{},"body":{"index.html":{}}}],["reset",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":1526,"title":{},"body":{"index.html":{}}}],["response",{"_index":921,"title":{},"body":{"controllers/PostController.html":{}}}],["response.interceptor",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["response.interceptor.ts",{"_index":593,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["response.interceptor.ts:6",{"_index":596,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["response.interceptor.ts:9",{"_index":600,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["response/data",{"_index":168,"title":{},"body":{"modules/AppModule.html":{},"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["result",{"_index":1108,"title":{},"body":{"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{}}}],["results",{"_index":83,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":71,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":1348,"title":{},"body":{"controllers/UsersController.html":{}}}],["returns",{"_index":30,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["review",{"_index":1458,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["run",{"_index":1482,"title":{},"body":{"index.html":{}}}],["runs",{"_index":1500,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":45,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{},"dependencies.html":{}}}],["s3",{"_index":1144,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["s3.upload",{"_index":1151,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["salt",{"_index":321,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["scalable",{"_index":1472,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":1457,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["scheduled','review",{"_index":437,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["schema",{"_index":380,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["sdk",{"_index":1146,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"dependencies.html":{}}}],["secret",{"_index":650,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["serialize",{"_index":414,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":1461,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["server",{"_index":1173,"title":{},"body":{"controllers/UploadsController.html":{},"index.html":{}}}],["service/auth.service",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["services/create",{"_index":973,"title":{},"body":{"modules/PostModule.html":{}}}],["services/post.service",{"_index":943,"title":{},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{}}}],["setmetadata",{"_index":1360,"title":{},"body":{"controllers/UsersController.html":{}}}],["setmetadata('authtype",{"_index":1378,"title":{},"body":{"controllers/UsersController.html":{}}}],["setmetadata(auth_type_key",{"_index":1602,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":1479,"title":{},"body":{"index.html":{}}}],["side",{"_index":1473,"title":{},"body":{"index.html":{}}}],["sidebarenabled\":true",{"_index":475,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["signin",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["signin(@body",{"_index":242,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(signindto",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["signindto",{"_index":223,"title":{"classes/SignInDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"coverage.html":{}}}],["signinprovider",{"_index":254,"title":{"injectables/SignInProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["signtoken",{"_index":632,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["signtoken(userid",{"_index":637,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["simple",{"_index":1516,"title":{},"body":{"index.html":{}}}],["single",{"_index":1286,"title":{},"body":{"injectables/UserService.html":{}}}],["size",{"_index":1117,"title":{},"body":{"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadsService.html":{}}}],["skip",{"_index":826,"title":{},"body":{"injectables/PaginationProvider.html":{},"injectables/PostService.html":{}}}],["slug",{"_index":381,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["small",{"_index":427,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["social/google",{"_index":268,"title":{},"body":{"modules/AuthModule.html":{}}}],["social/providers/google",{"_index":270,"title":{},"body":{"modules/AuthModule.html":{}}}],["softdelete",{"_index":1068,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdelete(@query('id",{"_index":1082,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdelete(id",{"_index":1072,"title":{},"body":{"controllers/TagsController.html":{}}}],["softremove",{"_index":1094,"title":{},"body":{"injectables/TagsService.html":{}}}],["softremove(id",{"_index":1103,"title":{},"body":{"injectables/TagsService.html":{}}}],["source",{"_index":4,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["space",{"_index":81,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["spaces",{"_index":431,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["special",{"_index":548,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":680,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["split",{"_index":80,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["sponsors",{"_index":1565,"title":{},"body":{"index.html":{}}}],["src/.../active",{"_index":1592,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../app.module.ts",{"_index":1595,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth",{"_index":1449,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../auth.constants.ts",{"_index":1594,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.decorator.ts",{"_index":1593,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../create",{"_index":1464,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../file",{"_index":1451,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":1463,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../posttype.enum.ts",{"_index":1454,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../status.enum.ts",{"_index":1453,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":100,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":203,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":204,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:16",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:23",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":1393,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":255,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/config/jwt.config",{"_index":705,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"modules/UsersModule.html":{}}}],["src/auth/constants/auth.constants.ts",{"_index":1407,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/active",{"_index":952,"title":{},"body":{"controllers/PostController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/auth.decorator",{"_index":1365,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/auth/decorators/auth.decorator.ts",{"_index":1409,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dtos/refresh",{"_index":1026,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["src/auth/dtos/signin.dto.ts",{"_index":1037,"title":{},"body":{"classes/SignInDto.html":{},"coverage.html":{}}}],["src/auth/dtos/signin.dto.ts:10",{"_index":1041,"title":{},"body":{"classes/SignInDto.html":{}}}],["src/auth/dtos/signin.dto.ts:6",{"_index":1039,"title":{},"body":{"classes/SignInDto.html":{}}}],["src/auth/enums/auth",{"_index":1366,"title":{},"body":{"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["src/auth/guards/access",{"_index":6,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["src/auth/guards/authentication.guard.ts",{"_index":283,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["src/auth/guards/authentication.guard.ts:16",{"_index":289,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/auth/guards/authentication.guard.ts:20",{"_index":290,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/auth/interfaces/active",{"_index":88,"title":{},"body":{"interfaces/ActiveUserData.html":{},"injectables/CreatePostProvider.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["src/auth/providers/bcrypt.provider.ts",{"_index":309,"title":{},"body":{"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["src/auth/providers/bcrypt.provider.ts:11",{"_index":315,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/bcrypt.provider.ts:6",{"_index":318,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/generate",{"_index":629,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["src/auth/providers/hashing.provider",{"_index":561,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["src/auth/providers/hashing.provider.ts",{"_index":734,"title":{},"body":{"injectables/HashingProvider.html":{},"coverage.html":{}}}],["src/auth/providers/hashing.provider.ts:6",{"_index":737,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/hashing.provider.ts:8",{"_index":736,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/refresh",{"_index":1027,"title":{},"body":{"injectables/RefreshTokensProvider.html":{},"coverage.html":{}}}],["src/auth/providers/sign",{"_index":1042,"title":{},"body":{"injectables/SignInProvider.html":{},"coverage.html":{}}}],["src/auth/service/auth.service",{"_index":1290,"title":{},"body":{"injectables/UserService.html":{}}}],["src/auth/service/auth.service.ts",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/service/auth.service.ts:10",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/service/auth.service.ts:17",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/service/auth.service.ts:22",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/social/dtos/google",{"_index":724,"title":{},"body":{"classes/GoogleTokenDto.html":{},"coverage.html":{}}}],["src/auth/social/google",{"_index":684,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"coverage.html":{}}}],["src/auth/social/providers/google",{"_index":696,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["src/common/interceptors/data",{"_index":592,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["src/common/pagination/dtos/pagination",{"_index":670,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["src/common/pagination/interfaces/paginated.interface",{"_index":987,"title":{},"body":{"injectables/PostService.html":{}}}],["src/common/pagination/interfaces/paginated.interface.ts",{"_index":797,"title":{},"body":{"interfaces/Paginated.html":{},"coverage.html":{}}}],["src/common/pagination/pagination.module",{"_index":972,"title":{},"body":{"modules/PostModule.html":{}}}],["src/common/pagination/pagination.module.ts",{"_index":812,"title":{},"body":{"modules/PaginationModule.html":{}}}],["src/common/pagination/providers/pagination.provider",{"_index":986,"title":{},"body":{"injectables/PostService.html":{}}}],["src/common/pagination/providers/pagination.provider.ts",{"_index":814,"title":{},"body":{"injectables/PaginationProvider.html":{},"coverage.html":{}}}],["src/common/pagination/providers/pagination.provider.ts:15",{"_index":819,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["src/common/pagination/providers/pagination.provider.ts:9",{"_index":817,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["src/mail/mail.module.ts",{"_index":741,"title":{},"body":{"modules/MailModule.html":{}}}],["src/mail/providers/mail.service.ts",{"_index":743,"title":{},"body":{"injectables/MailService.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":1412,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/meta",{"_index":478,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["src/post/dtos/create",{"_index":373,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/post/dtos/get",{"_index":660,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"coverage.html":{}}}],["src/post/dtos/patch",{"_index":864,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/post/enums/posttype.enum.ts",{"_index":1459,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/post/enums/status.enum.ts",{"_index":1456,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/post/post.controller.ts",{"_index":912,"title":{},"body":{"controllers/PostController.html":{},"coverage.html":{}}}],["src/post/post.controller.ts:17",{"_index":931,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:29",{"_index":924,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:41",{"_index":937,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:46",{"_index":927,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.entity",{"_index":762,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["src/post/post.entity.ts",{"_index":878,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/post/post.entity.ts:12",{"_index":889,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:18",{"_index":904,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:25",{"_index":892,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:33",{"_index":897,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:40",{"_index":898,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:46",{"_index":884,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:52",{"_index":895,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:59",{"_index":888,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:64",{"_index":894,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:74",{"_index":891,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:79",{"_index":882,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:86",{"_index":902,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.module.ts",{"_index":969,"title":{},"body":{"modules/PostModule.html":{}}}],["src/post/services/create",{"_index":482,"title":{},"body":{"injectables/CreatePostProvider.html":{},"coverage.html":{}}}],["src/post/services/post.service.ts",{"_index":975,"title":{},"body":{"injectables/PostService.html":{},"coverage.html":{}}}],["src/post/services/post.service.ts:16",{"_index":978,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/services/post.service.ts:31",{"_index":983,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/services/post.service.ts:50",{"_index":979,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/services/post.service.ts:54",{"_index":981,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/services/post.service.ts:74",{"_index":985,"title":{},"body":{"injectables/PostService.html":{}}}],["src/tags/dtos/create",{"_index":516,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service",{"_index":494,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostService.html":{}}}],["src/tags/providers/tags.service.ts",{"_index":1091,"title":{},"body":{"injectables/TagsService.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service.ts:12",{"_index":1099,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:18",{"_index":1102,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:28",{"_index":1100,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:33",{"_index":1104,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:8",{"_index":1096,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tag.entity",{"_index":908,"title":{},"body":{"entities/Post.html":{}}}],["src/tags/tag.entity.ts",{"_index":1053,"title":{},"body":{"entities/Tag.html":{},"coverage.html":{}}}],["src/tags/tag.entity.ts:15",{"_index":1061,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:23",{"_index":1064,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:29",{"_index":1058,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:35",{"_index":1063,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:42",{"_index":1059,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:45",{"_index":1055,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:48",{"_index":1065,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:51",{"_index":1057,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:56",{"_index":1062,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:7",{"_index":1060,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.controller.ts",{"_index":1067,"title":{},"body":{"controllers/TagsController.html":{},"coverage.html":{}}}],["src/tags/tags.controller.ts:10",{"_index":1070,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:15",{"_index":1071,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:19",{"_index":1074,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.module",{"_index":971,"title":{},"body":{"modules/PostModule.html":{}}}],["src/tags/tags.module.ts",{"_index":1087,"title":{},"body":{"modules/TagsModule.html":{}}}],["src/uploads/enums/file",{"_index":1455,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/uploads/interfaces/upload",{"_index":1131,"title":{},"body":{"interfaces/UploadFile.html":{},"coverage.html":{}}}],["src/uploads/providers/upload",{"_index":1134,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"coverage.html":{}}}],["src/uploads/providers/uploads.service.ts",{"_index":1199,"title":{},"body":{"injectables/UploadsService.html":{},"coverage.html":{}}}],["src/uploads/providers/uploads.service.ts:11",{"_index":1201,"title":{},"body":{"injectables/UploadsService.html":{}}}],["src/uploads/providers/uploads.service.ts:17",{"_index":1203,"title":{},"body":{"injectables/UploadsService.html":{}}}],["src/uploads/upload.entity.ts",{"_index":1114,"title":{},"body":{"entities/Upload.html":{},"coverage.html":{}}}],["src/uploads/upload.entity.ts:14",{"_index":1121,"title":{},"body":{"entities/Upload.html":{}}}],["src/uploads/upload.entity.ts:20",{"_index":1122,"title":{},"body":{"entities/Upload.html":{}}}],["src/uploads/upload.entity.ts:28",{"_index":1125,"title":{},"body":{"entities/Upload.html":{}}}],["src/uploads/upload.entity.ts:35",{"_index":1120,"title":{},"body":{"entities/Upload.html":{}}}],["src/uploads/upload.entity.ts:41",{"_index":1123,"title":{},"body":{"entities/Upload.html":{}}}],["src/uploads/upload.entity.ts:44",{"_index":1118,"title":{},"body":{"entities/Upload.html":{}}}],["src/uploads/upload.entity.ts:47",{"_index":1126,"title":{},"body":{"entities/Upload.html":{}}}],["src/uploads/upload.entity.ts:7",{"_index":1119,"title":{},"body":{"entities/Upload.html":{}}}],["src/uploads/uploads.controller.ts",{"_index":1168,"title":{},"body":{"controllers/UploadsController.html":{},"coverage.html":{}}}],["src/uploads/uploads.controller.ts:26",{"_index":1174,"title":{},"body":{"controllers/UploadsController.html":{}}}],["src/uploads/uploads.module.ts",{"_index":1193,"title":{},"body":{"modules/UploadsModule.html":{}}}],["src/users/dtos/create",{"_index":351,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":676,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":874,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/interfaces/google",{"_index":728,"title":{},"body":{"classes/GoogleUser.html":{},"coverage.html":{}}}],["src/users/providers/create",{"_index":326,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/users/providers/find",{"_index":608,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"coverage.html":{}}}],["src/users/providers/user",{"_index":1233,"title":{},"body":{"injectables/UserCreateManyProvider.html":{},"coverage.html":{}}}],["src/users/providers/user.service",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreatePostProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["src/users/providers/user.service.ts",{"_index":1262,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/users/providers/user.service.ts:100",{"_index":1281,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/user.service.ts:104",{"_index":1282,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/user.service.ts:108",{"_index":1274,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/user.service.ts:22",{"_index":1273,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/user.service.ts:39",{"_index":1278,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/user.service.ts:71",{"_index":1284,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/user.service.ts:92",{"_index":1276,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/user.service.ts:96",{"_index":1275,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/user.entity",{"_index":643,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"entities/Post.html":{}}}],["src/users/user.entity.ts",{"_index":1218,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:14",{"_index":1221,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:22",{"_index":1225,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:29",{"_index":1220,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:36",{"_index":1226,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:44",{"_index":1223,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:48",{"_index":1229,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:8",{"_index":1224,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":1326,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:40",{"_index":1353,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:51",{"_index":1337,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:58",{"_index":1334,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:64",{"_index":1355,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":259,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostModule.html":{}}}],["src/users/users.module.ts",{"_index":1391,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":1484,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1487,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":1489,"title":{},"body":{"index.html":{}}}],["startdate",{"_index":663,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{}}}],["started",{"_index":1466,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1477,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1402,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":285,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["status",{"_index":382,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["stay",{"_index":1551,"title":{},"body":{"index.html":{}}}],["steps",{"_index":1499,"title":{},"body":{"index.html":{}}}],["story",{"_index":1460,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["straightforward",{"_index":1512,"title":{},"body":{"index.html":{}}}],["string",{"_index":35,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/BcryptProvider.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"entities/User.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["string(error",{"_index":1257,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["sub",{"_index":93,"title":{},"body":{"interfaces/ActiveUserData.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["successfully",{"_index":959,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["successfully'})@patch",{"_index":936,"title":{},"body":{"controllers/PostController.html":{}}}],["successfully'})@post",{"_index":923,"title":{},"body":{"controllers/PostController.html":{}}}],["summary",{"_index":958,"title":{},"body":{"controllers/PostController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":1533,"title":{},"body":{"index.html":{},"modules.html":{}}}],["supported",{"_index":1212,"title":{},"body":{"injectables/UploadsService.html":{}}}],["svg",{"_index":1581,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":187,"title":{},"body":{"modules/AppModule.html":{}}}],["t",{"_index":639,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["table",{"_index":1263,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1417,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":506,"title":{"entities/Tag.html":{}},"body":{"injectables/CreatePostProvider.html":{},"entities/Post.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["tag.dto",{"_index":1075,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tag.dto.ts",{"_index":517,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["tag.dto.ts:10",{"_index":523,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:22",{"_index":526,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:28",{"_index":519,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:33",{"_index":525,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:39",{"_index":521,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.entity",{"_index":1089,"title":{},"body":{"modules/TagsModule.html":{},"injectables/TagsService.html":{}}}],["tag.posts",{"_index":900,"title":{},"body":{"entities/Post.html":{}}}],["tags",{"_index":383,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"entities/Post.html":{},"injectables/PostService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tags.controller",{"_index":1088,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags.length",{"_index":503,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostService.html":{}}}],["tags/providers/tags.service",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["tags/tags.module",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["tagscontroller",{"_index":1066,"title":{"controllers/TagsController.html":{}},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tagsmodule",{"_index":122,"title":{"modules/TagsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules.html":{},"overview.html":{}}}],["tagsrepository",{"_index":1097,"title":{},"body":{"injectables/TagsService.html":{}}}],["tagsservice",{"_index":143,"title":{"injectables/TagsService.html":{}},"body":{"modules/AppModule.html":{},"injectables/CreatePostProvider.html":{},"injectables/PostService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{},"overview.html":{}}}],["take",{"_index":829,"title":{},"body":{"injectables/PaginationProvider.html":{},"injectables/PostService.html":{},"index.html":{}}}],["tap",{"_index":603,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["target",{"_index":584,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["test",{"_index":1492,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":1495,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1494,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1490,"title":{},"body":{"index.html":{}}}],["text",{"_index":883,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["thanks",{"_index":1564,"title":{},"body":{"index.html":{}}}],["this.accesstokenguard",{"_index":295,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.appservice.gethello",{"_index":104,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.isauth",{"_index":1299,"title":{},"body":{"injectables/UserService.html":{}}}],["this.authservice.refreshtoken(refreshtokendto",{"_index":246,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signin(signindto",{"_index":243,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authtypeguardmap[type]).flat",{"_index":303,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.configservice.get(\"apiconfig.apiversion",{"_index":606,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["this.configservice.get(\"s3_bucket",{"_index":1302,"title":{},"body":{"injectables/UserService.html":{}}}],["this.configservice.get('appconfig.awsbucketname",{"_index":1153,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["this.creategoogleuserprovider.creategoogleuser(googleuser",{"_index":1324,"title":{},"body":{"injectables/UserService.html":{}}}],["this.createpostprovider.createpost(createpostdto",{"_index":997,"title":{},"body":{"injectables/PostService.html":{}}}],["this.createusersprovider.createuser(createuserdto",{"_index":1320,"title":{},"body":{"injectables/UserService.html":{}}}],["this.datasource.createqueryrunner",{"_index":1243,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["this.extractrequestfromheader(request",{"_index":60,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.findonebygoogleidprvider.findonebygoogleid(googleid",{"_index":1323,"title":{},"body":{"injectables/UserService.html":{}}}],["this.findoneuserbyemailprovider.findonebyemail(email",{"_index":1322,"title":{},"body":{"injectables/UserService.html":{}}}],["this.generatefilename(file",{"_index":1156,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["this.generatetokenprovider.generatetoken(user",{"_index":1036,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["this.generatetokensprovider.generatetoken(newuser",{"_index":722,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.generatetokensprovider.generatetoken(user",{"_index":720,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/SignInProvider.html":{}}}],["this.googleauthenticationservice.authenticate(googletokendto",{"_index":695,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["this.hashingprovider.comparepassword(signindto.password",{"_index":1049,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.hashingprovider.hashpassword(createuserdto.password",{"_index":578,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.jwtconfiguration",{"_index":67,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.jwtconfiguration.accesstokenttl",{"_index":655,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtconfiguration.audience",{"_index":647,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["this.jwtconfiguration.googleclientid",{"_index":707,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.jwtconfiguration.googleclientsecret",{"_index":709,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.jwtconfiguration.issuer",{"_index":649,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["this.jwtconfiguration.refreshtokenttl",{"_index":658,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtconfiguration.secret",{"_index":651,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["this.jwtservice.signasync",{"_index":645,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtservice.verifyasync(token",{"_index":66,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.jwtservice.verifyasync>(refreshtokendto.refreshtoken",{"_index":1034,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["this.metaoptionrepository.create(createpostdto.metaoptions",{"_index":498,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["this.metaoptionrepository.create(createpostmetaoptionsdto",{"_index":794,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionrepository.delete(post.metaoptions.id",{"_index":1000,"title":{},"body":{"injectables/PostService.html":{}}}],["this.metaoptionrepository.find",{"_index":1002,"title":{},"body":{"injectables/PostService.html":{}}}],["this.metaoptionrepository.save(metaoption",{"_index":795,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionrepository.save(metaoptions",{"_index":508,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["this.metaoptionservice.create(createpostmetaoptiondto",{"_index":779,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["this.oauthclient",{"_index":710,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.oauthclient.verifyidtoken",{"_index":713,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.paginationprovider.paginatequery",{"_index":995,"title":{},"body":{"injectables/PostService.html":{}}}],["this.postrepository",{"_index":996,"title":{},"body":{"injectables/PostService.html":{}}}],["this.postrepository.create",{"_index":507,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["this.postrepository.delete(id",{"_index":999,"title":{},"body":{"injectables/PostService.html":{}}}],["this.postrepository.find",{"_index":991,"title":{},"body":{"injectables/PostService.html":{}}}],["this.postrepository.findoneby",{"_index":998,"title":{},"body":{"injectables/PostService.html":{}}}],["this.postrepository.save(post",{"_index":510,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostService.html":{}}}],["this.postservice.createpost(createpostdto",{"_index":961,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.delete(id",{"_index":965,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.findall(postquery",{"_index":957,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.update(patchpostdto",{"_index":963,"title":{},"body":{"controllers/PostController.html":{}}}],["this.reflector.getallandoverride(auth_type_key",{"_index":298,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.refreshtokenprovider.refreshtokens(refreshtokendto",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.request.headers.host",{"_index":832,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.request.protocol",{"_index":831,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.signinprovider.signin(signindto",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.signtoken(user.id",{"_index":657,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.signtoken>(user.id",{"_index":654,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.tagsrepository.create(createtagdto",{"_index":1106,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.delete(id",{"_index":1111,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.find",{"_index":1109,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.save(tag",{"_index":1107,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.softdelete(id",{"_index":1112,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsservice.createtags(createtagdto",{"_index":1078,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.delete(id",{"_index":1080,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.findmultpletags(createpostdto.tags",{"_index":500,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["this.tagsservice.findmultpletags(patchpostdto.tags",{"_index":1005,"title":{},"body":{"injectables/PostService.html":{}}}],["this.tagsservice.softremove(id",{"_index":1083,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.uploadrepository.create(uploadfile",{"_index":1216,"title":{},"body":{"injectables/UploadsService.html":{}}}],["this.uploadrepository.save(upload",{"_index":1217,"title":{},"body":{"injectables/UploadsService.html":{}}}],["this.uploadservice.uploadfile(file",{"_index":1190,"title":{},"body":{"controllers/UploadsController.html":{}}}],["this.uploadtoawsprovider.fileupload(file",{"_index":1213,"title":{},"body":{"injectables/UploadsService.html":{}}}],["this.userreposiory.findoneby",{"_index":624,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["this.userrepository.create",{"_index":577,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.userrepository.create(googleuser",{"_index":344,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["this.userrepository.findone",{"_index":564,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.userrepository.findoneby",{"_index":615,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"injectables/UserService.html":{}}}],["this.userrepository.save(newuser",{"_index":579,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.userrepository.save(user",{"_index":345,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["this.userscreatemanyprovider.createmany(createmanyusersdto",{"_index":1321,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.creategoogleuser",{"_index":721,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.userservice.createmany(createmanyusersdto",{"_index":1386,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.createuser(createuserdto",{"_index":1384,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.findall(getusersparamdto",{"_index":1377,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.findonebyemail(signindto.email",{"_index":1046,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.userservice.findonebygoogleid(googleid",{"_index":719,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.userservice.findonebyid(+userid",{"_index":989,"title":{},"body":{"injectables/PostService.html":{}}}],["this.userservice.findonebyid(sub",{"_index":1035,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["this.userservice.findonebyid(user.sub",{"_index":501,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["throw",{"_index":61,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["thrown",{"_index":417,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["time",{"_index":1547,"title":{},"body":{"index.html":{}}}],["timestamp",{"_index":893,"title":{},"body":{"entities/Post.html":{},"injectables/UploadToAwsProvider.html":{}}}],["title",{"_index":384,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["token",{"_index":59,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/GoogleTokenDto.html":{},"controllers/UploadsController.html":{}}}],["token.dto",{"_index":238,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["token.dto.ts",{"_index":725,"title":{},"body":{"classes/GoogleTokenDto.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["token.dto.ts:6",{"_index":727,"title":{},"body":{"classes/GoogleTokenDto.html":{},"classes/RefreshTokenDto.html":{}}}],["token.guard",{"_index":160,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["token.guard.ts",{"_index":7,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{}}}],["token.guard.ts:10",{"_index":20,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:15",{"_index":28,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:33",{"_index":34,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["tokens",{"_index":244,"title":{},"body":{"controllers/AuthController.html":{}}}],["tokens')@httpcode(httpstatus.ok)@auth(authtype.none",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{}}}],["tokens.provider",{"_index":266,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["tokens.provider.ts",{"_index":630,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{},"coverage.html":{}}}],["tokens.provider.ts:11",{"_index":1030,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["tokens.provider.ts:17",{"_index":640,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["tokens.provider.ts:20",{"_index":1032,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["tokens.provider.ts:30",{"_index":636,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["tokens.provider.ts:9",{"_index":634,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["totalitems",{"_index":801,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["totalpages",{"_index":803,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["touch",{"_index":1572,"title":{},"body":{"index.html":{}}}],["transaction",{"_index":1256,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["transformer",{"_index":368,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{},"entities/User.html":{},"dependencies.html":{}}}],["trim",{"_index":1162,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["true",{"_index":72,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{}}}],["true})@apipropertyoptional({description",{"_index":440,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@exclude",{"_index":1222,"title":{},"body":{"entities/User.html":{}}}],["true})@jointable",{"_index":901,"title":{},"body":{"entities/Post.html":{}}}],["true})@type(undefined",{"_index":361,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{}}}],["try",{"_index":63,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["twitter",{"_index":1577,"title":{},"body":{"index.html":{}}}],["two",{"_index":76,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["type",{"_index":24,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"classes/GoogleUser.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["type.ts",{"_index":1450,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typeof",{"_index":585,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["typeorm",{"_index":338,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"entities/MetaOption.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"entities/Post.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":136,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([metaoption",{"_index":785,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["typeormmodule.forfeature([post",{"_index":974,"title":{},"body":{"modules/PostModule.html":{}}}],["typeormmodule.forfeature([tag",{"_index":1090,"title":{},"body":{"modules/TagsModule.html":{}}}],["typeormmodule.forfeature([upload",{"_index":1198,"title":{},"body":{"modules/UploadsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":1397,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":181,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":877,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["types.enum",{"_index":1128,"title":{},"body":{"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadsService.html":{}}}],["types.enum.ts",{"_index":1452,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typescript",{"_index":1476,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":40,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["unauthorizedexception(\"incorrect",{"_index":1052,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["unauthorizedexception(\"use",{"_index":627,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["unauthorizedexception(error",{"_index":723,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["undefined",{"_index":36,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"entities/Post.html":{},"injectables/PostService.html":{},"entities/Upload.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["undefined'])@apioperation({summary",{"_index":1172,"title":{},"body":{"controllers/UploadsController.html":{}}}],["undefined})@isnotempty()@isarray()@validatenested({each",{"_index":360,"title":{},"body":{"classes/CreateManyUsersDTO.html":{}}}],["undefined})@isoptional()@validatenested({each",{"_index":399,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unique",{"_index":512,"title":{},"body":{"injectables/CreatePostProvider.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["unit",{"_index":1491,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["unlicensed",{"_index":1590,"title":{},"body":{"properties.html":{}}}],["update",{"_index":977,"title":{},"body":{"injectables/PostService.html":{}}}],["update(patchpostdto",{"_index":984,"title":{},"body":{"injectables/PostService.html":{}}}],["updated",{"_index":872,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostController.html":{}}}],["updated'})@isint()@isnotempty",{"_index":869,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["updatedate",{"_index":748,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/Upload.html":{}}}],["updatedatecolumn",{"_index":760,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/Upload.html":{}}}],["updatepost",{"_index":915,"title":{},"body":{"controllers/PostController.html":{}}}],["updatepost(@body",{"_index":962,"title":{},"body":{"controllers/PostController.html":{}}}],["updatepost(patchpostdto",{"_index":932,"title":{},"body":{"controllers/PostController.html":{}}}],["updates",{"_index":933,"title":{},"body":{"controllers/PostController.html":{},"index.html":{}}}],["upload",{"_index":1113,"title":{"entities/Upload.html":{}},"body":{"entities/Upload.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"coverage.html":{}}}],["upload.entity",{"_index":1197,"title":{},"body":{"modules/UploadsModule.html":{},"injectables/UploadsService.html":{}}}],["uploadedfile",{"_index":1175,"title":{},"body":{"controllers/UploadsController.html":{}}}],["uploadfile",{"_index":1130,"title":{"interfaces/UploadFile.html":{}},"body":{"interfaces/UploadFile.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"coverage.html":{}}}],["uploadfile(@uploadedfile",{"_index":1189,"title":{},"body":{"controllers/UploadsController.html":{}}}],["uploadfile(file",{"_index":1170,"title":{},"body":{"controllers/UploadsController.html":{},"injectables/UploadsService.html":{}}}],["uploadrepository",{"_index":1202,"title":{},"body":{"injectables/UploadsService.html":{}}}],["uploadresult",{"_index":1150,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["uploadresult.key",{"_index":1159,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["uploads",{"_index":1169,"title":{},"body":{"controllers/UploadsController.html":{}}}],["uploads.controller",{"_index":1194,"title":{},"body":{"modules/UploadsModule.html":{}}}],["uploads/uploads.module",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["uploadscontroller",{"_index":1167,"title":{"controllers/UploadsController.html":{}},"body":{"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"coverage.html":{}}}],["uploadservice",{"_index":1184,"title":{},"body":{"controllers/UploadsController.html":{}}}],["uploadsmodule",{"_index":123,"title":{"modules/UploadsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UploadsModule.html":{},"modules.html":{},"overview.html":{}}}],["uploadsservice",{"_index":1181,"title":{"injectables/UploadsService.html":{}},"body":{"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"coverage.html":{},"overview.html":{}}}],["uploadtoawsprovider",{"_index":1133,"title":{"injectables/UploadToAwsProvider.html":{}},"body":{"injectables/UploadToAwsProvider.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"coverage.html":{},"overview.html":{}}}],["uppercase",{"_index":545,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["url",{"_index":422,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["url'})@maxlength(256",{"_index":432,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["url(this.request.url",{"_index":834,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["useclass",{"_index":201,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["usefactory",{"_index":182,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards",{"_index":1361,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(accesstokenguard",{"_index":1369,"title":{},"body":{"controllers/UsersController.html":{}}}],["useinterceptors",{"_index":1176,"title":{},"body":{"controllers/UploadsController.html":{},"controllers/UsersController.html":{}}}],["useinterceptors(classserializerinterceptor",{"_index":1382,"title":{},"body":{"controllers/UsersController.html":{}}}],["useinterceptors(fileinterceptor('file",{"_index":1186,"title":{},"body":{"controllers/UploadsController.html":{}}}],["user",{"_index":89,"title":{"entities/User.html":{}},"body":{"interfaces/ActiveUserData.html":{},"modules/AppModule.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDTO.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetUsersParamDto.html":{},"injectables/GoogleAuthenticationService.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.decorator",{"_index":953,"title":{},"body":{"controllers/PostController.html":{}}}],["user.decorator.ts",{"_index":1408,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":367,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"injectables/CreateUserProvider.html":{},"classes/PatchUserDto.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["user.dto.ts",{"_index":353,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:14",{"_index":535,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:18",{"_index":362,"title":{},"body":{"classes/CreateManyUsersDTO.html":{}}}],["user.dto.ts:20",{"_index":531,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:28",{"_index":550,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:8",{"_index":533,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":656,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["user.entity",{"_index":339,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["user.interface",{"_index":342,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/UserService.html":{}}}],["user.interface.ts",{"_index":729,"title":{},"body":{"classes/GoogleUser.html":{},"coverage.html":{}}}],["user.interface.ts:2",{"_index":730,"title":{},"body":{"classes/GoogleUser.html":{}}}],["user.interface.ts:3",{"_index":731,"title":{},"body":{"classes/GoogleUser.html":{}}}],["user.interface.ts:4",{"_index":733,"title":{},"body":{"classes/GoogleUser.html":{}}}],["user.interface.ts:5",{"_index":732,"title":{},"body":{"classes/GoogleUser.html":{}}}],["user.password",{"_index":1050,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["user.posts",{"_index":880,"title":{},"body":{"entities/Post.html":{}}}],["user.provider",{"_index":1294,"title":{},"body":{"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["user.provider.ts",{"_index":328,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["user.provider.ts:14",{"_index":336,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["user.provider.ts:16",{"_index":559,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.provider.ts:8",{"_index":332,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["user.provider.ts:9",{"_index":557,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.service.ts",{"_index":1314,"title":{},"body":{"injectables/UserService.html":{}}}],["user?.[field",{"_index":1601,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usercreatemanyprovider",{"_index":1232,"title":{"injectables/UserCreateManyProvider.html":{}},"body":{"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["userid",{"_index":641,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["username",{"_index":191,"title":{},"body":{"modules/AppModule.html":{}}}],["userreposiory",{"_index":621,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["userrepository",{"_index":333,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/UserService.html":{}}}],["users",{"_index":354,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/GetUsersParamDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["users.controller",{"_index":1392,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/user.entity",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.module",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":1325,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userscreatemanyprovider",{"_index":1270,"title":{},"body":{"injectables/UserService.html":{}}}],["userservice",{"_index":274,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/CreatePostProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["usersmodule",{"_index":124,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["uses",{"_index":429,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["using",{"_index":1287,"title":{},"body":{"injectables/UserService.html":{},"index.html":{}}}],["uuid",{"_index":1149,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"dependencies.html":{}}}],["uuid4",{"_index":1148,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["uuid4()}${extension",{"_index":1166,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["v4",{"_index":1147,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["validatenested",{"_index":365,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{}}}],["validation",{"_index":416,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validationpipe",{"_index":1362,"title":{},"body":{"controllers/UsersController.html":{}}}],["validationschema",{"_index":180,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":366,"title":{},"body":{"classes/CreateManyUsersDTO.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GoogleTokenDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"dependencies.html":{}}}],["value",{"_index":850,"title":{},"body":{"classes/PaginationQueryDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":403,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["varchar",{"_index":885,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{}}}],["variable",{"_index":1404,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1591,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":1588,"title":{},"body":{"properties.html":{}}}],["video",{"_index":1540,"title":{},"body":{"index.html":{}}}],["visit",{"_index":1530,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":1543,"title":{},"body":{"index.html":{}}}],["void",{"_index":589,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["want",{"_index":1352,"title":{},"body":{"controllers/UsersController.html":{}}}],["watch",{"_index":1485,"title":{},"body":{"index.html":{}}}],["website",{"_index":1575,"title":{},"body":{"index.html":{}}}],["without",{"_index":430,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["working",{"_index":1529,"title":{},"body":{"index.html":{}}}],["world",{"_index":206,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":1554,"title":{},"body":{"index.html":{}}}],["yes",{"_index":642,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["you'd",{"_index":1568,"title":{},"body":{"index.html":{}}}],["you're",{"_index":1496,"title":{},"body":{"index.html":{}}}],["z0",{"_index":424,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["z\\d@$!%*#?&]{8",{"_index":539,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*#?&])[a",{"_index":538,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":537,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"guards/AccessTokenGuard.html":{"url":"guards/AccessTokenGuard.html","title":"guard - AccessTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/access-token.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                extractRequestFromHeader\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/access-token.guard.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/access-token.guard.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractRequestFromHeader\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractRequestFromHeader(request: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/access-token.guard.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Inject, Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { Observable } from 'rxjs';\nimport jwtConfig from '../config/jwt.config';\nimport { Request } from 'express';\nimport { REQUEST_USER_KEY } from '../constants/auth.constants';\n\n@Injectable()\nexport class AccessTokenGuard implements CanActivate {\n\n  constructor(private readonly jwtService: JwtService,\n    @Inject(jwtConfig.KEY) private readonly jwtConfiguration: ConfigType\n  ) { }\n  async canActivate(\n    context: ExecutionContext,\n  ): Promise {\n    const request = context.switchToHttp().getRequest();\n    const token = this.extractRequestFromHeader(request)\n    if (!token) {\n      throw new UnauthorizedException(\"\")\n    }\n\n    try {\n      const payload = await this.jwtService.verifyAsync(token, this.jwtConfiguration)\n      request[REQUEST_USER_KEY] = payload\n    } catch (error) {\n      throw new UnauthorizedException()\n    }\n    return true;\n  }\n\n  private extractRequestFromHeader(request: Request): string | undefined {\n    const [_, token] = request.headers.authorization?.split(' ') ?? [] //this line get the two part of the header bearer and token when split the string from the space between them\n    return token;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ActiveUserData.html":{"url":"interfaces/ActiveUserData.html","title":"interface - ActiveUserData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ActiveUserData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/active-user-data.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ActiveUserData {\n\n    //sub is the id of the user in the database\n    sub: number;\n    email: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) { }\n\n  /* @Get()\n   getHello(): string {\n     return this.appService.getHello();\n   }*/\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nMailModule\n\nMailModule\n\nAppModule -->\n\nMailModule->AppModule\n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nPostModule\n\nPostModule\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUploadsModule\n\nUploadsModule\n\nAppModule -->\n\nUploadsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            MailModule\n                        \n                        \n                            MetaOptionsModule\n                        \n                        \n                            PaginationModule\n                        \n                        \n                            PostModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UploadsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostModule } from './post/post.module';\nimport { PostService } from './post/services/post.service';\nimport { AuthModule } from './auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './users/user.entity';\nimport { TagsModule } from './tags/tags.module';\nimport { MetaOptionsModule } from './meta-options/meta-options.module';\nimport { TagsService } from './tags/providers/tags.service';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { PaginationModule } from './common/pagination/pagination.module';\nimport appConfig from './config/app.config';\nimport databaseConfig from './config/database.config';\nimport environmentValidation from './config/environment.validation';\nimport { JwtModule } from '@nestjs/jwt';\nimport jwtConfig from './auth/config/jwt.config';\nimport { APP_GUARD, APP_INTERCEPTOR } from '@nestjs/core';\nimport { AccessTokenGuard } from './auth/guards/access-token.guard';\nimport { AuthenticationGuard } from './auth/guards/authentication.guard';\nimport { CreatePostProvider } from './post/services/create-post.provider';\nimport { DataResponseInterceptor } from './common/interceptors/data-response/data-response.interceptor';\nimport { UploadsModule } from './uploads/uploads.module';\nimport { MailModule } from './mail/mail.module';\n\nconst ENV = process.env.NODE_ENV;\n@Module({\n  imports: [UsersModule, PostModule, AuthModule, TagsModule, ConfigModule.forRoot({\n    isGlobal: true,\n    //envFilePath: ['.env.development']\n    envFilePath: !ENV ? '.env' : `.env.${ENV}`,\n    load: [appConfig, databaseConfig],\n    validationSchema: environmentValidation\n  }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        //entities: [User],\n        autoLoadEntities: configService.get('database.autoLoadEntities'),\n        synchronize: configService.get('database.synchronize'),\n        port: +configService.get('database.port'),\n        username: configService.get('database.user'),\n        password: configService.get('database.password'),\n        host: configService.get('database.host'),\n        database: configService.get('database.name'),\n      })\n\n    }),\n\n    ConfigModule.forFeature(jwtConfig),\n    JwtModule.registerAsync(jwtConfig.asProvider()),\n    TagsModule,\n    MetaOptionsModule,\n    PaginationModule,\n    UploadsModule,\n    MailModule],\n  controllers: [AppController],\n  providers: [AppService,\n    {\n      provide: APP_GUARD,\n      useClass: AuthenticationGuard\n    },\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: DataResponseInterceptor\n    },\n    AccessTokenGuard,\n\n  ],\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World NestJs!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                refreshToken\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                            Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshToken(refreshTokenDto: RefreshTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('refresh-tokens')@HttpCode(HttpStatus.OK)@Auth(AuthType.none)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshTokenDto\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signinDto: SignInDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('sign-in')@HttpCode(HttpStatus.OK)@Auth(AuthType.none)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signinDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, HttpCode, HttpStatus, Post } from '@nestjs/common';\nimport { AuthService } from './service/auth.service';\nimport { SignInDto } from './dtos/signin.dto';\nimport { Auth } from './decorators/auth.decorator';\nimport { AuthType } from './enums/auth-type';\nimport { RefreshTokenDto } from './dtos/refresh-token.dto';\n\n@Controller('auth')\nexport class AuthController {\n\n    constructor(private readonly authService: AuthService) { }\n\n    @Post('sign-in')\n    @HttpCode(HttpStatus.OK)\n    @Auth(AuthType.none)\n    public async signIn(@Body() signinDto: SignInDto) {\n        return this.authService.signIn(signinDto)\n    }\n\n    @Post('refresh-tokens')\n    @HttpCode(HttpStatus.OK)\n    @Auth(AuthType.none)\n    public async refreshToken(@Body() refreshTokenDto: RefreshTokenDto) {\n        return this.authService.refreshToken(refreshTokenDto)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nHashingProvider \n\nHashingProvider \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGenerateTokensProvider\n\nGenerateTokensProvider\n\nAuthModule -->\n\nGenerateTokensProvider->AuthModule\n\n\n\n\n\nGoogleAuthenticationService\n\nGoogleAuthenticationService\n\nAuthModule -->\n\nGoogleAuthenticationService->AuthModule\n\n\n\n\n\nRefreshTokensProvider\n\nRefreshTokensProvider\n\nAuthModule -->\n\nRefreshTokensProvider->AuthModule\n\n\n\n\n\nSignInProvider\n\nSignInProvider\n\nAuthModule -->\n\nSignInProvider->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            GenerateTokensProvider\n                        \n                        \n                            GoogleAuthenticationService\n                        \n                        \n                            RefreshTokensProvider\n                        \n                        \n                            SignInProvider\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                        \n                            GoogleAuthenticationController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            HashingProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthService } from './service/auth.service';\nimport { AuthController } from './auth.controller';\nimport { UsersModule } from 'src/users/users.module';\nimport { HashingProvider } from './providers/hashing.provider';\nimport { BcryptProvider } from './providers/bcrypt.provider';\nimport { SignInProvider } from './providers/sign-in.provider';\nimport { ConfigModule } from '@nestjs/config';\nimport jwtConfig from './config/jwt.config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { GenerateTokensProvider } from './providers/generate-tokens.provider';\nimport { RefreshTokensProvider } from './providers/refresh-tokens.provider';\nimport { GoogleAuthenticationController } from './social/google-authentication.controller';\nimport { GoogleAuthenticationService } from './social/providers/google-authentication.service';\n\n@Module({\n  providers: [AuthService, {\n    provide: HashingProvider,\n    useClass: BcryptProvider\n  }, SignInProvider, GenerateTokensProvider, RefreshTokensProvider, GoogleAuthenticationService],\n  controllers: [AuthController, GoogleAuthenticationController],\n  imports: [forwardRef(() => UsersModule),\n  ConfigModule.forFeature(jwtConfig),\n  JwtModule.registerAsync(jwtConfig.asProvider())],\n  exports: [AuthService, HashingProvider]\n})\nexport class AuthModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/service/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                refreshToken\n                            \n                            \n                                    Public\n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, signInProvider: SignInProvider, refreshTokenProvider: RefreshTokensProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/service/auth.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        signInProvider\n                                                  \n                                                        \n                                                                        SignInProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        refreshTokenProvider\n                                                  \n                                                        \n                                                                        RefreshTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshToken(refreshTokenDto: RefreshTokenDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/service/auth.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshTokenDto\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/service/auth.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { UserService } from 'src/users/providers/user.service';\nimport { SignInDto } from '../dtos/signin.dto';\nimport { SignInProvider } from '../providers/sign-in.provider';\nimport { RefreshTokenDto } from '../dtos/refresh-token.dto';\nimport { GenerateTokensProvider } from '../providers/generate-tokens.provider';\nimport { RefreshTokensProvider } from '../providers/refresh-tokens.provider';\n\n@Injectable()\nexport class AuthService {\n\n    constructor(@Inject(forwardRef(() => UserService)) private readonly userService: UserService,\n        private readonly signInProvider: SignInProvider,\n        private readonly refreshTokenProvider: RefreshTokensProvider\n\n    ) { }\n    public async signIn(signInDto: SignInDto) {\n        return await this.signInProvider.signIn(signInDto)\n    }\n\n\n    public async refreshToken(refreshTokenDto: RefreshTokenDto) {\n        return await this.refreshTokenProvider.refreshTokens(refreshTokenDto)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthenticationGuard.html":{"url":"guards/AuthenticationGuard.html","title":"guard - AuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/authentication.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                authTypeGuardMap\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                defaultAuthType\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, accessTokenGuard: AccessTokenGuard)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/authentication.guard.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accessTokenGuard\n                                                  \n                                                        \n                                                                        AccessTokenGuard\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/authentication.guard.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable, UnauthorizedException } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Observable } from 'rxjs';\nimport { AccessTokenGuard } from './access-token.guard';\nimport { AuthType } from '../enums/auth-type';\nimport { AUTH_TYPE_KEY } from '../constants/auth.constants';\n\n@Injectable()\nexport class AuthenticationGuard implements CanActivate {\n\n  private static readonly defaultAuthType = AuthType.Bearer;\n\n  private readonly authTypeGuardMap: Record = {\n    [AuthType.Bearer]: this.accessTokenGuard,\n    [AuthType.none]: { canActivate: () => true }\n  }\n  constructor(private readonly reflector: Reflector,\n    private readonly accessTokenGuard: AccessTokenGuard\n  ) { }\n  async canActivate(\n    context: ExecutionContext,\n  ): Promise {\n\n    const authTypes = this.reflector.getAllAndOverride(AUTH_TYPE_KEY, [context.getHandler(), context.getClass()]) ?? [AuthenticationGuard.defaultAuthType]\n    const guards = authTypes.map((type) => this.authTypeGuardMap[type]).flat()\n    const error = new UnauthorizedException()\n\n    for (const instance of guards) {\n      const canActivate = await Promise.resolve(\n\n        instance.canActivate(context)\n      ).catch((error) => {\n        eror: error;\n      })\n\n      if (canActivate) {\n        return true;\n      }\n    }\n    throw error;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BcryptProvider.html":{"url":"injectables/BcryptProvider.html","title":"injectable - BcryptProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BcryptProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/bcrypt.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                comparePassword\n                            \n                            \n                                    Public\n                                    Async\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        comparePassword\n                        \n                    \n                \n            \n            \n                \ncomparePassword(data: string | Buffer, encrypted: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.provider.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encrypted\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(data: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.provider.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { HashingProvider } from './hashing.provider';\nimport * as bcrypt from 'bcrypt';\n@Injectable()\nexport class BcryptProvider implements HashingProvider {\n    public async hashPassword(data: string | Buffer): Promise {\n        const salt = await bcrypt.genSalt();\n        return bcrypt.hash(data, salt)\n\n    }\n    comparePassword(data: string | Buffer, encrypted: string): Promise {\n        return bcrypt.compare(data, encrypted)\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateGoogleUserProvider.html":{"url":"injectables/CreateGoogleUserProvider.html","title":"injectable - CreateGoogleUserProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateGoogleUserProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/create-google-user.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createGoogleUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/create-google-user.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createGoogleUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createGoogleUser(googleUser: GoogleUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/create-google-user.provider.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleUser\n                                            \n                                                            GoogleUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { GoogleUser } from '../interfaces/google-user.interface';\n\n@Injectable()\nexport class CreateGoogleUserProvider {\n\n    constructor(\n        @InjectRepository(User) private userRepository: Repository\n    ) { }\n\n    public async createGoogleUser(googleUser: GoogleUser) {\n        try {\n            const user = this.userRepository.create(googleUser);\n            return await this.userRepository.save(user)\n        } catch (error) {\n            throw new ConflictException(error, {\n                description: 'could not create a new user'\n            })\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateManyUsersDTO.html":{"url":"classes/CreateManyUsersDTO.html","title":"class - CreateManyUsersDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateManyUsersDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-many-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateUserDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'array', required: true, items: undefined})@IsNotEmpty()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-many-user.dto.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsNotEmpty, ValidateNested } from \"class-validator\";\nimport { CreateUserDto } from \"./create-user.dto\";\nimport { Type } from \"class-transformer\";\nimport { ApiProperty } from \"@nestjs/swagger\";\n\nexport class CreateManyUsersDTO {\n    @ApiProperty({\n        type: 'array',\n        required: true,\n        items: {\n            type: 'User'\n        }\n    })\n    @IsNotEmpty()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CreateUserDto)\n    users: CreateUserDto[]\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dtos/create-post.dtos.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({description: 'This is the content of the post', example: 'the post content'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsUrl()@MaxLength(1024)@ApiPropertyOptional({description: 'featured image for your blog post', example: 'http://localhost.com/images/image1.jpg'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionsDto | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ApiPropertyOptional({type: 'object', required: false, items: undefined})@IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:115\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(postType)@IsNotEmpty()@ApiProperty({enum: postType, description: 'Possible values, 'POST', 'PAGE','STORY','SERIES''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsISO8601()@IsOptional()@ApiPropertyOptional({description: 'The date on which the blog post is published', example: '2024-03-16T07:46:32+0000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsJSON()@ApiPropertyOptional({description: 'Serialize your JSON object else a validation error will be thrown', example: '{\n \"@context\": \"https://schema.org\",\n \"@type\": \"Person\"\n}'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty({description: 'For example - 'my-url'', example: 'my-blog-post'})@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url'})@MaxLength(256)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(postStatus)@IsNotEmpty()@ApiProperty({enum: postStatus, description: ' Possible values, 'DRAFT', 'SCHEDULED','REVIEW', 'PUBLISHED''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()@IsInt({each: true})@ApiPropertyOptional({description: 'Array of ids of tags', example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'This is a title', description: 'this is the title of the blog post'})@IsString()@MinLength(4)@MaxLength(512)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dtos.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsEnum, IsInt, IsISO8601, IsJSON, IsNotEmpty, IsOptional, IsString, IsUrl, Matches, MaxLength, MinLength, ValidateNested } from \"class-validator\";\nimport { postType } from \"../enums/postType.enum\";\nimport { postStatus } from \"../enums/status.enum\";\nimport { CreatePostMetaOptionsDto } from \"../../meta-options/dtos/create-post-meta-option.dtos\";\nimport { Type } from \"class-transformer\";\nimport { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\n\nexport class CreatePostDto {\n    @ApiProperty({\n        example: \"This is a title\",\n        description: \"this is the title of the blog post\"\n    })\n    @IsString()\n    @MinLength(4)\n    @MaxLength(512)\n    @IsNotEmpty()\n    title: string;\n\n    @IsEnum(postType)\n    @IsNotEmpty()\n    @ApiProperty({\n        enum: postType,\n        description: \"Possible values, 'POST', 'PAGE','STORY','SERIES'\",\n    })\n    postType: postType;\n    @IsString()\n    @IsOptional()\n    @ApiPropertyOptional({\n        description: \"This is the content of the post\",\n        example: \"the post content\"\n    })\n    content?: string;\n\n    @IsString()\n    @IsNotEmpty()\n    @ApiProperty({\n        description: \"For example - 'my-url'\",\n        example: \"my-blog-post\"\n    })\n    @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n        message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url'\n    })\n    @MaxLength(256)\n    slug: string;\n\n\n    @IsEnum(postStatus)\n    @IsNotEmpty()\n    @ApiProperty({\n        enum: postStatus,\n        description: \" Possible values, 'DRAFT', 'SCHEDULED','REVIEW', 'PUBLISHED'\"\n    })\n    status: postStatus;\n\n    @IsOptional()\n    @IsJSON()\n    @ApiPropertyOptional({\n        description: \"Serialize your JSON object else a validation error will be thrown\",\n        example: \"{\\r\\n \\\"@context\\\": \\\"https:\\/\\/schema.org\\\",\\r\\n \\\"@type\\\": \\\"Person\\\"\\r\\n}\"\n    })\n    schema?: string;\n\n\n    @IsOptional()\n    @IsUrl()\n    @MaxLength(1024)\n    @ApiPropertyOptional({\n        description: \"featured image for your blog post\",\n        example: \"http://localhost.com/images/image1.jpg\"\n    })\n    featuredImageUrl?: string;\n\n\n    @IsISO8601()\n    @IsOptional()\n    @ApiPropertyOptional({\n        description: \"The date on which the blog post is published\",\n        example: \"2024-03-16T07:46:32+0000\",\n    })\n    publishOn?: Date;\n\n\n    @IsOptional()\n    @IsArray()\n    @IsInt({\n        each: true\n    })\n    @ApiPropertyOptional({\n        description: \"Array of ids of tags\",\n        example: [1, 2],\n    })\n    tags?: number[];\n\n\n\n    @IsOptional()\n    @ApiPropertyOptional({\n        type: 'object',\n        required: false,\n        items: {\n            type: 'object',\n            properties: {\n                metaValue: {\n                    type: 'json',\n                    description: 'The metaValue is JSON string',\n                    example: '{\"sidebarEnabled\":true}'\n                }\n            }\n        }\n    })\n\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => CreatePostMetaOptionsDto)\n    metaOptions?: CreatePostMetaOptionsDto | null;\n\n    /*@IsInt()\n    @IsNotEmpty()\n    @ApiProperty({\n        type: 'integer',\n        required: true,\n        example: 1\n    })\n    authorId: number;*/\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto.html":{"url":"classes/CreatePostMetaOptionsDto.html","title":"class - CreatePostMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/dtos/create-post-meta-option.dtos.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                metaValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/dtos/create-post-meta-option.dtos.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsJSON, IsNotEmpty, IsString } from \"class-validator\";\n\nexport class CreatePostMetaOptionsDto {\n    @IsNotEmpty()\n    @IsJSON()\n    metaValue: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreatePostProvider.html":{"url":"injectables/CreatePostProvider.html","title":"injectable - CreatePostProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreatePostProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/services/create-post.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createPost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postRepository: Repository, tagsService: TagsService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/post/services/create-post.provider.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tagsService\n                                                  \n                                                        \n                                                                        TagsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto, user: ActiveUserData)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/services/create-post.provider.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            ActiveUserData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, ConflictException, Injectable } from '@nestjs/common';\nimport { CreatePostDto } from '../dtos/create-post.dtos';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Post } from '../post.entity';\nimport { TagsService } from 'src/tags/providers/tags.service';\nimport { UserService } from 'src/users/providers/user.service';\nimport { ActiveUserData } from 'src/auth/interfaces/active-user-data.interface';\n\n@Injectable()\nexport class CreatePostProvider {\n\n    constructor(\n        @InjectRepository(Post) private readonly postRepository: Repository,\n        private readonly tagsService: TagsService,\n        private readonly userService: UserService,\n\n\n    ) { }\n    public async createPost(createPostDto: CreatePostDto, user: ActiveUserData) {\n        //let metaOptions = createPostDto.metaOptions ? this.metaOptionRepository.create(createPostDto.metaOptions) : null\n        let author = undefined;\n        let tags = undefined;\n        try {\n            tags = await this.tagsService.findMultpleTags(createPostDto.tags)\n            author = await this.userService.findOneById(user.sub);\n        } catch (error) {\n            throw new ConflictException(error)\n        }\n\n        if (createPostDto.tags.length === tags.length) {\n            throw new BadRequestException(\"please checks your tag  ids\")\n        }\n        let post = this.postRepository.create({\n            ...createPostDto,\n            author: author,\n            tags: tags\n        })\n        /*\n        if (metaOptions) {\n                    await this.metaOptionRepository.save(metaOptions);\n                }\n                if (metaOptions) {\n                    post.metaOptions = metaOptions\n                }*/\n        try {\n\n            return await this.postRepository.save(post)\n        } catch (error) {\n            throw new ConflictException(error, {\n                description: \" ensure post slug is unique inside and not duplicate\"\n            })\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagDto.html":{"url":"classes/CreateTagDto.html","title":"class - CreateTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/dtos/create-tag.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsUrl()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@MinLength(3)@IsNotEmpty()@MaxLength(256)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty({description: 'For example - 'my-url'', example: 'my-blog-post'})@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url'})@MaxLength(256)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsJSON, IsNotEmpty, IsOptional, IsString, IsUrl, Matches, MaxLength, MinLength } from \"class-validator\";\n\nexport class CreateTagDto {\n    @ApiProperty()\n    @IsString()\n    @MinLength(3)\n    @IsNotEmpty()\n    @MaxLength(256)\n    name: string;\n\n    @IsString()\n    @IsNotEmpty()\n    @ApiProperty({\n        description: \"For example - 'my-url'\",\n        example: \"my-blog-post\"\n    })\n    @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n        message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url'\n    })\n    @MaxLength(256)\n    slug: string;\n\n\n    @ApiPropertyOptional()\n    @IsOptional()\n    @IsString()\n    description?: string;\n\n    @ApiPropertyOptional()\n    @IsOptional()\n    @IsJSON()\n    schema?: string;\n\n    @ApiPropertyOptional()\n    @IsOptional()\n    @IsUrl()\n    @MaxLength(1024)\n    featuredImageUrl?: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsEmail()@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {message: 'Password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, one number, and one special character.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsOptional, IsString, Matches, MaxLength, MinLength } from \"class-validator\";\n\nexport class CreateUserDto {\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(3)\n    @MaxLength(96)\n    firstName: string;\n\n    @IsString()\n    @IsOptional()\n    @MinLength(3)\n    @MaxLength(96)\n    lastName?: string;\n\n    @IsString()\n    @IsNotEmpty()\n    @IsEmail()\n    @MaxLength(96)\n    email: string;\n\n    @IsString()\n    @IsNotEmpty()\n    @MinLength(8)\n    @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {\n        message: 'Password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, one number, and one special character.'\n    })\n    password: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateUserProvider.html":{"url":"injectables/CreateUserProvider.html","title":"injectable - CreateUserProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateUserProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/create-user.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, hashingProvider: HashingProvider)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/create-user.provider.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/create-user.provider.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, forwardRef, Inject, Injectable, RequestTimeoutException } from '@nestjs/common';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { HashingProvider } from 'src/auth/providers/hashing.provider';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class CreateUserProvider {\n\n    constructor(\n        @InjectRepository(User) private readonly userRepository: Repository,\n        @Inject(forwardRef(() => HashingProvider)) private readonly hashingProvider: HashingProvider\n    ) { }\n\n    public async createUser(createUserDto: CreateUserDto) {\n        let existingUser = undefined;\n        try {\n            existingUser = await this.userRepository.findOne({\n                where: {\n                    email: createUserDto.email\n                }\n            })\n\n        } catch (error) {\n            throw new RequestTimeoutException('Unable to process your request at the moment please try later', {\n                description: 'Error connectiong to the database'\n            })\n        }\n\n        if (existingUser) {\n            throw new BadRequestException('The user already exists, please check your email.')\n        }\n        let newUser = this.userRepository.create({\n            ...createUserDto,\n            password: await this.hashingProvider.hashPassword(createUserDto.password)\n        });\n\n        try {\n            newUser = await this.userRepository.save(newUser)\n        } catch (err) {\n            throw new RequestTimeoutException('Unable to process your request at the moment please try later', {\n                description: 'Error connecting to the database'\n            })\n        }\n        return newUser\n    }\n}\nfunction InejectRepository(): (target: typeof CreateUserProvider, propertyKey: undefined, parameterIndex: 0) => void {\n    throw new Error('Function not implemented.');\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DataResponseInterceptor.html":{"url":"injectables/DataResponseInterceptor.html","title":"injectable - DataResponseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DataResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/data-response/data-response.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/common/interceptors/data-response/data-response.interceptor.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptors/data-response/data-response.interceptor.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CallHandler, ExecutionContext, Injectable, NestInterceptor } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { map, Observable, tap } from 'rxjs';\n\n@Injectable()\nexport class DataResponseInterceptor implements NestInterceptor {\n\n  constructor(private readonly configService: ConfigService) { }\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(map((data) => ({\n      apiVersion: this.configService.get(\"apiConfig.apiVersion\"),\n      data: data,\n    })));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindOneByGoogleIdProvider.html":{"url":"injectables/FindOneByGoogleIdProvider.html","title":"injectable - FindOneByGoogleIdProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindOneByGoogleIdProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/find-one-by-google-id.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                findOneByGoogleId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/find-one-by-google-id.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByGoogleId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByGoogleId(googleId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/find-one-by-google-id.provider.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class FindOneByGoogleIdProvider {\n    constructor(\n        @InjectRepository(User) private readonly userRepository: Repository\n    ) { }\n\n    public async findOneByGoogleId(googleId: string) {\n        return this.userRepository.findOneBy({ googleId: googleId })\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindOneUserByEmailProvider.html":{"url":"injectables/FindOneUserByEmailProvider.html","title":"injectable - FindOneUserByEmailProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindOneUserByEmailProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/find-one-user-by-email.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                findOneByEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userReposiory: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/find-one-user-by-email.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userReposiory\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/find-one-user-by-email.provider.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, RequestTimeoutException, UnauthorizedException } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class FindOneUserByEmailProvider {\n\n    constructor(\n        @InjectRepository(User) private readonly userReposiory: Repository\n    ) { }\n\n    public async findOneByEmail(email: string) {\n        let user: User | undefined = undefined;\n\n        try {\n            user = await this.userReposiory.findOneBy({ email: email });\n        } catch (error) {\n            throw new RequestTimeoutException(error, {\n                description: 'could not fetch user'\n            })\n        }\n\n        if (!user) {\n            throw new UnauthorizedException(\"use does not exist\")\n        }\n        return user;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GenerateTokensProvider.html":{"url":"injectables/GenerateTokensProvider.html","title":"injectable - GenerateTokensProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GenerateTokensProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/generate-tokens.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                generateToken\n                            \n                            \n                                    Public\n                                    Async\n                                signToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtConfiguration: ConfigType<>, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/generate-tokens.provider.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        generateToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateToken(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/generate-tokens.provider.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    signToken(userId: number, expiresIn: number, payload?: T)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/generate-tokens.provider.ts:17\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                expiresIn\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport jwtConfig from '../config/jwt.config';\nimport { JwtService } from '@nestjs/jwt';\nimport { User } from 'src/users/user.entity';\nimport { ActiveUserData } from '../interfaces/active-user-data.interface';\n\n@Injectable()\nexport class GenerateTokensProvider {\n\n    constructor(\n        @Inject(jwtConfig.KEY) private readonly jwtConfiguration: ConfigType,\n        private readonly jwtService: JwtService\n    ) { }\n\n\n    public async signToken(userId: number, expiresIn: number, payload?: T) {\n        return await this.jwtService.signAsync({\n            sub: userId,\n            ...payload\n        }, {\n            audience: this.jwtConfiguration.audience,\n            issuer: this.jwtConfiguration.issuer,\n            secret: this.jwtConfiguration.secret,\n            expiresIn\n        })\n\n    }\n\n    public async generateToken(user: User) {\n        const [accessToken, refreshToken] = await Promise.all([\n            this.signToken>(user.id, this.jwtConfiguration.accessTokenTtl, { email: user.email }),\n\n            this.signToken(user.id, this.jwtConfiguration.refreshTokenTtl)\n        ])\n\n        return {\n            accessToken,\n            refreshToken\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPostBaseDto.html":{"url":"classes/GetPostBaseDto.html","title":"class - GetPostBaseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPostBaseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dtos/get-posts.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                endDate\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                startDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        endDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/get-posts.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        startDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/get-posts.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IntersectionType } from \"@nestjs/swagger\";\nimport { IsDate, IsOptional } from \"class-validator\";\nimport { PaginationQueryDto } from \"src/common/pagination/dtos/pagination-query.dto\";\n\nclass GetPostBaseDto {\n    @IsDate()\n    @IsOptional()\n    startDate?: Date;\n\n    @IsDate()\n    @IsOptional()\n    endDate?: Date;\n}\n\nexport class GetPostDto extends IntersectionType(GetPostBaseDto, PaginationQueryDto) {\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPostDto.html":{"url":"classes/GetPostDto.html","title":"class - GetPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dtos/get-posts.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            IntersectionType(GetPostBaseDto, PaginationQueryDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IntersectionType } from \"@nestjs/swagger\";\nimport { IsDate, IsOptional } from \"class-validator\";\nimport { PaginationQueryDto } from \"src/common/pagination/dtos/pagination-query.dto\";\n\nclass GetPostBaseDto {\n    @IsDate()\n    @IsOptional()\n    startDate?: Date;\n\n    @IsDate()\n    @IsOptional()\n    endDate?: Date;\n}\n\nexport class GetPostDto extends IntersectionType(GetPostBaseDto, PaginationQueryDto) {\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Ger user  with a specific id', example: 1234})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-param.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsInt, IsOptional } from \"class-validator\";\n\nexport class GetUsersParamDto {\n    @ApiPropertyOptional({\n        description: \"Ger user  with a specific id\",\n        example: 1234\n    })\n    @IsOptional()\n    @IsInt()\n    @Type(() => Number)\n    id?: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GoogleAuthenticationController.html":{"url":"controllers/GoogleAuthenticationController.html","title":"controller - GoogleAuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GoogleAuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/google-authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                google-authentication\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                authenticate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                        \n                    authenticate(googleTokenDto: GoogleTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/auth/social/google-authentication.controller.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleTokenDto\n                                            \n                                                            GoogleTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { GoogleAuthenticationService } from './providers/google-authentication.service';\nimport { GoogleTokenDto } from './dtos/google-token.dto';\n\n@Controller('google-authentication')\nexport class GoogleAuthenticationController {\n\n    constructor(private readonly googleAuthenticationService: GoogleAuthenticationService) { }\n\n\n    @Post()\n    public authenticate(@Body() googleTokenDto: GoogleTokenDto) {\n        return this.googleAuthenticationService.authenticate(googleTokenDto)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleAuthenticationService.html":{"url":"injectables/GoogleAuthenticationService.html","title":"injectable - GoogleAuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleAuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/providers/google-authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                oauthClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                authenticate\n                            \n                            \n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, generateTokensProvider: GenerateTokensProvider, userService: UserService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/social/providers/google-authentication.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTokensProvider\n                                                  \n                                                        \n                                                                        GenerateTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                        \n                    authenticate(googleTokenDto: GoogleTokenDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/social/providers/google-authentication.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleTokenDto\n                                            \n                                                            GoogleTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/social/providers/google-authentication.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        oauthClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OAuth2Client\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/social/providers/google-authentication.service.ts:13\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable, OnModuleInit, UnauthorizedException } from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { OAuth2Client } from 'google-auth-library';\nimport jwtConfig from 'src/auth/config/jwt.config';\nimport { GoogleTokenDto } from '../dtos/google-token.dto';\nimport { UserService } from 'src/users/providers/user.service';\nimport { GenerateTokensProvider } from 'src/auth/providers/generate-tokens.provider';\n\n@Injectable()\nexport class GoogleAuthenticationService implements OnModuleInit {\n\n    private oauthClient: OAuth2Client;\n\n    constructor(private readonly jwtService: JwtService,\n        private readonly generateTokensProvider: GenerateTokensProvider,\n        @Inject(forwardRef(() => UserService)) private readonly userService: UserService,\n        @Inject(jwtConfig.KEY) private readonly jwtConfiguration: ConfigType\n    ) { }\n\n    onModuleInit() {\n        const clientId = this.jwtConfiguration.googleClientId;\n        const clientSecret = this.jwtConfiguration.googleClientSecret;\n        this.oauthClient = new OAuth2Client(clientId, clientSecret)\n    }\n\n    public async authenticate(googleTokenDto: GoogleTokenDto) {\n\n        try {\n            const loginTicket = await this.oauthClient.verifyIdToken({\n                idToken: googleTokenDto.token\n            })\n\n            const { email, sub: googleId, given_name: firstName, family_name: lastName } = loginTicket.getPayload();\n\n            const user = await this.userService.findOneByGoogleId(googleId)\n\n            if (user) {\n                return this.generateTokensProvider.generateToken(user)\n            }\n\n            const newUser = await this.userService.createGoogleUser({\n                email: email,\n                firstName: firstName,\n                lastName: lastName,\n                googleId: googleId\n            })\n            return this.generateTokensProvider.generateToken(newUser);\n        } catch (error) {\n            throw new UnauthorizedException(error)\n        }\n\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GoogleTokenDto.html":{"url":"classes/GoogleTokenDto.html","title":"class - GoogleTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GoogleTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/dtos/google-token.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/social/dtos/google-token.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from \"class-validator\";\n\nexport class GoogleTokenDto {\n    @IsNotEmpty()\n    @IsString()\n    token: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GoogleUser.html":{"url":"classes/GoogleUser.html","title":"class - GoogleUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GoogleUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interfaces/google-user.interface.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                firstName\n                            \n                            \n                                googleId\n                            \n                            \n                                lastName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/interfaces/google-user.interface.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/interfaces/google-user.interface.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        googleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/interfaces/google-user.interface.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/interfaces/google-user.interface.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class GoogleUser {\n    email: string;\n    firstName: string;\n    lastName: string;\n    googleId: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HashingProvider.html":{"url":"injectables/HashingProvider.html","title":"injectable - HashingProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HashingProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/hashing.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                comparePassword\n                            \n                            \n                                    Abstract\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        comparePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePassword(data: string | Buffer, encrypted: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.provider.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encrypted\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(data: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.provider.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport abstract class HashingProvider {\n\n    abstract hashPassword(data: string | Buffer): Promise\n\n    abstract comparePassword(data: string | Buffer, encrypted: string): Promise\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MailModule.html":{"url":"modules/MailModule.html","title":"module - MailModule","body":"\n                   \n\n\n\n\n    Modules\n    MailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MailModule\n\n\n\ncluster_MailModule_providers\n\n\n\n\nMailService\n\nMailService\n\n\n\nMailModule\n\nMailModule\n\nMailModule -->\n\nMailService->MailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/mail/mail.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MailService } from './providers/mail.service';\n\n@Module({\n  providers: [MailService]\n})\nexport class MailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MailService.html":{"url":"injectables/MailService.html","title":"injectable - MailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mail/providers/mail.service.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class MailService {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/MetaOption.html":{"url":"entities/MetaOption.html","title":"entity - MetaOption","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  MetaOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-option.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                metaValue\n                            \n                            \n                                    \n                                    \n                                post\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, post => post.metaOptions, {onDelete: 'CASCADE'})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:19\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from \"src/post/post.entity\";\nimport { Column, CreateDateColumn, Entity, JoinColumn, OneToOne, PrimaryGeneratedColumn, UpdateDateColumn } from \"typeorm\";\n\n@Entity()\nexport class MetaOption {\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column({\n        type: \"json\",\n        nullable: false\n    })\n    metaValue: string;\n\n    @CreateDateColumn()\n    createDate: Date\n\n    @UpdateDateColumn()\n    updateDate: Date;\n\n\n    @OneToOne(() => Post, (post) => post.metaOptions, {\n        onDelete: 'CASCADE'\n    })\n    @JoinColumn()\n    post: Post;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MetaOptionsController.html":{"url":"controllers/MetaOptionsController.html","title":"controller - MetaOptionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MetaOptionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-options.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                meta-options\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostMetaOptionDto: CreatePostMetaOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/meta-options/meta-options.controller.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostMetaOptionDto\n                                            \n                                                            CreatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { CreatePostMetaOptionsDto } from './dtos/create-post-meta-option.dtos';\nimport { MetaOptionsService } from './providers/meta-options.service';\n\n@Controller('meta-options')\nexport class MetaOptionsController {\n\n\n    constructor(private readonly metaOptionService: MetaOptionsService) { }\n    @Post()\n    public create(@Body() createPostMetaOptionDto: CreatePostMetaOptionsDto) {\n        return this.metaOptionService.create(createPostMetaOptionDto);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MetaOptionsModule.html":{"url":"modules/MetaOptionsModule.html","title":"module - MetaOptionsModule","body":"\n                   \n\n\n\n\n    Modules\n    MetaOptionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/meta-options/meta-options.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MetaOptionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MetaOptionsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MetaOptionsController } from './meta-options.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MetaOption } from './meta-option.entity';\nimport { MetaOptionsService } from './providers/meta-options.service';\n\n@Module({\n  controllers: [MetaOptionsController],\n  imports: [TypeOrmModule.forFeature([MetaOption])],\n  providers: [MetaOptionsService]\n})\nexport class MetaOptionsModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MetaOptionsService.html":{"url":"injectables/MetaOptionsService.html","title":"injectable - MetaOptionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MetaOptionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/providers/meta-options.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(metaOptionRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/meta-options/providers/meta-options.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        metaOptionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostMetaOptionsDto: CreatePostMetaOptionsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/meta-options/providers/meta-options.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostMetaOptionsDto\n                                            \n                                                            CreatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreatePostMetaOptionsDto } from '../dtos/create-post-meta-option.dtos';\nimport { Repository } from 'typeorm';\nimport { MetaOption } from '../meta-option.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class MetaOptionsService {\n\n    constructor(@InjectRepository(MetaOption) private readonly metaOptionRepository: Repository) { }\n\n    public async create(createPostMetaOptionsDto: CreatePostMetaOptionsDto) {\n        let metaOption = this.metaOptionRepository.create(createPostMetaOptionsDto);\n        return await this.metaOptionRepository.save(metaOption);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Paginated.html":{"url":"interfaces/Paginated.html","title":"interface - Paginated","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Paginated\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/interfaces/paginated.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            links\n                                        \n                                \n                                \n                                        \n                                            meta\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        links\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        links:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        meta\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        meta:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Paginated {\n\n    data: T[];\n    meta: {\n        itemsPerPage: number;\n        totalItems: number;\n        currentPage: number;\n        totalPages: number;\n    };\n    links: {\n        first: string;\n        last: string;\n        current: string;\n        next: string;\n        previous: string;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaginationModule.html":{"url":"modules/PaginationModule.html","title":"module - PaginationModule","body":"\n                   \n\n\n\n\n    Modules\n    PaginationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_providers\n\n\n\ncluster_PaginationModule_exports\n\n\n\n\nPaginationProvider \n\nPaginationProvider \n\n\n\nPaginationModule\n\nPaginationModule\n\nPaginationProvider  -->\n\nPaginationModule->PaginationProvider \n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nPaginationModule -->\n\nPaginationProvider->PaginationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/pagination/pagination.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaginationProvider\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PaginationProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PaginationProvider } from './providers/pagination.provider';\n\n@Module({\n    providers: [PaginationProvider],\n    exports: [PaginationProvider]\n})\nexport class PaginationModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaginationProvider.html":{"url":"injectables/PaginationProvider.html","title":"injectable - PaginationProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaginationProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/providers/pagination.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                paginateQuery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: Request)\n                    \n                \n                        \n                            \n                                Defined in src/common/pagination/providers/pagination.provider.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                    Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        paginateQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    paginateQuery(paginationQuery: PaginationQueryDto, repository: Repository)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/pagination/providers/pagination.provider.ts:15\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                paginationQuery\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                repository\n                                            \n                                                        Repository\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { PaginationQueryDto } from '../dtos/pagination-query.dto';\nimport { ObjectLiteral, Repository } from 'typeorm';\nimport { Request } from 'express';\nimport { REQUEST } from '@nestjs/core';\nimport { Paginated } from '../interfaces/paginated.interface';\n\n@Injectable()\nexport class PaginationProvider {\n\n    constructor(\n        @Inject(REQUEST)\n        private readonly request: Request\n    ) { }\n    public async paginateQuery(paginationQuery: PaginationQueryDto, repository: Repository): Promise> {\n        let results = await repository.find({\n            skip: (paginationQuery.page - 1) * paginationQuery.limit,\n            take: paginationQuery.limit\n        })\n\n        const baseUrl = this.request.protocol + '://' + this.request.headers.host + '/';\n\n        const newUrl = new URL(this.request.url, baseUrl)\n        console.log(newUrl)\n\n        const totalItems = await repository.count();\n        const totalPages = Math.ceil(totalItems / paginationQuery.limit);\n        const nextPage = paginationQuery.page === totalPages ? paginationQuery.page : paginationQuery.page + 1\n        const previousPage = paginationQuery.page === 1 ? paginationQuery.page : paginationQuery.page - 1;\n        const finalResponse: Paginated = {\n            data: results,\n            meta: {\n                itemsPerPage: paginationQuery.limit,\n                totalItems: totalItems,\n                currentPage: paginationQuery.page,\n                totalPages: totalPages,\n            },\n            links: {\n                first: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&pages=1`,\n                last: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&pages=${totalPages}`,\n                current: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&pages=${paginationQuery.page}`,\n                next: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&pages=${nextPage}`,\n                previous: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&pages=${previousPage}`\n            }\n        }\n\n        return finalResponse;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationQueryDto.html":{"url":"classes/PaginationQueryDto.html","title":"class - PaginationQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/dtos/pagination-query.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/dtos/pagination-query.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/dtos/pagination-query.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport { IsOptional, IsPositive } from \"class-validator\";\n\nexport class PaginationQueryDto {\n    @IsOptional()\n    @IsPositive()\n    //@Type(() => Number) we do not need this anymore cause we already enabled the implicit conversion in the main.ts\n    limit?: number = 10;\n    @IsOptional()\n    @IsPositive()\n    //@Type(() => Number)\n    page?: number = 1;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dtos/patch-post-dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The id of the post that needs to be updated'})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/patch-post-dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from \"@nestjs/swagger\";\nimport { IsInt, IsNotEmpty } from \"class-validator\";\nimport { CreatePostDto } from \"./create-post.dtos\";\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n    @ApiProperty({\n        description: \"The id of the post that needs to be updated\"\n    })\n    @IsInt()\n    @IsNotEmpty()\n    id: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \"@nestjs/mapped-types\";\nimport { CreateUserDto } from \"./create-user.dto\";\n\nexport class PatchUserDto extends PartialType(CreateUserDto) {\n   \n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                postType\n                            \n                            \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.posts, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MetaOption\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, metaOptions => metaOptions.post, {cascade: true, eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: postType, nullable: false, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: postStatus, nullable: false, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Tag[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, tag => tag.posts, {eager: true})@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:18\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, JoinTable, ManyToMany, ManyToOne, OneToOne, PrimaryGeneratedColumn } from \"typeorm\";\nimport { CreatePostMetaOptionsDto } from \"../meta-options/dtos/create-post-meta-option.dtos\";\nimport { postType } from \"./enums/postType.enum\";\nimport { postStatus } from \"./enums/status.enum\";\nimport { MetaOption } from \"src/meta-options/meta-option.entity\";\nimport { User } from \"src/users/user.entity\";\nimport { Tag } from \"src/tags/tag.entity\";\n\n@Entity()\nexport class Post {\n    @PrimaryGeneratedColumn()\n    id: number;\n    @Column({\n        type: \"varchar\",\n        length: 512,\n        nullable: false\n    })\n    title: string;\n    @Column({\n        type: \"enum\",\n        enum: postType,\n        nullable: false,\n        default: postType.POST\n    })\n    postType: postType;\n\n    @Column({\n        type: \"varchar\",\n        length: 256,\n        nullable: false,\n        unique: true\n    })\n    slug: string;\n    @Column({\n        type: \"enum\",\n        enum: postStatus,\n        nullable: false,\n        default: postStatus.DRAFT\n    })\n    status: postStatus;\n\n    @Column({\n        type: \"text\",\n        nullable: true\n    })\n    content?: string;\n\n    @Column({\n        type: \"text\",\n        nullable: true\n    })\n    schema?: string;\n\n    @Column({\n        type: \"varchar\",\n        length: 1024,\n        nullable: true\n    })\n    featuredImageUrl?: string;\n\n    @Column({\n        type: \"timestamp\",\n    })\n    publishOn?: Date;\n\n\n\n\n    @OneToOne(() => MetaOption, (metaOptions) => metaOptions.post, {\n        cascade: true,\n        eager: true\n    })\n    //@JoinColumn()\n    metaOptions?: MetaOption;\n\n    @ManyToOne(() => User, (user) => user.posts, {\n        eager: true\n    })\n    author: User;\n\n\n    @ManyToMany(() => Tag, (tag) => tag.posts, {\n        eager: true\n    })\n    @JoinTable()\n    tags?: Tag[];\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostController.html":{"url":"controllers/PostController.html","title":"controller - PostController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                post\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    Public\n                                deletePost\n                            \n                            \n                                    \n                                    Public\n                                getPost\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(user: ActiveUserData, createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new blog post'})@ApiResponse({status: 201, description: 'you get a 201 response if your post is created successfully'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            ActiveUserData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPost(userId: string, postQuery: GetPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:userId?')\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                postQuery\n                                            \n                                                            GetPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Updates an existing blog post'})@ApiResponse({status: 200, description: 'A 200 response if the post is updated successfully'})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Param, ParseIntPipe, Patch, Post, Query, Req } from '@nestjs/common';\nimport { PostService } from './services/post.service';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreatePostDto } from './dtos/create-post.dtos';\nimport { PatchPostDto } from './dtos/patch-post-dto';\nimport { GetPostDto } from './dtos/get-posts.dto';\nimport { ActiveUser } from 'src/auth/decorators/active-user.decorator';\nimport { ActiveUserData } from 'src/auth/interfaces/active-user-data.interface';\n\n@Controller('post')\n@ApiTags('posts')\nexport class PostController {\n\n    constructor(private readonly postService: PostService) { }\n\n    @Get('/:userId?')\n    public getPost(@Param('userId') userId: string, @Query() postQuery: GetPostDto) {\n        return this.postService.findAll(postQuery, userId)\n    }\n\n    @ApiOperation({\n        summary: \"Creates a new blog post\"\n    })\n    @ApiResponse({\n        status: 201,\n        description: \"you get a 201 response if your post is created successfully\"\n    })\n    @Post()\n    public createPost(@ActiveUser() user: ActiveUserData, @Body() createPostDto: CreatePostDto) {\n\n        return this.postService.createPost(createPostDto, user)\n    }\n    @ApiOperation({\n        summary: \"Updates an existing blog post\"\n    })\n    @ApiResponse({\n        status: 200,\n        description: \"A 200 response if the post is updated successfully\"\n    })\n    @Patch()\n    public updatePost(@Body() patchPostDto: PatchPostDto) {\n        return this.postService.update(patchPostDto)\n    }\n\n    @Delete()\n    public deletePost(@Query(\"id\", ParseIntPipe) id: number) {\n        return this.postService.delete(id)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostModule.html":{"url":"modules/PostModule.html","title":"module - PostModule","body":"\n                   \n\n\n\n\n    Modules\n    PostModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostModule\n\n\n\ncluster_PostModule_imports\n\n\n\ncluster_PostModule_providers\n\n\n\n\nPaginationModule\n\nPaginationModule\n\n\n\nPostModule\n\nPostModule\n\nPostModule -->\n\nPaginationModule->PostModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostModule -->\n\nTagsModule->PostModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostModule -->\n\nUsersModule->PostModule\n\n\n\n\n\nCreatePostProvider\n\nCreatePostProvider\n\nPostModule -->\n\nCreatePostProvider->PostModule\n\n\n\n\n\nPostService\n\nPostService\n\nPostModule -->\n\nPostService->PostModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/post/post.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CreatePostProvider\n                        \n                        \n                            PostService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PaginationModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostController } from './post.controller';\nimport { PostService } from './services/post.service';\nimport { UsersModule } from 'src/users/users.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Post } from './post.entity';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { TagsModule } from 'src/tags/tags.module';\nimport { PaginationModule } from 'src/common/pagination/pagination.module';\nimport { CreatePostProvider } from './services/create-post.provider';\n\n@Module({\n  controllers: [PostController],\n  providers: [PostService, CreatePostProvider],\n  imports: [\n    UsersModule,\n    TagsModule,\n    TypeOrmModule.forFeature([Post, MetaOption]),\n    PaginationModule\n  ]\n})\nexport class PostModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostService.html":{"url":"injectables/PostService.html","title":"injectable - PostService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/services/post.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createPost\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, postRepository: Repository, tagsService: TagsService, paginationProvider: PaginationProvider, createPostProvider: CreatePostProvider)\n                    \n                \n                        \n                            \n                                Defined in src/post/services/post.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tagsService\n                                                  \n                                                        \n                                                                        TagsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        paginationProvider\n                                                  \n                                                        \n                                                                        PaginationProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        createPostProvider\n                                                  \n                                                        \n                                                                        CreatePostProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto, user: ActiveUserData)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/services/post.service.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            ActiveUserData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/services/post.service.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(postQuery: GetPostDto, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/services/post.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postQuery\n                                            \n                                                            GetPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(patchPostDto: PatchPostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/services/post.service.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable, RequestTimeoutException } from '@nestjs/common';\nimport { UserService } from 'src/users/providers/user.service';\nimport { CreatePostDto } from '../dtos/create-post.dtos';\nimport { Repository } from 'typeorm';\nimport { Post } from '../post.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { TagsService } from 'src/tags/providers/tags.service';\nimport { PatchPostDto } from '../dtos/patch-post-dto';\nimport { GetPostDto } from '../dtos/get-posts.dto';\nimport { PaginationProvider } from 'src/common/pagination/providers/pagination.provider';\nimport { Paginated } from 'src/common/pagination/interfaces/paginated.interface';\nimport { CreatePostProvider } from './create-post.provider';\nimport { ActiveUserData } from 'src/auth/interfaces/active-user-data.interface';\n@Injectable()\nexport class PostService {\n\n    constructor(\n        private readonly userService: UserService,\n        @InjectRepository(Post) private readonly postRepository: Repository,\n\n        //@InjectRepository(MetaOption) private readonly metaOptionRepository: Repository,\n\n        private readonly tagsService: TagsService,\n\n        private readonly paginationProvider: PaginationProvider,\n\n        private readonly createPostProvider: CreatePostProvider\n    ) { }\n\n    public async findAll(postQuery: GetPostDto, userId: string): Promise> {\n        /*const user = await this.userService.findOneById(+userId);\n        let posts = await this.postRepository.find({\n            relations: {\n                metaOptions: true,\n                author: true,\n                tags: true\n            },\n            skip: (postQuery.page - 1) * postQuery.limit,\n            take: postQuery.limit,\n        })*/\n\n        let posts = await this.paginationProvider.paginateQuery({\n            limit: postQuery.limit,\n            page: postQuery.page\n        }, this.postRepository,)\n        return posts\n    }\n\n    public async createPost(createPostDto: CreatePostDto, user: ActiveUserData) {\n        return await this.createPostProvider.createPost(createPostDto, user)\n    }\n\n    public async delete(id: number) {\n\n        let post = await this.postRepository.findOneBy({ id: id })\n\n        await this.postRepository.delete(id)\n\n        /*await this.metaOptionRepository.delete(post.metaOptions.id)\n*/\n        /*let inversePost = await this.metaOptionRepository.find({\n            where: {\n                id: post.metaOptions.id\n            },\n            relations: {\n                post: true\n            }\n        })*/\n        return { deleted: true, id }\n    }\n\n\n    public async update(patchPostDto: PatchPostDto) {\n        let tags = undefined;\n        let post = undefined;\n        try {\n            tags = await this.tagsService.findMultpleTags(patchPostDto.tags);\n        } catch (err) {\n            throw new RequestTimeoutException('unable to process your request please try later',);\n        }\n\n        if (!tags || tags.length !== patchPostDto.tags.length) {\n            throw new BadRequestException('please check your tag Ids and ensure they are correct')\n        }\n\n        try {\n            post = await this.postRepository.findOneBy({ id: patchPostDto.id })\n        } catch (e) {\n            throw new RequestTimeoutException('unable to process your request please try later',);\n\n        }\n\n        if (!post) {\n            throw new BadRequestException('The post id does not exist')\n        }\n\n        post.title = patchPostDto.title ?? post.title;\n        post.content = patchPostDto.content ?? post.content\n        post.status = patchPostDto.status ?? post.status\n        post.slug = patchPostDto.slug ?? post.slug\n        post.postType = patchPostDto.postType ?? post.postType\n        post.featuredImageUrl = patchPostDto.featuredImageUrl ?? post.featuredImageUrl\n        post.publishOn = patchPostDto.publishOn ?? post.publishOn\n\n        post.tags = tags\n        try {\n            await this.postRepository.save(post)\n        } catch (err) {\n            throw new RequestTimeoutException('unable to process your request please try later',);\n        }\n        return post;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenDto.html":{"url":"classes/RefreshTokenDto.html","title":"class - RefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/refresh-token.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/refresh-token.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from \"class-validator\";\n\nexport class RefreshTokenDto {\n    @IsNotEmpty()\n    @IsString()\n    refreshToken: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokensProvider.html":{"url":"injectables/RefreshTokensProvider.html","title":"injectable - RefreshTokensProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokensProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/refresh-tokens.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                refreshTokens\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>, generateTokenProvider: GenerateTokensProvider, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/refresh-tokens.provider.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTokenProvider\n                                                  \n                                                        \n                                                                        GenerateTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshTokens(refreshTokenDto: RefreshTokenDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/refresh-tokens.provider.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshTokenDto\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable, UnauthorizedException } from '@nestjs/common';\nimport { RefreshTokenDto } from '../dtos/refresh-token.dto';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigType } from '@nestjs/config';\nimport jwtConfig from '../config/jwt.config';\nimport { GenerateTokensProvider } from './generate-tokens.provider';\nimport { UserService } from 'src/users/providers/user.service';\nimport { ActiveUserData } from '../interfaces/active-user-data.interface';\n\n@Injectable()\nexport class RefreshTokensProvider {\n\n    constructor(\n        private readonly jwtService: JwtService,\n        @Inject(jwtConfig.KEY) private readonly jwtConfiguration: ConfigType,\n\n        private readonly generateTokenProvider: GenerateTokensProvider,\n        @Inject(forwardRef(() => UserService)) private readonly userService: UserService\n    ) { }\n    public async refreshTokens(refreshTokenDto: RefreshTokenDto) {\n        try {\n            const { sub } = await this.jwtService.verifyAsync>(refreshTokenDto.refreshToken, {\n                secret: this.jwtConfiguration.secret,\n                audience: this.jwtConfiguration.audience,\n                issuer: this.jwtConfiguration.issuer\n            })\n\n            const user = await this.userService.findOneById(sub)\n\n            return await this.generateTokenProvider.generateToken(user)\n        } catch (error) {\n            throw new UnauthorizedException(error)\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInDto.html":{"url":"classes/SignInDto.html","title":"class - SignInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/signin.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/signin.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/signin.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString } from \"class-validator\";\n\nexport class SignInDto {\n    @IsEmail()\n    @IsNotEmpty()\n    email: string;\n\n    @IsString()\n    @IsNotEmpty()\n    password: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SignInProvider.html":{"url":"injectables/SignInProvider.html","title":"injectable - SignInProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SignInProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/sign-in.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, hashingProvider: HashingProvider, jwtService: JwtService, generateTokensProvider: GenerateTokensProvider, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/sign-in.provider.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTokensProvider\n                                                  \n                                                        \n                                                                        GenerateTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/sign-in.provider.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable, RequestTimeoutException, UnauthorizedException } from '@nestjs/common';\nimport { SignInDto } from '../dtos/signin.dto';\nimport { UserService } from 'src/users/providers/user.service';\nimport { HashingProvider } from './hashing.provider';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigType } from '@nestjs/config';\nimport jwtConfig from '../config/jwt.config';\nimport { ActiveUserData } from '../interfaces/active-user-data.interface';\nimport { GenerateTokensProvider } from './generate-tokens.provider';\n\n@Injectable()\nexport class SignInProvider {\n\n    constructor(\n        @Inject(forwardRef(() => UserService))\n        private readonly userService: UserService,\n        private readonly hashingProvider: HashingProvider,\n        private readonly jwtService: JwtService,\n        private readonly generateTokensProvider: GenerateTokensProvider,\n        @Inject(jwtConfig.KEY) private readonly jwtConfiguration: ConfigType\n    ) {\n\n    }\n    public async signIn(signInDto: SignInDto) {\n        let user = await this.userService.findOneByEmail(signInDto.email)\n\n        let isEqual: boolean = false\n\n        try {\n            isEqual = await this.hashingProvider.comparePassword(signInDto.password, user.password)\n        } catch (error) {\n            throw new RequestTimeoutException(error, {\n                description: 'could not compare password'\n            })\n        }\n\n        if (!isEqual) {\n            throw new UnauthorizedException(\"incorrect password\")\n        }\n        return await this.generateTokensProvider.generateToken(user)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Tag.html":{"url":"entities/Tag.html","title":"entity - Tag","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Tag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tag.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                deleteAt\n                            \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                posts\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, post => post.tags, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:48\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from \"src/post/post.entity\";\nimport { Column, CreateDateColumn, DeleteDateColumn, Entity, ManyToMany, PrimaryGeneratedColumn, UpdateDateColumn } from \"typeorm\";\n\n@Entity()\nexport class Tag {\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column({\n        type: \"varchar\",\n        length: 256,\n        nullable: false,\n        unique: true\n    })\n    name: string;\n\n    @Column({\n        type: \"varchar\",\n        length: 256,\n        nullable: false,\n        unique: true\n    })\n    slug: string;\n\n    @Column({\n        type: \"text\",\n        nullable: true,\n    })\n    description?: string;\n\n    @Column({\n        type: \"text\",\n        nullable: true,\n    })\n    schema?: string;\n\n    @Column({\n        type: \"varchar\",\n        length: 1024,\n        nullable: true,\n    })\n    featuredImageUrl: string;\n\n    @CreateDateColumn()\n    createDate: Date;\n\n    @UpdateDateColumn()\n    updateDate: Date;\n\n    @DeleteDateColumn()\n    deleteAt: Date;\n\n    @ManyToMany(() => Post, (post) => post.tags, {\n        onDelete: \"CASCADE\"\n    })\n    posts: Post[];\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagsController.html":{"url":"controllers/TagsController.html","title":"controller - TagsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tags\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                create\n                            \n                            \n                                    \n                                    Public\n                                delete\n                            \n                            \n                                    \n                                    Public\n                                softDelete\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTagDto: CreateTagDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTagDto\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        softDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDelete(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('soft-delete')\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, ParseIntPipe, Post, Query } from '@nestjs/common';\nimport { CreateTagDto } from './dtos/create-tag.dto';\nimport { TagsService } from './providers/tags.service';\n\n@Controller('tags')\nexport class TagsController {\n\n    constructor(private readonly tagsService: TagsService) { }\n    @Post()\n    public create(@Body() createTagDto: CreateTagDto) {\n        return this.tagsService.createTags(createTagDto)\n    }\n\n    @Delete()\n    public delete(@Query('id', ParseIntPipe) id: number) {\n        return this.tagsService.delete(id);\n    }\n    @Delete(\"soft-delete\")\n    public softDelete(@Query('id', ParseIntPipe) id: number) {\n        return this.tagsService.softRemove(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagsModule.html":{"url":"modules/TagsModule.html","title":"module - TagsModule","body":"\n                   \n\n\n\n\n    Modules\n    TagsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_providers\n\n\n\ncluster_TagsModule_exports\n\n\n\n\nTagsService \n\nTagsService \n\n\n\nTagsModule\n\nTagsModule\n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tags/tags.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TagsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TagsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TagsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TagsController } from './tags.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Tag } from './tag.entity';\nimport { TagsService } from './providers/tags.service';\n\n@Module({\n  controllers: [TagsController],\n  imports: [TypeOrmModule.forFeature([Tag])],\n  providers: [TagsService],\n  exports: [TagsService]\n})\nexport class TagsModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TagsService.html":{"url":"injectables/TagsService.html","title":"injectable - TagsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TagsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/providers/tags.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createTags\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findMultpleTags\n                            \n                            \n                                    Public\n                                    Async\n                                softRemove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/tags/providers/tags.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tagsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTags(createTagDto: CreateTagDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTagDto\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findMultpleTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    findMultpleTags(tags: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tags\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        softRemove\n                        \n                    \n                \n            \n            \n                \n                        \n                    softRemove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateTagDto } from '../dtos/create-tag.dto';\nimport { In, Repository } from 'typeorm';\nimport { Tag } from '../tag.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class TagsService {\n\n    constructor(@InjectRepository(Tag) private readonly tagsRepository: Repository) { }\n\n    public async createTags(createTagDto: CreateTagDto) {\n        let tag = this.tagsRepository.create(createTagDto)\n\n        return await this.tagsRepository.save(tag)\n    }\n\n    public async findMultpleTags(tags: number[]) {\n        let result = await this.tagsRepository.find({\n            where: {\n                id: In(tags)\n            }\n        })\n\n        return result;\n    }\n\n    public async delete(id: number) {\n        await this.tagsRepository.delete(id);\n        return { deleted: true, id }\n    }\n\n    public async softRemove(id: number) {\n        await this.tagsRepository.softDelete(id);\n        return { deleted: true, id }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Upload.html":{"url":"entities/Upload.html","title":"entity - Upload","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Upload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/uploads/upload.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                mime\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                path\n                            \n                            \n                                    \n                                size\n                            \n                            \n                                    \n                                type\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/uploads/upload.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/uploads/upload.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        mime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/uploads/upload.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/uploads/upload.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/uploads/upload.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        size\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/uploads/upload.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: fileTypes, default: undefined, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/uploads/upload.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/uploads/upload.entity.ts:47\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, CreateDateColumn, Entity, PrimaryGeneratedColumn, UpdateDateColumn } from \"typeorm\";\nimport { fileTypes } from \"./enums/file-types.enum\";\n\n@Entity()\nexport class Upload {\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column({\n        type: 'varchar',\n        length: 1024,\n        nullable: false\n    })\n    name: string;\n    @Column({\n        type: 'varchar',\n        length: 1024,\n        nullable: false\n    })\n    path: string;\n\n    @Column({\n        type: 'enum',\n        enum: fileTypes,\n        default: fileTypes.IMAGE,\n        nullable: false\n    })\n    type: string;\n\n    @Column({\n        type: 'varchar',\n        length: 1024,\n        nullable: false\n    })\n    mime: string;\n\n    @Column({\n        type: 'varchar',\n        nullable: false\n    })\n    size: number;\n\n    @CreateDateColumn()\n    createDate: Date;\n\n    @UpdateDateColumn()\n    updateDate: Date;\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UploadFile.html":{"url":"interfaces/UploadFile.html","title":"interface - UploadFile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UploadFile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/uploads/interfaces/upload-file.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            mime\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            path\n                                        \n                                \n                                \n                                        \n                                            size\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        mime\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mime:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        size:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         fileTypes\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         fileTypes\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { fileTypes } from \"../enums/file-types.enum\";\n\nexport interface UploadFile {\n    name: string;\n    path: string;\n    type: fileTypes;\n    mime: string;\n    size: number;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UploadToAwsProvider.html":{"url":"injectables/UploadToAwsProvider.html","title":"injectable - UploadToAwsProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UploadToAwsProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/uploads/providers/upload-to-aws.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                fileUpload\n                            \n                            \n                                generateFileName\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/uploads/providers/upload-to-aws.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        fileUpload\n                        \n                    \n                \n            \n            \n                \n                        \n                    fileUpload(file: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/uploads/providers/upload-to-aws.provider.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateFileName\n                        \n                    \n                \n            \n            \n                \ngenerateFileName(file: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/uploads/providers/upload-to-aws.provider.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, RequestTimeoutException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { S3 } from 'aws-sdk';\nimport * as path from \"path\"\nimport { v4 as uuid4 } from 'uuid'\n@Injectable()\nexport class UploadToAwsProvider {\n    constructor(private readonly configService: ConfigService) { }\n\n    public async fileUpload(file: Express.Multer.File) {\n        const s3 = new S3();\n\n        try {\n            const uploadResult = await s3.upload({\n                Bucket: this.configService.get('appConfig.awsBucketName'),\n                Body: file.buffer,\n                Key: this.generateFileName(file),\n                ContentType: file.mimetype,\n            }).promise()\n\n            return uploadResult.Key;\n        } catch (error) {\n            throw new RequestTimeoutException(error)\n        }\n    }\n\n    generateFileName(file: Express.Multer.File) {\n        let name = file.originalname.split('.')[0]\n        name.replace(/\\s/g, '').trim();\n        let extension = path.extname(file.originalname);\n        let timestamp = new Date().getTime().toString().trim()\n\n        return `${name}-${timestamp}-${uuid4()}${extension}`\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UploadsController.html":{"url":"controllers/UploadsController.html","title":"controller - UploadsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UploadsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/uploads/uploads.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                uploads\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('file')@UseInterceptors(undefined)@ApiHeaders(['undefined', 'undefined'])@ApiOperation({summary: 'Upload a new image to the server'})\n                \n            \n\n                    \n                        \n                            Defined in src/uploads/uploads.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, UploadedFile, UseInterceptors } from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express'\nimport { ApiHeader, ApiHeaders, ApiOperation } from '@nestjs/swagger';\nimport { Express } from 'express'\nimport { UploadsService } from './providers/uploads.service';\n@Controller('uploads')\nexport class UploadsController {\n\n    constructor(private readonly uploadService: UploadsService) { }\n\n    @Post('file')\n    @UseInterceptors(FileInterceptor('file'))\n    @ApiHeaders([\n        {\n            name: 'Content-Type',\n            description: 'multipart/form-data'\n        },\n        {\n            name: 'Authorization',\n            description: 'Bearer Token'\n        }\n    ])\n    @ApiOperation({\n        summary: \"Upload a new image to the server\"\n    })\n    public uploadFile(@UploadedFile() file: Express.Multer.File) {\n        return this.uploadService.uploadFile(file);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UploadsModule.html":{"url":"modules/UploadsModule.html","title":"module - UploadsModule","body":"\n                   \n\n\n\n\n    Modules\n    UploadsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UploadsModule\n\n\n\ncluster_UploadsModule_providers\n\n\n\n\nUploadToAwsProvider\n\nUploadToAwsProvider\n\n\n\nUploadsModule\n\nUploadsModule\n\nUploadsModule -->\n\nUploadToAwsProvider->UploadsModule\n\n\n\n\n\nUploadsService\n\nUploadsService\n\nUploadsModule -->\n\nUploadsService->UploadsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/uploads/uploads.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UploadToAwsProvider\n                        \n                        \n                            UploadsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UploadsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UploadsController } from './uploads.controller';\nimport { UploadsService } from './providers/uploads.service';\nimport { UploadToAwsProvider } from './providers/upload-to-aws.provider';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Upload } from './upload.entity';\n\n@Module({\n  controllers: [UploadsController],\n  providers: [UploadsService, UploadToAwsProvider],\n  imports: [TypeOrmModule.forFeature([Upload])]\n})\nexport class UploadsModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UploadsService.html":{"url":"injectables/UploadsService.html","title":"injectable - UploadsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UploadsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/uploads/providers/uploads.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(uploadRepository: Repository, uploadToAwsProvider: UploadToAwsProvider, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/uploads/providers/uploads.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        uploadRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        uploadToAwsProvider\n                                                  \n                                                        \n                                                                        UploadToAwsProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(file: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/uploads/providers/uploads.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, ConflictException, Injectable } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { Upload } from '../upload.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { UploadToAwsProvider } from './upload-to-aws.provider';\nimport { ConfigService } from '@nestjs/config';\nimport { UploadFile } from '../interfaces/upload-file.interface';\nimport { fileTypes } from '../enums/file-types.enum';\n\n@Injectable()\nexport class UploadsService {\n\n    constructor(@InjectRepository(Upload) private readonly uploadRepository: Repository,\n        private readonly uploadToAwsProvider: UploadToAwsProvider,\n        private readonly configService: ConfigService\n    ) { }\n    public async uploadFile(file: Express.Multer.File) {\n        if (['image/gif', 'image/jpeg', 'image/jpg', 'image/png'].includes(file.mimetype)) {\n            throw new BadRequestException('Mine type not supported')\n        }\n\n        try {\n            const name = await this.uploadToAwsProvider.fileUpload(file);\n            const uploadFile: UploadFile = {\n                name: name,\n                path: `https://${this.configService.get('appConfig.awsCloudfrontUrl')}/${name}`,\n                type: fileTypes.IMAGE,\n                mime: file.mimetype,\n                size: file.size\n            }\n\n            const upload = this.uploadRepository.create(uploadFile);\n            return await this.uploadRepository.save(upload)\n\n        } catch (error) {\n            throw new ConflictException(error)\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                googleId\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                            \n                                    \n                                posts\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        googleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, post => post.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:48\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Exclude } from \"class-transformer\";\nimport { Post } from \"src/post/post.entity\";\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from \"typeorm\";\n\n@Entity()\nexport class User {\n    @PrimaryGeneratedColumn()\n    id: number;\n    @Column({\n        type: \"varchar\",\n        length: 96,\n        nullable: false\n    })\n    firstName: string;\n    @Column(\n        {\n            type: \"varchar\",\n            length: 96,\n            nullable: true\n        }\n    )\n    lastName: string;\n    @Column({\n        type: \"varchar\",\n        length: 96,\n        nullable: false,\n        unique: true\n    })\n    email: string;\n    @Column({\n        type: \"varchar\",\n        length: 96,\n        nullable: true\n    })\n    @Exclude()\n    password?: string;\n\n    @Column({\n        type: \"varchar\",\n        length: 96,\n        nullable: true\n    })\n    @Exclude()\n    googleId?: string;\n\n\n    @OneToMany(() => Post, (post) => post.author)\n    posts: Post[]\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserCreateManyProvider.html":{"url":"injectables/UserCreateManyProvider.html","title":"injectable - UserCreateManyProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserCreateManyProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/user-create-many.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createMany\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataSource: DataSource)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/user-create-many.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMany(createManyUsersDto: CreateManyUsersDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user-create-many.provider.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createManyUsersDto\n                                            \n                                                            CreateManyUsersDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, RequestTimeoutException } from '@nestjs/common';\nimport { User } from '../user.entity';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { DataSource } from 'typeorm';\nimport { CreateManyUsersDTO } from '../dtos/create-many-user.dto';\n\n@Injectable()\nexport class UserCreateManyProvider {\n\n    constructor(private readonly dataSource: DataSource) { }\n    public async createMany(createManyUsersDto: CreateManyUsersDTO) {\n        let newUsers: User[] = []\n\n        const queryRunner = this.dataSource.createQueryRunner();\n        try {\n            await queryRunner.connect();\n\n            await queryRunner.startTransaction();\n        } catch (error) {\n            throw new RequestTimeoutException('could not connect to the database')\n        }\n\n        try {\n            for (let user of createManyUsersDto.users) {\n                let newUser = queryRunner.manager.create(User, user)\n                let result = await queryRunner.manager.save(newUser)\n                newUsers.push(result)\n            }\n            await queryRunner.commitTransaction();\n        } catch (error) {\n            await queryRunner.rollbackTransaction();\n            throw new ConflictException('could not complete the transaction', {\n                description: String(error)\n            })\n        } finally {\n            try {\n                await queryRunner.release()\n            } catch (error) {\n                throw new RequestTimeoutException('could not release to the connection', {\n                    description: String(error)\n                })\n            }\n        }\n        return newUsers\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/user.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to connect to Users table and perform business operations\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createGoogleUser\n                            \n                            \n                                    Public\n                                    Async\n                                createMany\n                            \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOneByEmail\n                            \n                            \n                                    Public\n                                    Async\n                                findOneByGoogleId\n                            \n                            \n                                    Public\n                                    Async\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, userRepository: Repository, configService: ConfigService, profilConfiguration: ConfigType<>, usersCreateManyProvider: UserCreateManyProvider, createGoogleUserProvider: CreateGoogleUserProvider, createUsersProvider: CreateUserProvider, findOneByGoogleIdPrvider: FindOneByGoogleIdProvider, findOneUserByEmailProvider: FindOneUserByEmailProvider)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/user.service.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        profilConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersCreateManyProvider\n                                                  \n                                                        \n                                                                        UserCreateManyProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        createGoogleUserProvider\n                                                  \n                                                        \n                                                                        CreateGoogleUserProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        createUsersProvider\n                                                  \n                                                        \n                                                                        CreateUserProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findOneByGoogleIdPrvider\n                                                  \n                                                        \n                                                                        FindOneByGoogleIdProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findOneUserByEmailProvider\n                                                  \n                                                        \n                                                                        FindOneUserByEmailProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createGoogleUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createGoogleUser(googleUser: GoogleUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user.service.ts:108\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleUser\n                                            \n                                                            GoogleUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMany(createManyUsersDto: CreateManyUsersDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user.service.ts:96\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createManyUsersDto\n                                            \n                                                            CreateManyUsersDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user.service.ts:92\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUserParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user.service.ts:39\n                        \n                    \n\n\n            \n                \n                        The method to get all the users from the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user.service.ts:100\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByGoogleId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByGoogleId(googleId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user.service.ts:104\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user.service.ts:71\n                        \n                    \n\n\n            \n                \n                        Find a single user using the ID of user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, forwardRef, HttpException, HttpStatus, Inject, Injectable, RequestTimeoutException } from \"@nestjs/common\";\nimport { GetUsersParamDto } from \"../dtos/get-users-param.dto\";\nimport { AuthService } from \"src/auth/service/auth.service\";\nimport { DataSource, Repository } from \"typeorm\";\nimport { User } from \"../user.entity\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { CreateUserDto } from \"../dtos/create-user.dto\";\nimport { ConfigService, ConfigType } from \"@nestjs/config\";\nimport profileConfig from \"../config/profile.config\";\nimport { UserCreateManyProvider } from \"./user-create-many.provider\";\nimport { CreateManyUsersDTO } from \"../dtos/create-many-user.dto\";\nimport { CreateUserProvider } from \"./create-user.provider\";\nimport { FindOneUserByEmailProvider } from \"./find-one-user-by-email.provider\";\nimport { FindOneByGoogleIdProvider } from \"./find-one-by-google-id.provider\";\nimport { CreateGoogleUserProvider } from \"./create-google-user.provider\";\nimport { GoogleUser } from \"../interfaces/google-user.interface\";\n\n/**\n * Class to connect to Users table and perform business operations\n */\n@Injectable()\nexport class UserService {\n\n    constructor(\n        @Inject(forwardRef(() => AuthService)) private readonly authService: AuthService,\n        @InjectRepository(User) private userRepository: Repository,\n        private readonly configService: ConfigService,\n        @Inject(profileConfig.KEY) private readonly profilConfiguration: ConfigType,\n        private readonly usersCreateManyProvider: UserCreateManyProvider,\n        private readonly createGoogleUserProvider: CreateGoogleUserProvider,\n        private readonly createUsersProvider: CreateUserProvider,\n        private readonly findOneByGoogleIdPrvider: FindOneByGoogleIdProvider,\n        private readonly findOneUserByEmailProvider: FindOneUserByEmailProvider\n    ) { }\n\n    /**\n     * The method to get all the users from the database\n     */\n    public findAll(getUserParamDto: GetUsersParamDto, limit: number, page: number) {\n        /* const isAUth = this.authService.isAUth();\n         console.log(isAUth)\n \n         const environment = this.configService.get(\"S3_BUCKET\")\n         console.log(environment)\n         console.log(this.profilConfiguration)\n         console.log(this.profilConfiguration.apiKey)\n         return [\n             {\n                 firstName: 'John',\n                 email: 'john@doe.com'\n             },\n             {\n                 firstName: 'Alice',\n                 email: 'alice@doe.com'\n             }\n         ]*/\n\n        throw new HttpException({\n            status: HttpStatus.MOVED_PERMANENTLY,\n            error: 'The API endpoint does not exist',\n            fileName: 'user.service.ts',\n            lineNumber: 14,\n        }, HttpStatus.MOVED_PERMANENTLY, {\n            description: 'Occured because the API endpoint was permanently moved'\n        })\n    }\n    /**\n     * Find a single user using the ID of user\n     */\n\n    public async findOneById(id: number) {\n        let user = undefined;\n\n        try {\n            user = await this.userRepository.findOneBy({\n                id: id,\n            })\n        } catch (err) {\n            throw new RequestTimeoutException('Unable to process your request at the moment please try later', {\n                description: 'Error connectiong to the database'\n            })\n        }\n\n        if (!user) {\n            throw new BadRequestException('The user id does not exist')\n        }\n        return await this.userRepository.findOneBy({\n            id: id,\n        })\n    }\n\n    public async createUser(createUserDto: CreateUserDto) {\n        return this.createUsersProvider.createUser(createUserDto)\n    }\n\n    public async createMany(createManyUsersDto: CreateManyUsersDTO) {\n        return await this.usersCreateManyProvider.createMany(createManyUsersDto)\n    }\n\n    public async findOneByEmail(email: string) {\n        return await this.findOneUserByEmailProvider.findOneByEmail(email)\n    }\n\n    public async findOneByGoogleId(googleId: string) {\n        return this.findOneByGoogleIdPrvider.findOneByGoogleId(googleId)\n    }\n\n    public async createGoogleUser(googleUser: GoogleUser) {\n        return await this.createGoogleUserProvider.createGoogleUser(googleUser)\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Public\n                                createManyUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        createManyUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createManyUsers(createManyUsersDTO: CreateManyUsersDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create-many')@UseGuards(AccessTokenGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createManyUsersDTO\n                                            \n                                                            CreateManyUsersDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDTO: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@Auth(AuthType.none)@UseInterceptors(ClassSerializerInterceptor)\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDTO\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUsersParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/:optional?')@ApiOperation({summary: 'Fetches a list of registered users on the application'})@ApiResponse({status: 200, description: 'Users fetched successfully based on the query'})@ApiQuery({name: 'limit', type: 'number', required: false, description: 'the number of entries returned per query', example: 10})@ApiQuery({name: 'page', type: 'number', required: false, description: 'the position of the page number that you want the API to return ', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUsersParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, ClassSerializerInterceptor, Controller, DefaultValuePipe, Get, Header, Headers, Ip, Param, ParseIntPipe, Patch, Post, Query, SetMetadata, UseGuards, UseInterceptors, ValidationPipe } from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UserService } from './providers/user.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreateManyUsersDTO } from './dtos/create-many-user.dto';\nimport { AccessTokenGuard } from 'src/auth/guards/access-token.guard';\nimport { Auth } from 'src/auth/decorators/auth.decorator';\nimport { AuthType } from 'src/auth/enums/auth-type';\n\n@Controller('users')\n@ApiTags('Users')\n//@UseGuards(AccessTokenGuard)\nexport class UsersController {\n\n    constructor(private readonly userService: UserService) { }\n    @Get('/:id/:optional?')\n    @ApiOperation({\n        summary: \"Fetches a list of registered users on the application\",\n    })\n    @ApiResponse({\n        status: 200,\n        description: \"Users fetched successfully based on the query\"\n    })\n    @ApiQuery({\n        name: 'limit',\n        type: \"number\",\n        required: false,\n        description: \"the number of entries returned per query\",\n        example: 10\n    })\n    @ApiQuery({\n        name: 'page',\n        type: \"number\",\n        required: false,\n        description: \"the position of the page number that you want the API to return \",\n        example: 1\n    })\n    public getUsers(/*@Param('id', ParseIntPipe) id: number | undefined*/ @Param() getUsersParamDto: GetUsersParamDto,\n        @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n        @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number\n    ) {\n        return this.userService.findAll(getUsersParamDto, limit, page)\n    }\n\n    @Post()\n    //@SetMetadata('authType', 'none')\n    @Auth(AuthType.none) // custom decorator\n    @UseInterceptors(ClassSerializerInterceptor)\n    public createUsers(@Body() createUserDTO: CreateUserDto,\n    ) {\n        return this.userService.createUser(createUserDTO);\n    }\n\n    @Post('create-many')\n    @UseGuards(AccessTokenGuard)\n    public createManyUsers(@Body() createManyUsersDTO: CreateManyUsersDTO\n    ) {\n        return this.userService.createMany(createManyUsersDTO);\n    }\n\n    @Patch()\n    public patchUser(@Body() patchUserDto: PatchUserDto) {\n        return patchUserDto\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUsersModule\n\nUsersModule\n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nCreateGoogleUserProvider\n\nCreateGoogleUserProvider\n\nUsersModule -->\n\nCreateGoogleUserProvider->UsersModule\n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUsersModule -->\n\nCreateUserProvider->UsersModule\n\n\n\n\n\nFindOneByGoogleIdProvider\n\nFindOneByGoogleIdProvider\n\nUsersModule -->\n\nFindOneByGoogleIdProvider->UsersModule\n\n\n\n\n\nFindOneUserByEmailProvider\n\nFindOneUserByEmailProvider\n\nUsersModule -->\n\nFindOneUserByEmailProvider->UsersModule\n\n\n\n\n\nUserCreateManyProvider\n\nUserCreateManyProvider\n\nUsersModule -->\n\nUserCreateManyProvider->UsersModule\n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CreateGoogleUserProvider\n                        \n                        \n                            CreateUserProvider\n                        \n                        \n                            FindOneByGoogleIdProvider\n                        \n                        \n                            FindOneUserByEmailProvider\n                        \n                        \n                            UserCreateManyProvider\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UserService } from './providers/user.service';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './user.entity';\nimport { ConfigModule } from '@nestjs/config';\nimport { UserCreateManyProvider } from './providers/user-create-many.provider';\nimport { CreateUserProvider } from './providers/create-user.provider';\nimport { FindOneUserByEmailProvider } from './providers/find-one-user-by-email.provider';\nimport profileConfig from './config/profile.config';\nimport { APP_GUARD } from '@nestjs/core';\nimport { AccessTokenGuard } from 'src/auth/guards/access-token.guard';\nimport jwtConfig from 'src/auth/config/jwt.config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { FindOneByGoogleIdProvider } from './providers/find-one-by-google-id.provider';\nimport { CreateGoogleUserProvider } from './providers/create-google-user.provider';\n\n@Module({\n    controllers: [UsersController],\n    providers: [UserService,\n        UserCreateManyProvider,\n        CreateUserProvider,\n        FindOneUserByEmailProvider,\n        FindOneByGoogleIdProvider,\n        CreateGoogleUserProvider\n    ],\n    exports: [UserService],\n    imports: [\n        forwardRef(() => AuthModule),\n        TypeOrmModule.forFeature([User]),\n        ConfigModule.forFeature(profileConfig),\n        ConfigModule.forFeature(jwtConfig),\n        JwtModule.registerAsync(jwtConfig.asProvider())\n    ]\n})\nexport class UsersModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.module.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/constants/auth.constants.ts\n            \n            variable\n            AUTH_TYPE_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/constants/auth.constants.ts\n            \n            variable\n            REQUEST_USER_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/active-user.decorator.ts\n            \n            variable\n            ActiveUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/auth.decorator.ts\n            \n            variable\n            Auth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dtos/refresh-token.dto.ts\n            \n            class\n            RefreshTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dtos/signin.dto.ts\n            \n            class\n            SignInDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/guards/access-token.guard.ts\n            \n            guard\n            AccessTokenGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/guards/authentication.guard.ts\n            \n            guard\n            AuthenticationGuard\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/interfaces/active-user-data.interface.ts\n            \n            interface\n            ActiveUserData\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/bcrypt.provider.ts\n            \n            injectable\n            BcryptProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/generate-tokens.provider.ts\n            \n            injectable\n            GenerateTokensProvider\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/providers/hashing.provider.ts\n            \n            injectable\n            HashingProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/refresh-tokens.provider.ts\n            \n            injectable\n            RefreshTokensProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/sign-in.provider.ts\n            \n            injectable\n            SignInProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/service/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/social/dtos/google-token.dto.ts\n            \n            class\n            GoogleTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/social/google-authentication.controller.ts\n            \n            controller\n            GoogleAuthenticationController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/social/providers/google-authentication.service.ts\n            \n            injectable\n            GoogleAuthenticationService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/interceptors/data-response/data-response.interceptor.ts\n            \n            injectable\n            DataResponseInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/pagination/dtos/pagination-query.dto.ts\n            \n            class\n            PaginationQueryDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/pagination/interfaces/paginated.interface.ts\n            \n            interface\n            Paginated\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/pagination/providers/pagination.provider.ts\n            \n            injectable\n            PaginationProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/mail/providers/mail.service.ts\n            \n            injectable\n            MailService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/dtos/create-post-meta-option.dtos.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/meta-option.entity.ts\n            \n            entity\n            MetaOption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/meta-options.controller.ts\n            \n            controller\n            MetaOptionsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/providers/meta-options.service.ts\n            \n            injectable\n            MetaOptionsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/post/dtos/create-post.dtos.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/post/dtos/get-posts.dto.ts\n            \n            class\n            GetPostBaseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/post/dtos/get-posts.dto.ts\n            \n            class\n            GetPostDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/post/dtos/patch-post-dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/post/post.controller.ts\n            \n            controller\n            PostController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/post/post.entity.ts\n            \n            entity\n            Post\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/post/services/create-post.provider.ts\n            \n            injectable\n            CreatePostProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/post/services/post.service.ts\n            \n            injectable\n            PostService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/dtos/create-tag.dto.ts\n            \n            class\n            CreateTagDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/providers/tags.service.ts\n            \n            injectable\n            TagsService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/tag.entity.ts\n            \n            entity\n            Tag\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tags/tags.controller.ts\n            \n            controller\n            TagsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/uploads/interfaces/upload-file.interface.ts\n            \n            interface\n            UploadFile\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/uploads/providers/upload-to-aws.provider.ts\n            \n            injectable\n            UploadToAwsProvider\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/uploads/providers/uploads.service.ts\n            \n            injectable\n            UploadsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/uploads/upload.entity.ts\n            \n            entity\n            Upload\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/uploads/uploads.controller.ts\n            \n            controller\n            UploadsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/create-many-user.dto.ts\n            \n            class\n            CreateManyUsersDTO\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/interfaces/google-user.interface.ts\n            \n            class\n            GoogleUser\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/providers/create-google-user.provider.ts\n            \n            injectable\n            CreateGoogleUserProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/create-user.provider.ts\n            \n            injectable\n            CreateUserProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/create-user.provider.ts\n            \n            function\n            InejectRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/providers/find-one-by-google-id.provider.ts\n            \n            injectable\n            FindOneByGoogleIdProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/find-one-user-by-email.provider.ts\n            \n            injectable\n            FindOneUserByEmailProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/user-create-many.provider.ts\n            \n            injectable\n            UserCreateManyProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/user.service.ts\n            \n            injectable\n            UserService\n            \n                33 %\n                (3/9)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.23\n        \n            @nestjs-modules/mailer : ^2.0.2\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.2\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.3.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            aws-sdk : ^2.1643.0\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            ejs : ^3.1.10\n        \n            google-auth-library : ^9.11.0\n        \n            joi : ^17.12.2\n        \n            nodemailer : ^6.9.13\n        \n            pg : ^8.11.5\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n        \n            uuid : ^10.0.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthType   (src/.../auth-type.ts)\n                        \n                        \n                            fileTypes   (src/.../file-types.enum.ts)\n                        \n                        \n                            postStatus   (src/.../status.enum.ts)\n                        \n                        \n                            postType   (src/.../postType.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/enums/auth-type.ts\n    \n        \n            \n                \n                    \n                        \n                        AuthType\n                    \n                \n                        \n                            \n                                 Bearer\n                            \n                        \n                        \n                            \n                                 none\n                            \n                        \n            \n        \n\n    src/uploads/enums/file-types.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        fileTypes\n                    \n                \n                        \n                            \n                                 IMAGE\n                            \n                        \n                        \n                            \n                                Value : image\n                            \n                        \n            \n        \n\n    src/post/enums/status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : DRAFT\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : SCHEDULED\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : REVIEW\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : PUBLISHED\n                            \n                        \n            \n        \n\n    src/post/enums/postType.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : POST\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : PAGE\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : STORY\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : SERIES\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            InejectRepository   (src/.../create-user.provider.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/users/providers/create-user.provider.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        InejectRepository\n                        \n                    \n                \n            \n            \n                \nInejectRepository()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MetaOptionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaginationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UploadsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_MailModule\n\n\n\ncluster_MailModule_providers\n\n\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_exports\n\n\n\ncluster_PaginationModule_providers\n\n\n\ncluster_PostModule\n\n\n\ncluster_PostModule_providers\n\n\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\ncluster_UploadsModule\n\n\n\ncluster_UploadsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nHashingProvider \n\nHashingProvider \n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nMailModule\n\nMailModule\n\nAppModule -->\n\nMailModule->AppModule\n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\n\n\nPostModule\n\nPostModule\n\nPostModule -->\n\nPaginationModule->PostModule\n\n\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nPaginationProvider \n\nPaginationProvider \n\nPaginationProvider  -->\n\nPaginationModule->PaginationProvider \n\n\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostModule -->\n\nTagsModule->PostModule\n\n\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nTagsService \n\nTagsService \n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nUploadsModule\n\nUploadsModule\n\nAppModule -->\n\nUploadsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostModule -->\n\nUsersModule->PostModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGenerateTokensProvider\n\nGenerateTokensProvider\n\nAuthModule -->\n\nGenerateTokensProvider->AuthModule\n\n\n\n\n\nGoogleAuthenticationService\n\nGoogleAuthenticationService\n\nAuthModule -->\n\nGoogleAuthenticationService->AuthModule\n\n\n\n\n\nRefreshTokensProvider\n\nRefreshTokensProvider\n\nAuthModule -->\n\nRefreshTokensProvider->AuthModule\n\n\n\n\n\nSignInProvider\n\nSignInProvider\n\nAuthModule -->\n\nSignInProvider->AuthModule\n\n\n\n\n\nMailService\n\nMailService\n\nMailModule -->\n\nMailService->MailModule\n\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nPaginationModule -->\n\nPaginationProvider->PaginationModule\n\n\n\n\n\nCreatePostProvider\n\nCreatePostProvider\n\nPostModule -->\n\nCreatePostProvider->PostModule\n\n\n\n\n\nPostService\n\nPostService\n\nPostModule -->\n\nPostService->PostModule\n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\nUploadToAwsProvider\n\nUploadToAwsProvider\n\nUploadsModule -->\n\nUploadToAwsProvider->UploadsModule\n\n\n\n\n\nUploadsService\n\nUploadsService\n\nUploadsModule -->\n\nUploadsService->UploadsModule\n\n\n\n\n\nCreateGoogleUserProvider\n\nCreateGoogleUserProvider\n\nUsersModule -->\n\nCreateGoogleUserProvider->UsersModule\n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUsersModule -->\n\nCreateUserProvider->UsersModule\n\n\n\n\n\nFindOneByGoogleIdProvider\n\nFindOneByGoogleIdProvider\n\nUsersModule -->\n\nFindOneByGoogleIdProvider->UsersModule\n\n\n\n\n\nFindOneUserByEmailProvider\n\nFindOneUserByEmailProvider\n\nUsersModule -->\n\nFindOneUserByEmailProvider->UsersModule\n\n\n\n\n\nUserCreateManyProvider\n\nUserCreateManyProvider\n\nUsersModule -->\n\nUserCreateManyProvider->UsersModule\n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        9 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    8 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    23 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    15 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ActiveUser   (src/.../active-user.decorator.ts)\n                        \n                        \n                            Auth   (src/.../auth.decorator.ts)\n                        \n                        \n                            AUTH_TYPE_KEY   (src/.../auth.constants.ts)\n                        \n                        \n                            ENV   (src/.../app.module.ts)\n                        \n                        \n                            REQUEST_USER_KEY   (src/.../auth.constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/decorators/active-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ActiveUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n    (field: keyof ActiveUserData | undefined, ctx: ExecutionContext) => {\n        const request = ctx.switchToHttp().getRequest()\n        const user: ActiveUserData = request[REQUEST_USER_KEY]\n        return field ? user?.[field] : user\n    }\n)\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Auth\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...authTypes: AuthType[]) => SetMetadata(AUTH_TYPE_KEY, authTypes)\n                    \n                \n\n\n        \n    \n\n    src/auth/constants/auth.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AUTH_TYPE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'authType'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        REQUEST_USER_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'user'\n                    \n                \n\n\n        \n    \n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
